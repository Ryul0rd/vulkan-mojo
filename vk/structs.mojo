from .constants import *
from .basetypes import *
from .external_types import *
from .enums import *
from .flags import *
from .handles import *
from .fn_types import *
from .unions import *
from .misc import *


alias Ptr = UnsafePointer


alias BufferUsageFlags2CreateInfoKHR = BufferUsageFlags2CreateInfo
alias PipelineCreateFlags2CreateInfoKHR = PipelineCreateFlags2CreateInfo
alias PhysicalDeviceExternalSciBufFeaturesNV = PhysicalDeviceExternalMemorySciBufFeaturesNV
alias DevicePrivateDataCreateInfoEXT = DevicePrivateDataCreateInfo
alias PrivateDataSlotCreateInfoEXT = PrivateDataSlotCreateInfo
alias PhysicalDevicePrivateDataFeaturesEXT = PhysicalDevicePrivateDataFeatures
alias PhysicalDeviceFeatures2KHR = PhysicalDeviceFeatures2
alias PhysicalDeviceProperties2KHR = PhysicalDeviceProperties2
alias FormatProperties2KHR = FormatProperties2
alias ImageFormatProperties2KHR = ImageFormatProperties2
alias PhysicalDeviceImageFormatInfo2KHR = PhysicalDeviceImageFormatInfo2
alias QueueFamilyProperties2KHR = QueueFamilyProperties2
alias PhysicalDeviceMemoryProperties2KHR = PhysicalDeviceMemoryProperties2
alias SparseImageFormatProperties2KHR = SparseImageFormatProperties2
alias PhysicalDeviceSparseImageFormatInfo2KHR = PhysicalDeviceSparseImageFormatInfo2
alias PhysicalDevicePushDescriptorPropertiesKHR = PhysicalDevicePushDescriptorProperties
alias ConformanceVersionKHR = ConformanceVersion
alias PhysicalDeviceDriverPropertiesKHR = PhysicalDeviceDriverProperties
alias PhysicalDeviceVariablePointersFeaturesKHR = PhysicalDeviceVariablePointersFeatures
alias PhysicalDeviceVariablePointerFeaturesKHR = PhysicalDeviceVariablePointersFeatures
alias PhysicalDeviceVariablePointerFeatures = PhysicalDeviceVariablePointersFeatures
alias ExternalMemoryPropertiesKHR = ExternalMemoryProperties
alias PhysicalDeviceExternalImageFormatInfoKHR = PhysicalDeviceExternalImageFormatInfo
alias ExternalImageFormatPropertiesKHR = ExternalImageFormatProperties
alias PhysicalDeviceExternalBufferInfoKHR = PhysicalDeviceExternalBufferInfo
alias ExternalBufferPropertiesKHR = ExternalBufferProperties
alias PhysicalDeviceIDPropertiesKHR = PhysicalDeviceIDProperties
alias ExternalMemoryImageCreateInfoKHR = ExternalMemoryImageCreateInfo
alias ExternalMemoryBufferCreateInfoKHR = ExternalMemoryBufferCreateInfo
alias ExportMemoryAllocateInfoKHR = ExportMemoryAllocateInfo
alias PhysicalDeviceExternalSemaphoreInfoKHR = PhysicalDeviceExternalSemaphoreInfo
alias ExternalSemaphorePropertiesKHR = ExternalSemaphoreProperties
alias ExportSemaphoreCreateInfoKHR = ExportSemaphoreCreateInfo
alias PhysicalDeviceExternalFenceInfoKHR = PhysicalDeviceExternalFenceInfo
alias ExternalFencePropertiesKHR = ExternalFenceProperties
alias ExportFenceCreateInfoKHR = ExportFenceCreateInfo
alias PhysicalDeviceMultiviewFeaturesKHR = PhysicalDeviceMultiviewFeatures
alias PhysicalDeviceMultiviewPropertiesKHR = PhysicalDeviceMultiviewProperties
alias RenderPassMultiviewCreateInfoKHR = RenderPassMultiviewCreateInfo
alias PhysicalDeviceGroupPropertiesKHR = PhysicalDeviceGroupProperties
alias MemoryAllocateFlagsInfoKHR = MemoryAllocateFlagsInfo
alias BindBufferMemoryInfoKHR = BindBufferMemoryInfo
alias BindBufferMemoryDeviceGroupInfoKHR = BindBufferMemoryDeviceGroupInfo
alias BindImageMemoryInfoKHR = BindImageMemoryInfo
alias BindImageMemoryDeviceGroupInfoKHR = BindImageMemoryDeviceGroupInfo
alias DeviceGroupRenderPassBeginInfoKHR = DeviceGroupRenderPassBeginInfo
alias DeviceGroupCommandBufferBeginInfoKHR = DeviceGroupCommandBufferBeginInfo
alias DeviceGroupSubmitInfoKHR = DeviceGroupSubmitInfo
alias DeviceGroupBindSparseInfoKHR = DeviceGroupBindSparseInfo
alias DeviceGroupDeviceCreateInfoKHR = DeviceGroupDeviceCreateInfo
alias DescriptorUpdateTemplateEntryKHR = DescriptorUpdateTemplateEntry
alias DescriptorUpdateTemplateCreateInfoKHR = DescriptorUpdateTemplateCreateInfo
alias InputAttachmentAspectReferenceKHR = InputAttachmentAspectReference
alias RenderPassInputAttachmentAspectCreateInfoKHR = RenderPassInputAttachmentAspectCreateInfo
alias PhysicalDevice16BitStorageFeaturesKHR = PhysicalDevice16BitStorageFeatures
alias PhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = PhysicalDeviceShaderSubgroupExtendedTypesFeatures
alias BufferMemoryRequirementsInfo2KHR = BufferMemoryRequirementsInfo2
alias DeviceBufferMemoryRequirementsKHR = DeviceBufferMemoryRequirements
alias ImageMemoryRequirementsInfo2KHR = ImageMemoryRequirementsInfo2
alias ImageSparseMemoryRequirementsInfo2KHR = ImageSparseMemoryRequirementsInfo2
alias DeviceImageMemoryRequirementsKHR = DeviceImageMemoryRequirements
alias MemoryRequirements2KHR = MemoryRequirements2
alias SparseImageMemoryRequirements2KHR = SparseImageMemoryRequirements2
alias PhysicalDevicePointClippingPropertiesKHR = PhysicalDevicePointClippingProperties
alias MemoryDedicatedRequirementsKHR = MemoryDedicatedRequirements
alias MemoryDedicatedAllocateInfoKHR = MemoryDedicatedAllocateInfo
alias ImageViewUsageCreateInfoKHR = ImageViewUsageCreateInfo
alias PipelineTessellationDomainOriginStateCreateInfoKHR = PipelineTessellationDomainOriginStateCreateInfo
alias SamplerYcbcrConversionInfoKHR = SamplerYcbcrConversionInfo
alias SamplerYcbcrConversionCreateInfoKHR = SamplerYcbcrConversionCreateInfo
alias BindImagePlaneMemoryInfoKHR = BindImagePlaneMemoryInfo
alias ImagePlaneMemoryRequirementsInfoKHR = ImagePlaneMemoryRequirementsInfo
alias PhysicalDeviceSamplerYcbcrConversionFeaturesKHR = PhysicalDeviceSamplerYcbcrConversionFeatures
alias SamplerYcbcrConversionImageFormatPropertiesKHR = SamplerYcbcrConversionImageFormatProperties
alias PhysicalDeviceSamplerFilterMinmaxPropertiesEXT = PhysicalDeviceSamplerFilterMinmaxProperties
alias SamplerReductionModeCreateInfoEXT = SamplerReductionModeCreateInfo
alias PhysicalDeviceInlineUniformBlockFeaturesEXT = PhysicalDeviceInlineUniformBlockFeatures
alias PhysicalDeviceInlineUniformBlockPropertiesEXT = PhysicalDeviceInlineUniformBlockProperties
alias WriteDescriptorSetInlineUniformBlockEXT = WriteDescriptorSetInlineUniformBlock
alias DescriptorPoolInlineUniformBlockCreateInfoEXT = DescriptorPoolInlineUniformBlockCreateInfo
alias ImageFormatListCreateInfoKHR = ImageFormatListCreateInfo
alias PhysicalDeviceMaintenance3PropertiesKHR = PhysicalDeviceMaintenance3Properties
alias PhysicalDeviceMaintenance4FeaturesKHR = PhysicalDeviceMaintenance4Features
alias PhysicalDeviceMaintenance4PropertiesKHR = PhysicalDeviceMaintenance4Properties
alias PhysicalDeviceMaintenance5FeaturesKHR = PhysicalDeviceMaintenance5Features
alias PhysicalDeviceMaintenance5PropertiesKHR = PhysicalDeviceMaintenance5Properties
alias PhysicalDeviceMaintenance6FeaturesKHR = PhysicalDeviceMaintenance6Features
alias PhysicalDeviceMaintenance6PropertiesKHR = PhysicalDeviceMaintenance6Properties
alias RenderingAreaInfoKHR = RenderingAreaInfo
alias DescriptorSetLayoutSupportKHR = DescriptorSetLayoutSupport
alias PhysicalDeviceShaderDrawParameterFeatures = PhysicalDeviceShaderDrawParametersFeatures
alias PhysicalDeviceShaderFloat16Int8FeaturesKHR = PhysicalDeviceShaderFloat16Int8Features
alias PhysicalDeviceFloat16Int8FeaturesKHR = PhysicalDeviceShaderFloat16Int8Features
alias PhysicalDeviceFloatControlsPropertiesKHR = PhysicalDeviceFloatControlsProperties
alias PhysicalDeviceHostQueryResetFeaturesEXT = PhysicalDeviceHostQueryResetFeatures
alias DeviceQueueGlobalPriorityCreateInfoKHR = DeviceQueueGlobalPriorityCreateInfo
alias DeviceQueueGlobalPriorityCreateInfoEXT = DeviceQueueGlobalPriorityCreateInfo
alias PhysicalDeviceGlobalPriorityQueryFeaturesKHR = PhysicalDeviceGlobalPriorityQueryFeatures
alias PhysicalDeviceGlobalPriorityQueryFeaturesEXT = PhysicalDeviceGlobalPriorityQueryFeatures
alias QueueFamilyGlobalPriorityPropertiesKHR = QueueFamilyGlobalPriorityProperties
alias QueueFamilyGlobalPriorityPropertiesEXT = QueueFamilyGlobalPriorityProperties
alias CalibratedTimestampInfoEXT = CalibratedTimestampInfoKHR
alias PhysicalDeviceDescriptorIndexingFeaturesEXT = PhysicalDeviceDescriptorIndexingFeatures
alias PhysicalDeviceDescriptorIndexingPropertiesEXT = PhysicalDeviceDescriptorIndexingProperties
alias DescriptorSetLayoutBindingFlagsCreateInfoEXT = DescriptorSetLayoutBindingFlagsCreateInfo
alias DescriptorSetVariableDescriptorCountAllocateInfoEXT = DescriptorSetVariableDescriptorCountAllocateInfo
alias DescriptorSetVariableDescriptorCountLayoutSupportEXT = DescriptorSetVariableDescriptorCountLayoutSupport
alias AttachmentDescription2KHR = AttachmentDescription2
alias AttachmentReference2KHR = AttachmentReference2
alias SubpassDescription2KHR = SubpassDescription2
alias SubpassDependency2KHR = SubpassDependency2
alias RenderPassCreateInfo2KHR = RenderPassCreateInfo2
alias SubpassBeginInfoKHR = SubpassBeginInfo
alias SubpassEndInfoKHR = SubpassEndInfo
alias PhysicalDeviceTimelineSemaphoreFeaturesKHR = PhysicalDeviceTimelineSemaphoreFeatures
alias PhysicalDeviceTimelineSemaphorePropertiesKHR = PhysicalDeviceTimelineSemaphoreProperties
alias SemaphoreTypeCreateInfoKHR = SemaphoreTypeCreateInfo
alias TimelineSemaphoreSubmitInfoKHR = TimelineSemaphoreSubmitInfo
alias SemaphoreWaitInfoKHR = SemaphoreWaitInfo
alias SemaphoreSignalInfoKHR = SemaphoreSignalInfo
alias VertexInputBindingDivisorDescriptionKHR = VertexInputBindingDivisorDescription
alias VertexInputBindingDivisorDescriptionEXT = VertexInputBindingDivisorDescription
alias PipelineVertexInputDivisorStateCreateInfoKHR = PipelineVertexInputDivisorStateCreateInfo
alias PipelineVertexInputDivisorStateCreateInfoEXT = PipelineVertexInputDivisorStateCreateInfo
alias PhysicalDeviceVertexAttributeDivisorPropertiesKHR = PhysicalDeviceVertexAttributeDivisorProperties
alias PhysicalDevice8BitStorageFeaturesKHR = PhysicalDevice8BitStorageFeatures
alias PhysicalDeviceVulkanMemoryModelFeaturesKHR = PhysicalDeviceVulkanMemoryModelFeatures
alias PhysicalDeviceShaderAtomicInt64FeaturesKHR = PhysicalDeviceShaderAtomicInt64Features
alias PhysicalDeviceVertexAttributeDivisorFeaturesKHR = PhysicalDeviceVertexAttributeDivisorFeatures
alias PhysicalDeviceVertexAttributeDivisorFeaturesEXT = PhysicalDeviceVertexAttributeDivisorFeatures
alias PhysicalDeviceDepthStencilResolvePropertiesKHR = PhysicalDeviceDepthStencilResolveProperties
alias SubpassDescriptionDepthStencilResolveKHR = SubpassDescriptionDepthStencilResolve
alias PhysicalDeviceComputeShaderDerivativesFeaturesNV = PhysicalDeviceComputeShaderDerivativesFeaturesKHR
alias PhysicalDeviceFragmentShaderBarycentricFeaturesNV = PhysicalDeviceFragmentShaderBarycentricFeaturesKHR
alias ImageStencilUsageCreateInfoEXT = ImageStencilUsageCreateInfo
alias PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = PhysicalDeviceFragmentDensityMapOffsetFeaturesEXT
alias PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = PhysicalDeviceFragmentDensityMapOffsetPropertiesEXT
alias SubpassFragmentDensityMapOffsetEndInfoQCOM = RenderPassFragmentDensityMapOffsetEndInfoEXT
alias PhysicalDeviceScalarBlockLayoutFeaturesEXT = PhysicalDeviceScalarBlockLayoutFeatures
alias PhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = PhysicalDeviceUniformBufferStandardLayoutFeatures
alias PhysicalDeviceBufferDeviceAddressFeaturesKHR = PhysicalDeviceBufferDeviceAddressFeatures
alias PhysicalDeviceBufferAddressFeaturesEXT = PhysicalDeviceBufferDeviceAddressFeaturesEXT
alias BufferDeviceAddressInfoKHR = BufferDeviceAddressInfo
alias BufferDeviceAddressInfoEXT = BufferDeviceAddressInfo
alias BufferOpaqueCaptureAddressCreateInfoKHR = BufferOpaqueCaptureAddressCreateInfo
alias PhysicalDeviceImagelessFramebufferFeaturesKHR = PhysicalDeviceImagelessFramebufferFeatures
alias FramebufferAttachmentsCreateInfoKHR = FramebufferAttachmentsCreateInfo
alias FramebufferAttachmentImageInfoKHR = FramebufferAttachmentImageInfo
alias RenderPassAttachmentBeginInfoKHR = RenderPassAttachmentBeginInfo
alias PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = PhysicalDeviceTextureCompressionASTCHDRFeatures
alias PipelineCreationFeedbackEXT = PipelineCreationFeedback
alias PipelineCreationFeedbackCreateInfoEXT = PipelineCreationFeedbackCreateInfo
alias QueryPoolCreateInfoINTEL = QueryPoolPerformanceQueryCreateInfoINTEL
alias PhysicalDeviceIndexTypeUint8FeaturesKHR = PhysicalDeviceIndexTypeUint8Features
alias PhysicalDeviceIndexTypeUint8FeaturesEXT = PhysicalDeviceIndexTypeUint8Features
alias PhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = PhysicalDeviceSeparateDepthStencilLayoutsFeatures
alias AttachmentReferenceStencilLayoutKHR = AttachmentReferenceStencilLayout
alias AttachmentDescriptionStencilLayoutKHR = AttachmentDescriptionStencilLayout
alias PipelineInfoEXT = PipelineInfoKHR
alias PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = PhysicalDeviceShaderDemoteToHelperInvocationFeatures
alias PhysicalDeviceTexelBufferAlignmentPropertiesEXT = PhysicalDeviceTexelBufferAlignmentProperties
alias PhysicalDeviceSubgroupSizeControlFeaturesEXT = PhysicalDeviceSubgroupSizeControlFeatures
alias PhysicalDeviceSubgroupSizeControlPropertiesEXT = PhysicalDeviceSubgroupSizeControlProperties
alias PipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = PipelineShaderStageRequiredSubgroupSizeCreateInfo
alias ShaderRequiredSubgroupSizeCreateInfoEXT = PipelineShaderStageRequiredSubgroupSizeCreateInfo
alias MemoryOpaqueCaptureAddressAllocateInfoKHR = MemoryOpaqueCaptureAddressAllocateInfo
alias DeviceMemoryOpaqueCaptureAddressInfoKHR = DeviceMemoryOpaqueCaptureAddressInfo
alias PhysicalDeviceLineRasterizationFeaturesKHR = PhysicalDeviceLineRasterizationFeatures
alias PhysicalDeviceLineRasterizationFeaturesEXT = PhysicalDeviceLineRasterizationFeatures
alias PhysicalDeviceLineRasterizationPropertiesKHR = PhysicalDeviceLineRasterizationProperties
alias PhysicalDeviceLineRasterizationPropertiesEXT = PhysicalDeviceLineRasterizationProperties
alias PipelineRasterizationLineStateCreateInfoKHR = PipelineRasterizationLineStateCreateInfo
alias PipelineRasterizationLineStateCreateInfoEXT = PipelineRasterizationLineStateCreateInfo
alias PhysicalDevicePipelineCreationCacheControlFeaturesEXT = PhysicalDevicePipelineCreationCacheControlFeatures
alias PhysicalDeviceToolPropertiesEXT = PhysicalDeviceToolProperties
alias AabbPositionsNV = AabbPositionsKHR
alias TransformMatrixNV = TransformMatrixKHR
alias AccelerationStructureInstanceNV = AccelerationStructureInstanceKHR
alias PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
alias PhysicalDeviceRobustness2FeaturesEXT = PhysicalDeviceRobustness2FeaturesKHR
alias PhysicalDeviceRobustness2PropertiesEXT = PhysicalDeviceRobustness2PropertiesKHR
alias PhysicalDeviceImageRobustnessFeaturesEXT = PhysicalDeviceImageRobustnessFeatures
alias BufferCopy2KHR = BufferCopy2
alias ImageCopy2KHR = ImageCopy2
alias ImageBlit2KHR = ImageBlit2
alias BufferImageCopy2KHR = BufferImageCopy2
alias ImageResolve2KHR = ImageResolve2
alias CopyBufferInfo2KHR = CopyBufferInfo2
alias CopyImageInfo2KHR = CopyImageInfo2
alias BlitImageInfo2KHR = BlitImageInfo2
alias CopyBufferToImageInfo2KHR = CopyBufferToImageInfo2
alias CopyImageToBufferInfo2KHR = CopyImageToBufferInfo2
alias ResolveImageInfo2KHR = ResolveImageInfo2
alias PhysicalDeviceShaderTerminateInvocationFeaturesKHR = PhysicalDeviceShaderTerminateInvocationFeatures
alias PhysicalDeviceMutableDescriptorTypeFeaturesVALVE = PhysicalDeviceMutableDescriptorTypeFeaturesEXT
alias MutableDescriptorTypeListVALVE = MutableDescriptorTypeListEXT
alias MutableDescriptorTypeCreateInfoVALVE = MutableDescriptorTypeCreateInfoEXT
alias MemoryBarrier2KHR = MemoryBarrier2
alias ImageMemoryBarrier2KHR = ImageMemoryBarrier2
alias BufferMemoryBarrier2KHR = BufferMemoryBarrier2
alias DependencyInfoKHR = DependencyInfo
alias SemaphoreSubmitInfoKHR = SemaphoreSubmitInfo
alias CommandBufferSubmitInfoKHR = CommandBufferSubmitInfo
alias SubmitInfo2KHR = SubmitInfo2
alias PhysicalDeviceSynchronization2FeaturesKHR = PhysicalDeviceSynchronization2Features
alias PhysicalDeviceHostImageCopyFeaturesEXT = PhysicalDeviceHostImageCopyFeatures
alias PhysicalDeviceHostImageCopyPropertiesEXT = PhysicalDeviceHostImageCopyProperties
alias MemoryToImageCopyEXT = MemoryToImageCopy
alias ImageToMemoryCopyEXT = ImageToMemoryCopy
alias CopyMemoryToImageInfoEXT = CopyMemoryToImageInfo
alias CopyImageToMemoryInfoEXT = CopyImageToMemoryInfo
alias CopyImageToImageInfoEXT = CopyImageToImageInfo
alias HostImageLayoutTransitionInfoEXT = HostImageLayoutTransitionInfo
alias SubresourceHostMemcpySizeEXT = SubresourceHostMemcpySize
alias HostImageCopyDevicePerformanceQueryEXT = HostImageCopyDevicePerformanceQuery
alias PhysicalDevicePipelineProtectedAccessFeaturesEXT = PhysicalDevicePipelineProtectedAccessFeatures
alias PhysicalDeviceShaderIntegerDotProductFeaturesKHR = PhysicalDeviceShaderIntegerDotProductFeatures
alias PhysicalDeviceShaderIntegerDotProductPropertiesKHR = PhysicalDeviceShaderIntegerDotProductProperties
alias FormatProperties3KHR = FormatProperties3
alias PipelineRenderingCreateInfoKHR = PipelineRenderingCreateInfo
alias RenderingInfoKHR = RenderingInfo
alias RenderingAttachmentInfoKHR = RenderingAttachmentInfo
alias PhysicalDeviceDynamicRenderingFeaturesKHR = PhysicalDeviceDynamicRenderingFeatures
alias CommandBufferInheritanceRenderingInfoKHR = CommandBufferInheritanceRenderingInfo
alias AttachmentSampleCountInfoNV = AttachmentSampleCountInfoAMD
alias PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
alias ImageSubresource2KHR = ImageSubresource2
alias ImageSubresource2EXT = ImageSubresource2
alias SubresourceLayout2KHR = SubresourceLayout2
alias SubresourceLayout2EXT = SubresourceLayout2
alias PhysicalDevicePipelineRobustnessFeaturesEXT = PhysicalDevicePipelineRobustnessFeatures
alias PipelineRobustnessCreateInfoEXT = PipelineRobustnessCreateInfo
alias PhysicalDevicePipelineRobustnessPropertiesEXT = PhysicalDevicePipelineRobustnessProperties
alias PhysicalDeviceDepthClampZeroOneFeaturesEXT = PhysicalDeviceDepthClampZeroOneFeaturesKHR
alias SurfacePresentModeEXT = SurfacePresentModeKHR
alias SurfacePresentScalingCapabilitiesEXT = SurfacePresentScalingCapabilitiesKHR
alias SurfacePresentModeCompatibilityEXT = SurfacePresentModeCompatibilityKHR
alias PhysicalDeviceSwapchainMaintenance1FeaturesEXT = PhysicalDeviceSwapchainMaintenance1FeaturesKHR
alias SwapchainPresentFenceInfoEXT = SwapchainPresentFenceInfoKHR
alias SwapchainPresentModesCreateInfoEXT = SwapchainPresentModesCreateInfoKHR
alias SwapchainPresentModeInfoEXT = SwapchainPresentModeInfoKHR
alias SwapchainPresentScalingCreateInfoEXT = SwapchainPresentScalingCreateInfoKHR
alias ReleaseSwapchainImagesInfoEXT = ReleaseSwapchainImagesInfoKHR
alias DeviceImageSubresourceInfoKHR = DeviceImageSubresourceInfo
alias MemoryMapInfoKHR = MemoryMapInfo
alias MemoryUnmapInfoKHR = MemoryUnmapInfo
alias BindMemoryStatusKHR = BindMemoryStatus
alias BindDescriptorSetsInfoKHR = BindDescriptorSetsInfo
alias PushConstantsInfoKHR = PushConstantsInfo
alias PushDescriptorSetInfoKHR = PushDescriptorSetInfo
alias PushDescriptorSetWithTemplateInfoKHR = PushDescriptorSetWithTemplateInfo
alias PhysicalDeviceShaderSubgroupRotateFeaturesKHR = PhysicalDeviceShaderSubgroupRotateFeatures
alias PhysicalDeviceShaderExpectAssumeFeaturesKHR = PhysicalDeviceShaderExpectAssumeFeatures
alias PhysicalDeviceShaderFloatControls2FeaturesKHR = PhysicalDeviceShaderFloatControls2Features
alias PhysicalDeviceDynamicRenderingLocalReadFeaturesKHR = PhysicalDeviceDynamicRenderingLocalReadFeatures
alias RenderingAttachmentLocationInfoKHR = RenderingAttachmentLocationInfo
alias RenderingInputAttachmentIndexInfoKHR = RenderingInputAttachmentIndexInfo
alias PhysicalDevicePresentModeFifoLatestReadyFeaturesEXT = PhysicalDevicePresentModeFifoLatestReadyFeaturesKHR


struct BaseOutStructure(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[BaseOutStructure]

    fn __init__(
        out self,
        s_type: StructureType = zero_init[StructureType](),
        p_next: Ptr[BaseOutStructure] = zero_init[Ptr[BaseOutStructure]](),
    ):
        self.s_type = s_type
        self.p_next = p_next


struct BaseInStructure(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[BaseInStructure]

    fn __init__(
        out self,
        s_type: StructureType = zero_init[StructureType](),
        p_next: Ptr[BaseInStructure] = zero_init[Ptr[BaseInStructure]](),
    ):
        self.s_type = s_type
        self.p_next = p_next


struct Offset2D(ImplicitlyCopyable, Movable):
    var x: Int32
    var y: Int32

    fn __init__(
        out self,
        x: Int32 = zero_init[Int32](),
        y: Int32 = zero_init[Int32](),
    ):
        self.x = x
        self.y = y


struct Offset3D(ImplicitlyCopyable, Movable):
    var x: Int32
    var y: Int32
    var z: Int32

    fn __init__(
        out self,
        x: Int32 = zero_init[Int32](),
        y: Int32 = zero_init[Int32](),
        z: Int32 = zero_init[Int32](),
    ):
        self.x = x
        self.y = y
        self.z = z


struct Extent2D(ImplicitlyCopyable, Movable):
    var width: UInt32
    var height: UInt32

    fn __init__(
        out self,
        width: UInt32 = zero_init[UInt32](),
        height: UInt32 = zero_init[UInt32](),
    ):
        self.width = width
        self.height = height


struct Extent3D(ImplicitlyCopyable, Movable):
    var width: UInt32
    var height: UInt32
    var depth: UInt32

    fn __init__(
        out self,
        width: UInt32 = zero_init[UInt32](),
        height: UInt32 = zero_init[UInt32](),
        depth: UInt32 = zero_init[UInt32](),
    ):
        self.width = width
        self.height = height
        self.depth = depth


struct Viewport(ImplicitlyCopyable, Movable):
    var x: Float32
    var y: Float32
    var width: Float32
    var height: Float32
    var min_depth: Float32
    var max_depth: Float32

    fn __init__(
        out self,
        x: Float32 = zero_init[Float32](),
        y: Float32 = zero_init[Float32](),
        width: Float32 = zero_init[Float32](),
        height: Float32 = zero_init[Float32](),
        min_depth: Float32 = zero_init[Float32](),
        max_depth: Float32 = zero_init[Float32](),
    ):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.min_depth = min_depth
        self.max_depth = max_depth


struct Rect2D(ImplicitlyCopyable, Movable):
    var offset: Offset2D
    var extent: Extent2D

    fn __init__(
        out self,
        offset: Offset2D = zero_init[Offset2D](),
        extent: Extent2D = zero_init[Extent2D](),
    ):
        self.offset = offset
        self.extent = extent


struct ClearRect(ImplicitlyCopyable, Movable):
    var rect: Rect2D
    var base_array_layer: UInt32
    var layer_count: UInt32

    fn __init__(
        out self,
        rect: Rect2D = zero_init[Rect2D](),
        base_array_layer: UInt32 = zero_init[UInt32](),
        layer_count: UInt32 = zero_init[UInt32](),
    ):
        self.rect = rect
        self.base_array_layer = base_array_layer
        self.layer_count = layer_count


struct ComponentMapping(ImplicitlyCopyable, Movable):
    var r: ComponentSwizzle
    var g: ComponentSwizzle
    var b: ComponentSwizzle
    var a: ComponentSwizzle

    fn __init__(
        out self,
        r: ComponentSwizzle = zero_init[ComponentSwizzle](),
        g: ComponentSwizzle = zero_init[ComponentSwizzle](),
        b: ComponentSwizzle = zero_init[ComponentSwizzle](),
        a: ComponentSwizzle = zero_init[ComponentSwizzle](),
    ):
        self.r = r
        self.g = g
        self.b = b
        self.a = a


struct PhysicalDeviceProperties(ImplicitlyCopyable, Movable):
    var api_version: Version
    var driver_version: Version
    var vendor_id: UInt32
    var device_id: UInt32
    var device_type: PhysicalDeviceType
    var device_name: InlineArray[UInt8, Int(MAX_PHYSICAL_DEVICE_NAME_SIZE)]
    var pipeline_cache_uuid: InlineArray[UInt8, Int(UUID_SIZE)]
    var limits: PhysicalDeviceLimits
    var sparse_properties: PhysicalDeviceSparseProperties

    fn __init__(
        out self,
        api_version: Version = zero_init[Version](),
        driver_version: Version = zero_init[Version](),
        vendor_id: UInt32 = zero_init[UInt32](),
        device_id: UInt32 = zero_init[UInt32](),
        device_type: PhysicalDeviceType = zero_init[PhysicalDeviceType](),
        device_name: InlineArray[UInt8, Int(MAX_PHYSICAL_DEVICE_NAME_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_PHYSICAL_DEVICE_NAME_SIZE)]](),
        pipeline_cache_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        limits: PhysicalDeviceLimits = zero_init[PhysicalDeviceLimits](),
        sparse_properties: PhysicalDeviceSparseProperties = zero_init[PhysicalDeviceSparseProperties](),
    ):
        self.api_version = api_version
        self.driver_version = driver_version
        self.vendor_id = vendor_id
        self.device_id = device_id
        self.device_type = device_type
        self.device_name = device_name
        self.pipeline_cache_uuid = pipeline_cache_uuid
        self.limits = limits
        self.sparse_properties = sparse_properties

    fn device_name_slice(self) -> StringSlice[__origin_of(self.device_name)]:
        return StringSlice[__origin_of(self.device_name)](unsafe_from_utf8_ptr = self.device_name.unsafe_ptr())


struct ExtensionProperties(ImplicitlyCopyable, Movable):
    var extension_name: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]
    var spec_version: Version

    fn __init__(
        out self,
        extension_name: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]](),
        spec_version: Version = zero_init[Version](),
    ):
        self.extension_name = extension_name
        self.spec_version = spec_version

    fn extension_name_slice(self) -> StringSlice[__origin_of(self.extension_name)]:
        return StringSlice[__origin_of(self.extension_name)](unsafe_from_utf8_ptr = self.extension_name.unsafe_ptr())


struct LayerProperties(ImplicitlyCopyable, Movable):
    var layer_name: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]
    var spec_version: Version
    var implementation_version: Version
    var description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]

    fn __init__(
        out self,
        layer_name: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]](),
        spec_version: Version = zero_init[Version](),
        implementation_version: Version = zero_init[Version](),
        description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
    ):
        self.layer_name = layer_name
        self.spec_version = spec_version
        self.implementation_version = implementation_version
        self.description = description

    fn layer_name_slice(self) -> StringSlice[__origin_of(self.layer_name)]:
        return StringSlice[__origin_of(self.layer_name)](unsafe_from_utf8_ptr = self.layer_name.unsafe_ptr())

    fn description_slice(self) -> StringSlice[__origin_of(self.description)]:
        return StringSlice[__origin_of(self.description)](unsafe_from_utf8_ptr = self.description.unsafe_ptr())


struct ApplicationInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_application_name: Ptr[UInt8]
    var application_version: Version
    var p_engine_name: Ptr[UInt8]
    var engine_version: Version
    var api_version: Version

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_application_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        application_version: Version = zero_init[Version](),
        p_engine_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        engine_version: Version = zero_init[Version](),
        api_version: Version = zero_init[Version](),
    ):
        self.s_type = StructureType.APPLICATION_INFO
        self.p_next = p_next
        self.p_application_name = p_application_name
        self.application_version = application_version
        self.p_engine_name = p_engine_name
        self.engine_version = engine_version
        self.api_version = api_version


struct AllocationCallbacks(ImplicitlyCopyable, Movable):
    var p_user_data: Ptr[NoneType]
    var pfn_allocation: PFN_vkAllocationFunction
    var pfn_reallocation: PFN_vkReallocationFunction
    var pfn_free: PFN_vkFreeFunction
    var pfn_internal_allocation: PFN_vkInternalAllocationNotification
    var pfn_internal_free: PFN_vkInternalFreeNotification

    fn __init__(
        out self,
        p_user_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pfn_allocation: PFN_vkAllocationFunction = zero_init[PFN_vkAllocationFunction](),
        pfn_reallocation: PFN_vkReallocationFunction = zero_init[PFN_vkReallocationFunction](),
        pfn_free: PFN_vkFreeFunction = zero_init[PFN_vkFreeFunction](),
        pfn_internal_allocation: PFN_vkInternalAllocationNotification = zero_init[PFN_vkInternalAllocationNotification](),
        pfn_internal_free: PFN_vkInternalFreeNotification = zero_init[PFN_vkInternalFreeNotification](),
    ):
        self.p_user_data = p_user_data
        self.pfn_allocation = pfn_allocation
        self.pfn_reallocation = pfn_reallocation
        self.pfn_free = pfn_free
        self.pfn_internal_allocation = pfn_internal_allocation
        self.pfn_internal_free = pfn_internal_free


struct DeviceQueueCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DeviceQueueCreateFlags
    var queue_family_index: UInt32
    var queue_count: UInt32
    var p_queue_priorities: Ptr[Float32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DeviceQueueCreateFlags = zero_init[DeviceQueueCreateFlags](),
        queue_family_index: UInt32 = zero_init[UInt32](),
        queue_count: UInt32 = zero_init[UInt32](),
        p_queue_priorities: Ptr[Float32] = zero_init[Ptr[Float32]](),
    ):
        self.s_type = StructureType.DEVICE_QUEUE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.queue_family_index = queue_family_index
        self.queue_count = queue_count
        self.p_queue_priorities = p_queue_priorities


struct DeviceCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DeviceCreateFlags
    var queue_create_info_count: UInt32
    var p_queue_create_infos: Ptr[DeviceQueueCreateInfo]
    var enabled_layer_count: UInt32
    var pp_enabled_layer_names: Ptr[Ptr[UInt8]]
    var enabled_extension_count: UInt32
    var pp_enabled_extension_names: Ptr[Ptr[UInt8]]
    var p_enabled_features: Ptr[PhysicalDeviceFeatures]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DeviceCreateFlags = zero_init[DeviceCreateFlags](),
        queue_create_info_count: UInt32 = zero_init[UInt32](),
        p_queue_create_infos: Ptr[DeviceQueueCreateInfo] = zero_init[Ptr[DeviceQueueCreateInfo]](),
        enabled_layer_count: UInt32 = zero_init[UInt32](),
        pp_enabled_layer_names: Ptr[Ptr[UInt8]] = zero_init[Ptr[Ptr[UInt8]]](),
        enabled_extension_count: UInt32 = zero_init[UInt32](),
        pp_enabled_extension_names: Ptr[Ptr[UInt8]] = zero_init[Ptr[Ptr[UInt8]]](),
        p_enabled_features: Ptr[PhysicalDeviceFeatures] = zero_init[Ptr[PhysicalDeviceFeatures]](),
    ):
        self.s_type = StructureType.DEVICE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.queue_create_info_count = queue_create_info_count
        self.p_queue_create_infos = p_queue_create_infos
        self.enabled_layer_count = enabled_layer_count
        self.pp_enabled_layer_names = pp_enabled_layer_names
        self.enabled_extension_count = enabled_extension_count
        self.pp_enabled_extension_names = pp_enabled_extension_names
        self.p_enabled_features = p_enabled_features


struct InstanceCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: InstanceCreateFlags
    var p_application_info: Ptr[ApplicationInfo]
    var enabled_layer_count: UInt32
    var pp_enabled_layer_names: Ptr[Ptr[UInt8]]
    var enabled_extension_count: UInt32
    var pp_enabled_extension_names: Ptr[Ptr[UInt8]]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: InstanceCreateFlags = zero_init[InstanceCreateFlags](),
        p_application_info: Ptr[ApplicationInfo] = zero_init[Ptr[ApplicationInfo]](),
        enabled_layer_count: UInt32 = zero_init[UInt32](),
        pp_enabled_layer_names: Ptr[Ptr[UInt8]] = zero_init[Ptr[Ptr[UInt8]]](),
        enabled_extension_count: UInt32 = zero_init[UInt32](),
        pp_enabled_extension_names: Ptr[Ptr[UInt8]] = zero_init[Ptr[Ptr[UInt8]]](),
    ):
        self.s_type = StructureType.INSTANCE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.p_application_info = p_application_info
        self.enabled_layer_count = enabled_layer_count
        self.pp_enabled_layer_names = pp_enabled_layer_names
        self.enabled_extension_count = enabled_extension_count
        self.pp_enabled_extension_names = pp_enabled_extension_names


struct QueueFamilyProperties(ImplicitlyCopyable, Movable):
    var queue_flags: QueueFlags
    var queue_count: UInt32
    var timestamp_valid_bits: UInt32
    var min_image_transfer_granularity: Extent3D

    fn __init__(
        out self,
        queue_flags: QueueFlags = zero_init[QueueFlags](),
        queue_count: UInt32 = zero_init[UInt32](),
        timestamp_valid_bits: UInt32 = zero_init[UInt32](),
        min_image_transfer_granularity: Extent3D = zero_init[Extent3D](),
    ):
        self.queue_flags = queue_flags
        self.queue_count = queue_count
        self.timestamp_valid_bits = timestamp_valid_bits
        self.min_image_transfer_granularity = min_image_transfer_granularity


struct PhysicalDeviceMemoryProperties(ImplicitlyCopyable, Movable):
    var memory_type_count: UInt32
    var memory_types: InlineArray[MemoryType, Int(MAX_MEMORY_TYPES)]
    var memory_heap_count: UInt32
    var memory_heaps: InlineArray[MemoryHeap, Int(MAX_MEMORY_HEAPS)]

    fn __init__(
        out self,
        memory_type_count: UInt32 = zero_init[UInt32](),
        memory_types: InlineArray[MemoryType, Int(MAX_MEMORY_TYPES)] = zero_init[InlineArray[MemoryType, Int(MAX_MEMORY_TYPES)]](),
        memory_heap_count: UInt32 = zero_init[UInt32](),
        memory_heaps: InlineArray[MemoryHeap, Int(MAX_MEMORY_HEAPS)] = zero_init[InlineArray[MemoryHeap, Int(MAX_MEMORY_HEAPS)]](),
    ):
        self.memory_type_count = memory_type_count
        self.memory_types = memory_types
        self.memory_heap_count = memory_heap_count
        self.memory_heaps = memory_heaps


struct MemoryAllocateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var allocation_size: DeviceSize
    var memory_type_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        allocation_size: DeviceSize = zero_init[DeviceSize](),
        memory_type_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.MEMORY_ALLOCATE_INFO
        self.p_next = p_next
        self.allocation_size = allocation_size
        self.memory_type_index = memory_type_index


struct MemoryRequirements(ImplicitlyCopyable, Movable):
    var size: DeviceSize
    var alignment: DeviceSize
    var memory_type_bits: UInt32

    fn __init__(
        out self,
        size: DeviceSize = zero_init[DeviceSize](),
        alignment: DeviceSize = zero_init[DeviceSize](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
    ):
        self.size = size
        self.alignment = alignment
        self.memory_type_bits = memory_type_bits


struct SparseImageFormatProperties(ImplicitlyCopyable, Movable):
    var aspect_mask: ImageAspectFlags
    var image_granularity: Extent3D
    var flags: SparseImageFormatFlags

    fn __init__(
        out self,
        aspect_mask: ImageAspectFlags = zero_init[ImageAspectFlags](),
        image_granularity: Extent3D = zero_init[Extent3D](),
        flags: SparseImageFormatFlags = zero_init[SparseImageFormatFlags](),
    ):
        self.aspect_mask = aspect_mask
        self.image_granularity = image_granularity
        self.flags = flags


struct SparseImageMemoryRequirements(ImplicitlyCopyable, Movable):
    var format_properties: SparseImageFormatProperties
    var image_mip_tail_first_lod: UInt32
    var image_mip_tail_size: DeviceSize
    var image_mip_tail_offset: DeviceSize
    var image_mip_tail_stride: DeviceSize

    fn __init__(
        out self,
        format_properties: SparseImageFormatProperties = zero_init[SparseImageFormatProperties](),
        image_mip_tail_first_lod: UInt32 = zero_init[UInt32](),
        image_mip_tail_size: DeviceSize = zero_init[DeviceSize](),
        image_mip_tail_offset: DeviceSize = zero_init[DeviceSize](),
        image_mip_tail_stride: DeviceSize = zero_init[DeviceSize](),
    ):
        self.format_properties = format_properties
        self.image_mip_tail_first_lod = image_mip_tail_first_lod
        self.image_mip_tail_size = image_mip_tail_size
        self.image_mip_tail_offset = image_mip_tail_offset
        self.image_mip_tail_stride = image_mip_tail_stride


struct MemoryType(ImplicitlyCopyable, Movable):
    var property_flags: MemoryPropertyFlags
    var heap_index: UInt32

    fn __init__(
        out self,
        property_flags: MemoryPropertyFlags = zero_init[MemoryPropertyFlags](),
        heap_index: UInt32 = zero_init[UInt32](),
    ):
        self.property_flags = property_flags
        self.heap_index = heap_index


struct MemoryHeap(ImplicitlyCopyable, Movable):
    var size: DeviceSize
    var flags: MemoryHeapFlags

    fn __init__(
        out self,
        size: DeviceSize = zero_init[DeviceSize](),
        flags: MemoryHeapFlags = zero_init[MemoryHeapFlags](),
    ):
        self.size = size
        self.flags = flags


struct MappedMemoryRange(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory
    var offset: DeviceSize
    var size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.MAPPED_MEMORY_RANGE
        self.p_next = p_next
        self.memory = memory
        self.offset = offset
        self.size = size


struct FormatProperties(ImplicitlyCopyable, Movable):
    var linear_tiling_features: FormatFeatureFlags
    var optimal_tiling_features: FormatFeatureFlags
    var buffer_features: FormatFeatureFlags

    fn __init__(
        out self,
        linear_tiling_features: FormatFeatureFlags = zero_init[FormatFeatureFlags](),
        optimal_tiling_features: FormatFeatureFlags = zero_init[FormatFeatureFlags](),
        buffer_features: FormatFeatureFlags = zero_init[FormatFeatureFlags](),
    ):
        self.linear_tiling_features = linear_tiling_features
        self.optimal_tiling_features = optimal_tiling_features
        self.buffer_features = buffer_features


struct ImageFormatProperties(ImplicitlyCopyable, Movable):
    var max_extent: Extent3D
    var max_mip_levels: UInt32
    var max_array_layers: UInt32
    var sample_counts: SampleCountFlags
    var max_resource_size: DeviceSize

    fn __init__(
        out self,
        max_extent: Extent3D = zero_init[Extent3D](),
        max_mip_levels: UInt32 = zero_init[UInt32](),
        max_array_layers: UInt32 = zero_init[UInt32](),
        sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        max_resource_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.max_extent = max_extent
        self.max_mip_levels = max_mip_levels
        self.max_array_layers = max_array_layers
        self.sample_counts = sample_counts
        self.max_resource_size = max_resource_size


struct DescriptorBufferInfo(ImplicitlyCopyable, Movable):
    var buffer: Buffer
    var offset: DeviceSize
    var range: DeviceSize

    fn __init__(
        out self,
        buffer: Buffer = zero_init[Buffer](),
        offset: DeviceSize = zero_init[DeviceSize](),
        range: DeviceSize = zero_init[DeviceSize](),
    ):
        self.buffer = buffer
        self.offset = offset
        self.range = range


struct DescriptorImageInfo(ImplicitlyCopyable, Movable):
    var sampler: Sampler
    var image_view: ImageView
    var image_layout: ImageLayout

    fn __init__(
        out self,
        sampler: Sampler = zero_init[Sampler](),
        image_view: ImageView = zero_init[ImageView](),
        image_layout: ImageLayout = zero_init[ImageLayout](),
    ):
        self.sampler = sampler
        self.image_view = image_view
        self.image_layout = image_layout


struct WriteDescriptorSet(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dst_set: DescriptorSet
    var dst_binding: UInt32
    var dst_array_element: UInt32
    var descriptor_count: UInt32
    var descriptor_type: DescriptorType
    var p_image_info: Ptr[DescriptorImageInfo]
    var p_buffer_info: Ptr[DescriptorBufferInfo]
    var p_texel_buffer_view: Ptr[BufferView]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dst_set: DescriptorSet = zero_init[DescriptorSet](),
        dst_binding: UInt32 = zero_init[UInt32](),
        dst_array_element: UInt32 = zero_init[UInt32](),
        descriptor_count: UInt32 = zero_init[UInt32](),
        descriptor_type: DescriptorType = zero_init[DescriptorType](),
        p_image_info: Ptr[DescriptorImageInfo] = zero_init[Ptr[DescriptorImageInfo]](),
        p_buffer_info: Ptr[DescriptorBufferInfo] = zero_init[Ptr[DescriptorBufferInfo]](),
        p_texel_buffer_view: Ptr[BufferView] = zero_init[Ptr[BufferView]](),
    ):
        self.s_type = StructureType.WRITE_DESCRIPTOR_SET
        self.p_next = p_next
        self.dst_set = dst_set
        self.dst_binding = dst_binding
        self.dst_array_element = dst_array_element
        self.descriptor_count = descriptor_count
        self.descriptor_type = descriptor_type
        self.p_image_info = p_image_info
        self.p_buffer_info = p_buffer_info
        self.p_texel_buffer_view = p_texel_buffer_view


struct CopyDescriptorSet(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_set: DescriptorSet
    var src_binding: UInt32
    var src_array_element: UInt32
    var dst_set: DescriptorSet
    var dst_binding: UInt32
    var dst_array_element: UInt32
    var descriptor_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_set: DescriptorSet = zero_init[DescriptorSet](),
        src_binding: UInt32 = zero_init[UInt32](),
        src_array_element: UInt32 = zero_init[UInt32](),
        dst_set: DescriptorSet = zero_init[DescriptorSet](),
        dst_binding: UInt32 = zero_init[UInt32](),
        dst_array_element: UInt32 = zero_init[UInt32](),
        descriptor_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.COPY_DESCRIPTOR_SET
        self.p_next = p_next
        self.src_set = src_set
        self.src_binding = src_binding
        self.src_array_element = src_array_element
        self.dst_set = dst_set
        self.dst_binding = dst_binding
        self.dst_array_element = dst_array_element
        self.descriptor_count = descriptor_count


struct BufferUsageFlags2CreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var usage: BufferUsageFlags2

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        usage: BufferUsageFlags2 = zero_init[BufferUsageFlags2](),
    ):
        self.s_type = StructureType.BUFFER_USAGE_FLAGS_2_CREATE_INFO
        self.p_next = p_next
        self.usage = usage


struct BufferCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: BufferCreateFlags
    var size: DeviceSize
    var usage: BufferUsageFlags
    var sharing_mode: SharingMode
    var queue_family_index_count: UInt32
    var p_queue_family_indices: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: BufferCreateFlags = zero_init[BufferCreateFlags](),
        size: DeviceSize = zero_init[DeviceSize](),
        usage: BufferUsageFlags = zero_init[BufferUsageFlags](),
        sharing_mode: SharingMode = zero_init[SharingMode](),
        queue_family_index_count: UInt32 = zero_init[UInt32](),
        p_queue_family_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.BUFFER_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.size = size
        self.usage = usage
        self.sharing_mode = sharing_mode
        self.queue_family_index_count = queue_family_index_count
        self.p_queue_family_indices = p_queue_family_indices


struct BufferViewCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: BufferViewCreateFlags
    var buffer: Buffer
    var format: Format
    var offset: DeviceSize
    var range: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: BufferViewCreateFlags = zero_init[BufferViewCreateFlags](),
        buffer: Buffer = zero_init[Buffer](),
        format: Format = zero_init[Format](),
        offset: DeviceSize = zero_init[DeviceSize](),
        range: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.BUFFER_VIEW_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.buffer = buffer
        self.format = format
        self.offset = offset
        self.range = range


struct ImageSubresource(ImplicitlyCopyable, Movable):
    var aspect_mask: ImageAspectFlags
    var mip_level: UInt32
    var array_layer: UInt32

    fn __init__(
        out self,
        aspect_mask: ImageAspectFlags = zero_init[ImageAspectFlags](),
        mip_level: UInt32 = zero_init[UInt32](),
        array_layer: UInt32 = zero_init[UInt32](),
    ):
        self.aspect_mask = aspect_mask
        self.mip_level = mip_level
        self.array_layer = array_layer


struct ImageSubresourceLayers(ImplicitlyCopyable, Movable):
    var aspect_mask: ImageAspectFlags
    var mip_level: UInt32
    var base_array_layer: UInt32
    var layer_count: UInt32

    fn __init__(
        out self,
        aspect_mask: ImageAspectFlags = zero_init[ImageAspectFlags](),
        mip_level: UInt32 = zero_init[UInt32](),
        base_array_layer: UInt32 = zero_init[UInt32](),
        layer_count: UInt32 = zero_init[UInt32](),
    ):
        self.aspect_mask = aspect_mask
        self.mip_level = mip_level
        self.base_array_layer = base_array_layer
        self.layer_count = layer_count


struct ImageSubresourceRange(ImplicitlyCopyable, Movable):
    var aspect_mask: ImageAspectFlags
    var base_mip_level: UInt32
    var level_count: UInt32
    var base_array_layer: UInt32
    var layer_count: UInt32

    fn __init__(
        out self,
        aspect_mask: ImageAspectFlags = zero_init[ImageAspectFlags](),
        base_mip_level: UInt32 = zero_init[UInt32](),
        level_count: UInt32 = zero_init[UInt32](),
        base_array_layer: UInt32 = zero_init[UInt32](),
        layer_count: UInt32 = zero_init[UInt32](),
    ):
        self.aspect_mask = aspect_mask
        self.base_mip_level = base_mip_level
        self.level_count = level_count
        self.base_array_layer = base_array_layer
        self.layer_count = layer_count


struct MemoryBarrier(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_access_mask: AccessFlags
    var dst_access_mask: AccessFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_access_mask: AccessFlags = zero_init[AccessFlags](),
        dst_access_mask: AccessFlags = zero_init[AccessFlags](),
    ):
        self.s_type = StructureType.MEMORY_BARRIER
        self.p_next = p_next
        self.src_access_mask = src_access_mask
        self.dst_access_mask = dst_access_mask


struct BufferMemoryBarrier(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_access_mask: AccessFlags
    var dst_access_mask: AccessFlags
    var src_queue_family_index: UInt32
    var dst_queue_family_index: UInt32
    var buffer: Buffer
    var offset: DeviceSize
    var size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_access_mask: AccessFlags = zero_init[AccessFlags](),
        dst_access_mask: AccessFlags = zero_init[AccessFlags](),
        src_queue_family_index: UInt32 = zero_init[UInt32](),
        dst_queue_family_index: UInt32 = zero_init[UInt32](),
        buffer: Buffer = zero_init[Buffer](),
        offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.BUFFER_MEMORY_BARRIER
        self.p_next = p_next
        self.src_access_mask = src_access_mask
        self.dst_access_mask = dst_access_mask
        self.src_queue_family_index = src_queue_family_index
        self.dst_queue_family_index = dst_queue_family_index
        self.buffer = buffer
        self.offset = offset
        self.size = size


struct ImageMemoryBarrier(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_access_mask: AccessFlags
    var dst_access_mask: AccessFlags
    var old_layout: ImageLayout
    var new_layout: ImageLayout
    var src_queue_family_index: UInt32
    var dst_queue_family_index: UInt32
    var image: Image
    var subresource_range: ImageSubresourceRange

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_access_mask: AccessFlags = zero_init[AccessFlags](),
        dst_access_mask: AccessFlags = zero_init[AccessFlags](),
        old_layout: ImageLayout = zero_init[ImageLayout](),
        new_layout: ImageLayout = zero_init[ImageLayout](),
        src_queue_family_index: UInt32 = zero_init[UInt32](),
        dst_queue_family_index: UInt32 = zero_init[UInt32](),
        image: Image = zero_init[Image](),
        subresource_range: ImageSubresourceRange = zero_init[ImageSubresourceRange](),
    ):
        self.s_type = StructureType.IMAGE_MEMORY_BARRIER
        self.p_next = p_next
        self.src_access_mask = src_access_mask
        self.dst_access_mask = dst_access_mask
        self.old_layout = old_layout
        self.new_layout = new_layout
        self.src_queue_family_index = src_queue_family_index
        self.dst_queue_family_index = dst_queue_family_index
        self.image = image
        self.subresource_range = subresource_range


struct ImageCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ImageCreateFlags
    var image_type: ImageType
    var format: Format
    var extent: Extent3D
    var mip_levels: UInt32
    var array_layers: UInt32
    var samples: SampleCountFlagBits
    var tiling: ImageTiling
    var usage: ImageUsageFlags
    var sharing_mode: SharingMode
    var queue_family_index_count: UInt32
    var p_queue_family_indices: Ptr[UInt32]
    var initial_layout: ImageLayout

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ImageCreateFlags = zero_init[ImageCreateFlags](),
        image_type: ImageType = zero_init[ImageType](),
        format: Format = zero_init[Format](),
        extent: Extent3D = zero_init[Extent3D](),
        mip_levels: UInt32 = zero_init[UInt32](),
        array_layers: UInt32 = zero_init[UInt32](),
        samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
        tiling: ImageTiling = zero_init[ImageTiling](),
        usage: ImageUsageFlags = zero_init[ImageUsageFlags](),
        sharing_mode: SharingMode = zero_init[SharingMode](),
        queue_family_index_count: UInt32 = zero_init[UInt32](),
        p_queue_family_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        initial_layout: ImageLayout = zero_init[ImageLayout](),
    ):
        self.s_type = StructureType.IMAGE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.image_type = image_type
        self.format = format
        self.extent = extent
        self.mip_levels = mip_levels
        self.array_layers = array_layers
        self.samples = samples
        self.tiling = tiling
        self.usage = usage
        self.sharing_mode = sharing_mode
        self.queue_family_index_count = queue_family_index_count
        self.p_queue_family_indices = p_queue_family_indices
        self.initial_layout = initial_layout


struct SubresourceLayout(ImplicitlyCopyable, Movable):
    var offset: DeviceSize
    var size: DeviceSize
    var row_pitch: DeviceSize
    var array_pitch: DeviceSize
    var depth_pitch: DeviceSize

    fn __init__(
        out self,
        offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
        row_pitch: DeviceSize = zero_init[DeviceSize](),
        array_pitch: DeviceSize = zero_init[DeviceSize](),
        depth_pitch: DeviceSize = zero_init[DeviceSize](),
    ):
        self.offset = offset
        self.size = size
        self.row_pitch = row_pitch
        self.array_pitch = array_pitch
        self.depth_pitch = depth_pitch


struct ImageViewCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ImageViewCreateFlags
    var image: Image
    var view_type: ImageViewType
    var format: Format
    var components: ComponentMapping
    var subresource_range: ImageSubresourceRange

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ImageViewCreateFlags = zero_init[ImageViewCreateFlags](),
        image: Image = zero_init[Image](),
        view_type: ImageViewType = zero_init[ImageViewType](),
        format: Format = zero_init[Format](),
        components: ComponentMapping = zero_init[ComponentMapping](),
        subresource_range: ImageSubresourceRange = zero_init[ImageSubresourceRange](),
    ):
        self.s_type = StructureType.IMAGE_VIEW_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.image = image
        self.view_type = view_type
        self.format = format
        self.components = components
        self.subresource_range = subresource_range


struct BufferCopy(ImplicitlyCopyable, Movable):
    var src_offset: DeviceSize
    var dst_offset: DeviceSize
    var size: DeviceSize

    fn __init__(
        out self,
        src_offset: DeviceSize = zero_init[DeviceSize](),
        dst_offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.src_offset = src_offset
        self.dst_offset = dst_offset
        self.size = size


struct SparseMemoryBind(ImplicitlyCopyable, Movable):
    var resource_offset: DeviceSize
    var size: DeviceSize
    var memory: DeviceMemory
    var memory_offset: DeviceSize
    var flags: SparseMemoryBindFlags

    fn __init__(
        out self,
        resource_offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        memory_offset: DeviceSize = zero_init[DeviceSize](),
        flags: SparseMemoryBindFlags = zero_init[SparseMemoryBindFlags](),
    ):
        self.resource_offset = resource_offset
        self.size = size
        self.memory = memory
        self.memory_offset = memory_offset
        self.flags = flags


struct SparseImageMemoryBind(ImplicitlyCopyable, Movable):
    var subresource: ImageSubresource
    var offset: Offset3D
    var extent: Extent3D
    var memory: DeviceMemory
    var memory_offset: DeviceSize
    var flags: SparseMemoryBindFlags

    fn __init__(
        out self,
        subresource: ImageSubresource = zero_init[ImageSubresource](),
        offset: Offset3D = zero_init[Offset3D](),
        extent: Extent3D = zero_init[Extent3D](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        memory_offset: DeviceSize = zero_init[DeviceSize](),
        flags: SparseMemoryBindFlags = zero_init[SparseMemoryBindFlags](),
    ):
        self.subresource = subresource
        self.offset = offset
        self.extent = extent
        self.memory = memory
        self.memory_offset = memory_offset
        self.flags = flags


struct SparseBufferMemoryBindInfo(ImplicitlyCopyable, Movable):
    var buffer: Buffer
    var bind_count: UInt32
    var p_binds: Ptr[SparseMemoryBind]

    fn __init__(
        out self,
        buffer: Buffer = zero_init[Buffer](),
        bind_count: UInt32 = zero_init[UInt32](),
        p_binds: Ptr[SparseMemoryBind] = zero_init[Ptr[SparseMemoryBind]](),
    ):
        self.buffer = buffer
        self.bind_count = bind_count
        self.p_binds = p_binds


struct SparseImageOpaqueMemoryBindInfo(ImplicitlyCopyable, Movable):
    var image: Image
    var bind_count: UInt32
    var p_binds: Ptr[SparseMemoryBind]

    fn __init__(
        out self,
        image: Image = zero_init[Image](),
        bind_count: UInt32 = zero_init[UInt32](),
        p_binds: Ptr[SparseMemoryBind] = zero_init[Ptr[SparseMemoryBind]](),
    ):
        self.image = image
        self.bind_count = bind_count
        self.p_binds = p_binds


struct SparseImageMemoryBindInfo(ImplicitlyCopyable, Movable):
    var image: Image
    var bind_count: UInt32
    var p_binds: Ptr[SparseImageMemoryBind]

    fn __init__(
        out self,
        image: Image = zero_init[Image](),
        bind_count: UInt32 = zero_init[UInt32](),
        p_binds: Ptr[SparseImageMemoryBind] = zero_init[Ptr[SparseImageMemoryBind]](),
    ):
        self.image = image
        self.bind_count = bind_count
        self.p_binds = p_binds


struct BindSparseInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var wait_semaphore_count: UInt32
    var p_wait_semaphores: Ptr[Semaphore]
    var buffer_bind_count: UInt32
    var p_buffer_binds: Ptr[SparseBufferMemoryBindInfo]
    var image_opaque_bind_count: UInt32
    var p_image_opaque_binds: Ptr[SparseImageOpaqueMemoryBindInfo]
    var image_bind_count: UInt32
    var p_image_binds: Ptr[SparseImageMemoryBindInfo]
    var signal_semaphore_count: UInt32
    var p_signal_semaphores: Ptr[Semaphore]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        wait_semaphore_count: UInt32 = zero_init[UInt32](),
        p_wait_semaphores: Ptr[Semaphore] = zero_init[Ptr[Semaphore]](),
        buffer_bind_count: UInt32 = zero_init[UInt32](),
        p_buffer_binds: Ptr[SparseBufferMemoryBindInfo] = zero_init[Ptr[SparseBufferMemoryBindInfo]](),
        image_opaque_bind_count: UInt32 = zero_init[UInt32](),
        p_image_opaque_binds: Ptr[SparseImageOpaqueMemoryBindInfo] = zero_init[Ptr[SparseImageOpaqueMemoryBindInfo]](),
        image_bind_count: UInt32 = zero_init[UInt32](),
        p_image_binds: Ptr[SparseImageMemoryBindInfo] = zero_init[Ptr[SparseImageMemoryBindInfo]](),
        signal_semaphore_count: UInt32 = zero_init[UInt32](),
        p_signal_semaphores: Ptr[Semaphore] = zero_init[Ptr[Semaphore]](),
    ):
        self.s_type = StructureType.BIND_SPARSE_INFO
        self.p_next = p_next
        self.wait_semaphore_count = wait_semaphore_count
        self.p_wait_semaphores = p_wait_semaphores
        self.buffer_bind_count = buffer_bind_count
        self.p_buffer_binds = p_buffer_binds
        self.image_opaque_bind_count = image_opaque_bind_count
        self.p_image_opaque_binds = p_image_opaque_binds
        self.image_bind_count = image_bind_count
        self.p_image_binds = p_image_binds
        self.signal_semaphore_count = signal_semaphore_count
        self.p_signal_semaphores = p_signal_semaphores


struct ImageCopy(ImplicitlyCopyable, Movable):
    var src_subresource: ImageSubresourceLayers
    var src_offset: Offset3D
    var dst_subresource: ImageSubresourceLayers
    var dst_offset: Offset3D
    var extent: Extent3D

    fn __init__(
        out self,
        src_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        src_offset: Offset3D = zero_init[Offset3D](),
        dst_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        dst_offset: Offset3D = zero_init[Offset3D](),
        extent: Extent3D = zero_init[Extent3D](),
    ):
        self.src_subresource = src_subresource
        self.src_offset = src_offset
        self.dst_subresource = dst_subresource
        self.dst_offset = dst_offset
        self.extent = extent


struct ImageBlit(ImplicitlyCopyable, Movable):
    var src_subresource: ImageSubresourceLayers
    var src_offsets: InlineArray[Offset3D, Int(2)]
    var dst_subresource: ImageSubresourceLayers
    var dst_offsets: InlineArray[Offset3D, Int(2)]

    fn __init__(
        out self,
        src_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        src_offsets: InlineArray[Offset3D, Int(2)] = zero_init[InlineArray[Offset3D, Int(2)]](),
        dst_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        dst_offsets: InlineArray[Offset3D, Int(2)] = zero_init[InlineArray[Offset3D, Int(2)]](),
    ):
        self.src_subresource = src_subresource
        self.src_offsets = src_offsets
        self.dst_subresource = dst_subresource
        self.dst_offsets = dst_offsets


struct BufferImageCopy(ImplicitlyCopyable, Movable):
    var buffer_offset: DeviceSize
    var buffer_row_length: UInt32
    var buffer_image_height: UInt32
    var image_subresource: ImageSubresourceLayers
    var image_offset: Offset3D
    var image_extent: Extent3D

    fn __init__(
        out self,
        buffer_offset: DeviceSize = zero_init[DeviceSize](),
        buffer_row_length: UInt32 = zero_init[UInt32](),
        buffer_image_height: UInt32 = zero_init[UInt32](),
        image_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        image_offset: Offset3D = zero_init[Offset3D](),
        image_extent: Extent3D = zero_init[Extent3D](),
    ):
        self.buffer_offset = buffer_offset
        self.buffer_row_length = buffer_row_length
        self.buffer_image_height = buffer_image_height
        self.image_subresource = image_subresource
        self.image_offset = image_offset
        self.image_extent = image_extent


struct CopyMemoryIndirectCommandNV(ImplicitlyCopyable, Movable):
    var src_address: DeviceAddress
    var dst_address: DeviceAddress
    var size: DeviceSize

    fn __init__(
        out self,
        src_address: DeviceAddress = zero_init[DeviceAddress](),
        dst_address: DeviceAddress = zero_init[DeviceAddress](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.src_address = src_address
        self.dst_address = dst_address
        self.size = size


struct CopyMemoryToImageIndirectCommandNV(ImplicitlyCopyable, Movable):
    var src_address: DeviceAddress
    var buffer_row_length: UInt32
    var buffer_image_height: UInt32
    var image_subresource: ImageSubresourceLayers
    var image_offset: Offset3D
    var image_extent: Extent3D

    fn __init__(
        out self,
        src_address: DeviceAddress = zero_init[DeviceAddress](),
        buffer_row_length: UInt32 = zero_init[UInt32](),
        buffer_image_height: UInt32 = zero_init[UInt32](),
        image_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        image_offset: Offset3D = zero_init[Offset3D](),
        image_extent: Extent3D = zero_init[Extent3D](),
    ):
        self.src_address = src_address
        self.buffer_row_length = buffer_row_length
        self.buffer_image_height = buffer_image_height
        self.image_subresource = image_subresource
        self.image_offset = image_offset
        self.image_extent = image_extent


struct ImageResolve(ImplicitlyCopyable, Movable):
    var src_subresource: ImageSubresourceLayers
    var src_offset: Offset3D
    var dst_subresource: ImageSubresourceLayers
    var dst_offset: Offset3D
    var extent: Extent3D

    fn __init__(
        out self,
        src_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        src_offset: Offset3D = zero_init[Offset3D](),
        dst_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        dst_offset: Offset3D = zero_init[Offset3D](),
        extent: Extent3D = zero_init[Extent3D](),
    ):
        self.src_subresource = src_subresource
        self.src_offset = src_offset
        self.dst_subresource = dst_subresource
        self.dst_offset = dst_offset
        self.extent = extent


struct ShaderModuleCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ShaderModuleCreateFlags
    var code_size: UInt
    var p_code: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ShaderModuleCreateFlags = zero_init[ShaderModuleCreateFlags](),
        code_size: UInt = zero_init[UInt](),
        p_code: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.SHADER_MODULE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.code_size = code_size
        self.p_code = p_code


struct DescriptorSetLayoutBinding(ImplicitlyCopyable, Movable):
    var binding: UInt32
    var descriptor_type: DescriptorType
    var descriptor_count: UInt32
    var stage_flags: ShaderStageFlags
    var p_immutable_samplers: Ptr[Sampler]

    fn __init__(
        out self,
        binding: UInt32 = zero_init[UInt32](),
        descriptor_type: DescriptorType = zero_init[DescriptorType](),
        descriptor_count: UInt32 = zero_init[UInt32](),
        stage_flags: ShaderStageFlags = zero_init[ShaderStageFlags](),
        p_immutable_samplers: Ptr[Sampler] = zero_init[Ptr[Sampler]](),
    ):
        self.binding = binding
        self.descriptor_type = descriptor_type
        self.descriptor_count = descriptor_count
        self.stage_flags = stage_flags
        self.p_immutable_samplers = p_immutable_samplers


struct DescriptorSetLayoutCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DescriptorSetLayoutCreateFlags
    var binding_count: UInt32
    var p_bindings: Ptr[DescriptorSetLayoutBinding]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DescriptorSetLayoutCreateFlags = zero_init[DescriptorSetLayoutCreateFlags](),
        binding_count: UInt32 = zero_init[UInt32](),
        p_bindings: Ptr[DescriptorSetLayoutBinding] = zero_init[Ptr[DescriptorSetLayoutBinding]](),
    ):
        self.s_type = StructureType.DESCRIPTOR_SET_LAYOUT_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.binding_count = binding_count
        self.p_bindings = p_bindings


struct DescriptorPoolSize(ImplicitlyCopyable, Movable):
    var type: DescriptorType
    var descriptor_count: UInt32

    fn __init__(
        out self,
        type: DescriptorType = zero_init[DescriptorType](),
        descriptor_count: UInt32 = zero_init[UInt32](),
    ):
        self.type = type
        self.descriptor_count = descriptor_count


struct DescriptorPoolCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DescriptorPoolCreateFlags
    var max_sets: UInt32
    var pool_size_count: UInt32
    var p_pool_sizes: Ptr[DescriptorPoolSize]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DescriptorPoolCreateFlags = zero_init[DescriptorPoolCreateFlags](),
        max_sets: UInt32 = zero_init[UInt32](),
        pool_size_count: UInt32 = zero_init[UInt32](),
        p_pool_sizes: Ptr[DescriptorPoolSize] = zero_init[Ptr[DescriptorPoolSize]](),
    ):
        self.s_type = StructureType.DESCRIPTOR_POOL_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.max_sets = max_sets
        self.pool_size_count = pool_size_count
        self.p_pool_sizes = p_pool_sizes


struct DescriptorSetAllocateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_pool: DescriptorPool
    var descriptor_set_count: UInt32
    var p_set_layouts: Ptr[DescriptorSetLayout]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_pool: DescriptorPool = zero_init[DescriptorPool](),
        descriptor_set_count: UInt32 = zero_init[UInt32](),
        p_set_layouts: Ptr[DescriptorSetLayout] = zero_init[Ptr[DescriptorSetLayout]](),
    ):
        self.s_type = StructureType.DESCRIPTOR_SET_ALLOCATE_INFO
        self.p_next = p_next
        self.descriptor_pool = descriptor_pool
        self.descriptor_set_count = descriptor_set_count
        self.p_set_layouts = p_set_layouts


struct SpecializationMapEntry(ImplicitlyCopyable, Movable):
    var constant_id: UInt32
    var offset: UInt32
    var size: UInt

    fn __init__(
        out self,
        constant_id: UInt32 = zero_init[UInt32](),
        offset: UInt32 = zero_init[UInt32](),
        size: UInt = zero_init[UInt](),
    ):
        self.constant_id = constant_id
        self.offset = offset
        self.size = size


struct SpecializationInfo(ImplicitlyCopyable, Movable):
    var map_entry_count: UInt32
    var p_map_entries: Ptr[SpecializationMapEntry]
    var data_size: UInt
    var p_data: Ptr[NoneType]

    fn __init__(
        out self,
        map_entry_count: UInt32 = zero_init[UInt32](),
        p_map_entries: Ptr[SpecializationMapEntry] = zero_init[Ptr[SpecializationMapEntry]](),
        data_size: UInt = zero_init[UInt](),
        p_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.map_entry_count = map_entry_count
        self.p_map_entries = p_map_entries
        self.data_size = data_size
        self.p_data = p_data


struct PipelineShaderStageCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineShaderStageCreateFlags
    var stage: ShaderStageFlagBits
    var module: ShaderModule
    var p_name: Ptr[UInt8]
    var p_specialization_info: Ptr[SpecializationInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineShaderStageCreateFlags = zero_init[PipelineShaderStageCreateFlags](),
        stage: ShaderStageFlagBits = zero_init[ShaderStageFlagBits](),
        module: ShaderModule = zero_init[ShaderModule](),
        p_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        p_specialization_info: Ptr[SpecializationInfo] = zero_init[Ptr[SpecializationInfo]](),
    ):
        self.s_type = StructureType.PIPELINE_SHADER_STAGE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.stage = stage
        self.module = module
        self.p_name = p_name
        self.p_specialization_info = p_specialization_info


struct ComputePipelineCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCreateFlags
    var stage: PipelineShaderStageCreateInfo
    var layout: PipelineLayout
    var base_pipeline_handle: Pipeline
    var base_pipeline_index: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCreateFlags = zero_init[PipelineCreateFlags](),
        stage: PipelineShaderStageCreateInfo = zero_init[PipelineShaderStageCreateInfo](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        base_pipeline_handle: Pipeline = zero_init[Pipeline](),
        base_pipeline_index: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.COMPUTE_PIPELINE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.stage = stage
        self.layout = layout
        self.base_pipeline_handle = base_pipeline_handle
        self.base_pipeline_index = base_pipeline_index


struct ComputePipelineIndirectBufferInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_address: DeviceAddress
    var size: DeviceSize
    var pipeline_device_address_capture_replay: DeviceAddress

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_address: DeviceAddress = zero_init[DeviceAddress](),
        size: DeviceSize = zero_init[DeviceSize](),
        pipeline_device_address_capture_replay: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.s_type = StructureType.COMPUTE_PIPELINE_INDIRECT_BUFFER_INFO_NV
        self.p_next = p_next
        self.device_address = device_address
        self.size = size
        self.pipeline_device_address_capture_replay = pipeline_device_address_capture_replay


struct PipelineCreateFlags2CreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCreateFlags2

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCreateFlags2 = zero_init[PipelineCreateFlags2](),
    ):
        self.s_type = StructureType.PIPELINE_CREATE_FLAGS_2_CREATE_INFO
        self.p_next = p_next
        self.flags = flags


struct VertexInputBindingDescription(ImplicitlyCopyable, Movable):
    var binding: UInt32
    var stride: UInt32
    var input_rate: VertexInputRate

    fn __init__(
        out self,
        binding: UInt32 = zero_init[UInt32](),
        stride: UInt32 = zero_init[UInt32](),
        input_rate: VertexInputRate = zero_init[VertexInputRate](),
    ):
        self.binding = binding
        self.stride = stride
        self.input_rate = input_rate


struct VertexInputAttributeDescription(ImplicitlyCopyable, Movable):
    var location: UInt32
    var binding: UInt32
    var format: Format
    var offset: UInt32

    fn __init__(
        out self,
        location: UInt32 = zero_init[UInt32](),
        binding: UInt32 = zero_init[UInt32](),
        format: Format = zero_init[Format](),
        offset: UInt32 = zero_init[UInt32](),
    ):
        self.location = location
        self.binding = binding
        self.format = format
        self.offset = offset


struct PipelineVertexInputStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineVertexInputStateCreateFlags
    var vertex_binding_description_count: UInt32
    var p_vertex_binding_descriptions: Ptr[VertexInputBindingDescription]
    var vertex_attribute_description_count: UInt32
    var p_vertex_attribute_descriptions: Ptr[VertexInputAttributeDescription]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineVertexInputStateCreateFlags = zero_init[PipelineVertexInputStateCreateFlags](),
        vertex_binding_description_count: UInt32 = zero_init[UInt32](),
        p_vertex_binding_descriptions: Ptr[VertexInputBindingDescription] = zero_init[Ptr[VertexInputBindingDescription]](),
        vertex_attribute_description_count: UInt32 = zero_init[UInt32](),
        p_vertex_attribute_descriptions: Ptr[VertexInputAttributeDescription] = zero_init[Ptr[VertexInputAttributeDescription]](),
    ):
        self.s_type = StructureType.PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.vertex_binding_description_count = vertex_binding_description_count
        self.p_vertex_binding_descriptions = p_vertex_binding_descriptions
        self.vertex_attribute_description_count = vertex_attribute_description_count
        self.p_vertex_attribute_descriptions = p_vertex_attribute_descriptions


struct PipelineInputAssemblyStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineInputAssemblyStateCreateFlags
    var topology: PrimitiveTopology
    var primitive_restart_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineInputAssemblyStateCreateFlags = zero_init[PipelineInputAssemblyStateCreateFlags](),
        topology: PrimitiveTopology = zero_init[PrimitiveTopology](),
        primitive_restart_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.topology = topology
        self.primitive_restart_enable = primitive_restart_enable


struct PipelineTessellationStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineTessellationStateCreateFlags
    var patch_control_points: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineTessellationStateCreateFlags = zero_init[PipelineTessellationStateCreateFlags](),
        patch_control_points: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PIPELINE_TESSELLATION_STATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.patch_control_points = patch_control_points


struct PipelineViewportStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineViewportStateCreateFlags
    var viewport_count: UInt32
    var p_viewports: Ptr[Viewport]
    var scissor_count: UInt32
    var p_scissors: Ptr[Rect2D]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineViewportStateCreateFlags = zero_init[PipelineViewportStateCreateFlags](),
        viewport_count: UInt32 = zero_init[UInt32](),
        p_viewports: Ptr[Viewport] = zero_init[Ptr[Viewport]](),
        scissor_count: UInt32 = zero_init[UInt32](),
        p_scissors: Ptr[Rect2D] = zero_init[Ptr[Rect2D]](),
    ):
        self.s_type = StructureType.PIPELINE_VIEWPORT_STATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.viewport_count = viewport_count
        self.p_viewports = p_viewports
        self.scissor_count = scissor_count
        self.p_scissors = p_scissors


struct PipelineRasterizationStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineRasterizationStateCreateFlags
    var depth_clamp_enable: Bool32
    var rasterizer_discard_enable: Bool32
    var polygon_mode: PolygonMode
    var cull_mode: CullModeFlags
    var front_face: FrontFace
    var depth_bias_enable: Bool32
    var depth_bias_constant_factor: Float32
    var depth_bias_clamp: Float32
    var depth_bias_slope_factor: Float32
    var line_width: Float32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineRasterizationStateCreateFlags = zero_init[PipelineRasterizationStateCreateFlags](),
        depth_clamp_enable: Bool32 = zero_init[Bool32](),
        rasterizer_discard_enable: Bool32 = zero_init[Bool32](),
        polygon_mode: PolygonMode = zero_init[PolygonMode](),
        cull_mode: CullModeFlags = zero_init[CullModeFlags](),
        front_face: FrontFace = zero_init[FrontFace](),
        depth_bias_enable: Bool32 = zero_init[Bool32](),
        depth_bias_constant_factor: Float32 = zero_init[Float32](),
        depth_bias_clamp: Float32 = zero_init[Float32](),
        depth_bias_slope_factor: Float32 = zero_init[Float32](),
        line_width: Float32 = zero_init[Float32](),
    ):
        self.s_type = StructureType.PIPELINE_RASTERIZATION_STATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.depth_clamp_enable = depth_clamp_enable
        self.rasterizer_discard_enable = rasterizer_discard_enable
        self.polygon_mode = polygon_mode
        self.cull_mode = cull_mode
        self.front_face = front_face
        self.depth_bias_enable = depth_bias_enable
        self.depth_bias_constant_factor = depth_bias_constant_factor
        self.depth_bias_clamp = depth_bias_clamp
        self.depth_bias_slope_factor = depth_bias_slope_factor
        self.line_width = line_width


struct PipelineMultisampleStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineMultisampleStateCreateFlags
    var rasterization_samples: SampleCountFlagBits
    var sample_shading_enable: Bool32
    var min_sample_shading: Float32
    var p_sample_mask: Ptr[SampleMask]
    var alpha_to_coverage_enable: Bool32
    var alpha_to_one_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineMultisampleStateCreateFlags = zero_init[PipelineMultisampleStateCreateFlags](),
        rasterization_samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
        sample_shading_enable: Bool32 = zero_init[Bool32](),
        min_sample_shading: Float32 = zero_init[Float32](),
        p_sample_mask: Ptr[SampleMask] = zero_init[Ptr[SampleMask]](),
        alpha_to_coverage_enable: Bool32 = zero_init[Bool32](),
        alpha_to_one_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PIPELINE_MULTISAMPLE_STATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.rasterization_samples = rasterization_samples
        self.sample_shading_enable = sample_shading_enable
        self.min_sample_shading = min_sample_shading
        self.p_sample_mask = p_sample_mask
        self.alpha_to_coverage_enable = alpha_to_coverage_enable
        self.alpha_to_one_enable = alpha_to_one_enable


struct PipelineColorBlendAttachmentState(ImplicitlyCopyable, Movable):
    var blend_enable: Bool32
    var src_color_blend_factor: BlendFactor
    var dst_color_blend_factor: BlendFactor
    var color_blend_op: BlendOp
    var src_alpha_blend_factor: BlendFactor
    var dst_alpha_blend_factor: BlendFactor
    var alpha_blend_op: BlendOp
    var color_write_mask: ColorComponentFlags

    fn __init__(
        out self,
        blend_enable: Bool32 = zero_init[Bool32](),
        src_color_blend_factor: BlendFactor = zero_init[BlendFactor](),
        dst_color_blend_factor: BlendFactor = zero_init[BlendFactor](),
        color_blend_op: BlendOp = zero_init[BlendOp](),
        src_alpha_blend_factor: BlendFactor = zero_init[BlendFactor](),
        dst_alpha_blend_factor: BlendFactor = zero_init[BlendFactor](),
        alpha_blend_op: BlendOp = zero_init[BlendOp](),
        color_write_mask: ColorComponentFlags = zero_init[ColorComponentFlags](),
    ):
        self.blend_enable = blend_enable
        self.src_color_blend_factor = src_color_blend_factor
        self.dst_color_blend_factor = dst_color_blend_factor
        self.color_blend_op = color_blend_op
        self.src_alpha_blend_factor = src_alpha_blend_factor
        self.dst_alpha_blend_factor = dst_alpha_blend_factor
        self.alpha_blend_op = alpha_blend_op
        self.color_write_mask = color_write_mask


struct PipelineColorBlendStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineColorBlendStateCreateFlags
    var logic_op_enable: Bool32
    var logic_op: LogicOp
    var attachment_count: UInt32
    var p_attachments: Ptr[PipelineColorBlendAttachmentState]
    var blend_constants: InlineArray[Float32, Int(4)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineColorBlendStateCreateFlags = zero_init[PipelineColorBlendStateCreateFlags](),
        logic_op_enable: Bool32 = zero_init[Bool32](),
        logic_op: LogicOp = zero_init[LogicOp](),
        attachment_count: UInt32 = zero_init[UInt32](),
        p_attachments: Ptr[PipelineColorBlendAttachmentState] = zero_init[Ptr[PipelineColorBlendAttachmentState]](),
        blend_constants: InlineArray[Float32, Int(4)] = zero_init[InlineArray[Float32, Int(4)]](),
    ):
        self.s_type = StructureType.PIPELINE_COLOR_BLEND_STATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.logic_op_enable = logic_op_enable
        self.logic_op = logic_op
        self.attachment_count = attachment_count
        self.p_attachments = p_attachments
        self.blend_constants = blend_constants


struct PipelineDynamicStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineDynamicStateCreateFlags
    var dynamic_state_count: UInt32
    var p_dynamic_states: Ptr[DynamicState]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineDynamicStateCreateFlags = zero_init[PipelineDynamicStateCreateFlags](),
        dynamic_state_count: UInt32 = zero_init[UInt32](),
        p_dynamic_states: Ptr[DynamicState] = zero_init[Ptr[DynamicState]](),
    ):
        self.s_type = StructureType.PIPELINE_DYNAMIC_STATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.dynamic_state_count = dynamic_state_count
        self.p_dynamic_states = p_dynamic_states


struct StencilOpState(ImplicitlyCopyable, Movable):
    var fail_op: StencilOp
    var pass_op: StencilOp
    var depth_fail_op: StencilOp
    var compare_op: CompareOp
    var compare_mask: UInt32
    var write_mask: UInt32
    var reference: UInt32

    fn __init__(
        out self,
        fail_op: StencilOp = zero_init[StencilOp](),
        pass_op: StencilOp = zero_init[StencilOp](),
        depth_fail_op: StencilOp = zero_init[StencilOp](),
        compare_op: CompareOp = zero_init[CompareOp](),
        compare_mask: UInt32 = zero_init[UInt32](),
        write_mask: UInt32 = zero_init[UInt32](),
        reference: UInt32 = zero_init[UInt32](),
    ):
        self.fail_op = fail_op
        self.pass_op = pass_op
        self.depth_fail_op = depth_fail_op
        self.compare_op = compare_op
        self.compare_mask = compare_mask
        self.write_mask = write_mask
        self.reference = reference


struct PipelineDepthStencilStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineDepthStencilStateCreateFlags
    var depth_test_enable: Bool32
    var depth_write_enable: Bool32
    var depth_compare_op: CompareOp
    var depth_bounds_test_enable: Bool32
    var stencil_test_enable: Bool32
    var front: StencilOpState
    var back: StencilOpState
    var min_depth_bounds: Float32
    var max_depth_bounds: Float32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineDepthStencilStateCreateFlags = zero_init[PipelineDepthStencilStateCreateFlags](),
        depth_test_enable: Bool32 = zero_init[Bool32](),
        depth_write_enable: Bool32 = zero_init[Bool32](),
        depth_compare_op: CompareOp = zero_init[CompareOp](),
        depth_bounds_test_enable: Bool32 = zero_init[Bool32](),
        stencil_test_enable: Bool32 = zero_init[Bool32](),
        front: StencilOpState = zero_init[StencilOpState](),
        back: StencilOpState = zero_init[StencilOpState](),
        min_depth_bounds: Float32 = zero_init[Float32](),
        max_depth_bounds: Float32 = zero_init[Float32](),
    ):
        self.s_type = StructureType.PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.depth_test_enable = depth_test_enable
        self.depth_write_enable = depth_write_enable
        self.depth_compare_op = depth_compare_op
        self.depth_bounds_test_enable = depth_bounds_test_enable
        self.stencil_test_enable = stencil_test_enable
        self.front = front
        self.back = back
        self.min_depth_bounds = min_depth_bounds
        self.max_depth_bounds = max_depth_bounds


struct GraphicsPipelineCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCreateFlags
    var stage_count: UInt32
    var p_stages: Ptr[PipelineShaderStageCreateInfo]
    var p_vertex_input_state: Ptr[PipelineVertexInputStateCreateInfo]
    var p_input_assembly_state: Ptr[PipelineInputAssemblyStateCreateInfo]
    var p_tessellation_state: Ptr[PipelineTessellationStateCreateInfo]
    var p_viewport_state: Ptr[PipelineViewportStateCreateInfo]
    var p_rasterization_state: Ptr[PipelineRasterizationStateCreateInfo]
    var p_multisample_state: Ptr[PipelineMultisampleStateCreateInfo]
    var p_depth_stencil_state: Ptr[PipelineDepthStencilStateCreateInfo]
    var p_color_blend_state: Ptr[PipelineColorBlendStateCreateInfo]
    var p_dynamic_state: Ptr[PipelineDynamicStateCreateInfo]
    var layout: PipelineLayout
    var render_pass: RenderPass
    var subpass: UInt32
    var base_pipeline_handle: Pipeline
    var base_pipeline_index: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCreateFlags = zero_init[PipelineCreateFlags](),
        stage_count: UInt32 = zero_init[UInt32](),
        p_stages: Ptr[PipelineShaderStageCreateInfo] = zero_init[Ptr[PipelineShaderStageCreateInfo]](),
        p_vertex_input_state: Ptr[PipelineVertexInputStateCreateInfo] = zero_init[Ptr[PipelineVertexInputStateCreateInfo]](),
        p_input_assembly_state: Ptr[PipelineInputAssemblyStateCreateInfo] = zero_init[Ptr[PipelineInputAssemblyStateCreateInfo]](),
        p_tessellation_state: Ptr[PipelineTessellationStateCreateInfo] = zero_init[Ptr[PipelineTessellationStateCreateInfo]](),
        p_viewport_state: Ptr[PipelineViewportStateCreateInfo] = zero_init[Ptr[PipelineViewportStateCreateInfo]](),
        p_rasterization_state: Ptr[PipelineRasterizationStateCreateInfo] = zero_init[Ptr[PipelineRasterizationStateCreateInfo]](),
        p_multisample_state: Ptr[PipelineMultisampleStateCreateInfo] = zero_init[Ptr[PipelineMultisampleStateCreateInfo]](),
        p_depth_stencil_state: Ptr[PipelineDepthStencilStateCreateInfo] = zero_init[Ptr[PipelineDepthStencilStateCreateInfo]](),
        p_color_blend_state: Ptr[PipelineColorBlendStateCreateInfo] = zero_init[Ptr[PipelineColorBlendStateCreateInfo]](),
        p_dynamic_state: Ptr[PipelineDynamicStateCreateInfo] = zero_init[Ptr[PipelineDynamicStateCreateInfo]](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        render_pass: RenderPass = zero_init[RenderPass](),
        subpass: UInt32 = zero_init[UInt32](),
        base_pipeline_handle: Pipeline = zero_init[Pipeline](),
        base_pipeline_index: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.GRAPHICS_PIPELINE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.stage_count = stage_count
        self.p_stages = p_stages
        self.p_vertex_input_state = p_vertex_input_state
        self.p_input_assembly_state = p_input_assembly_state
        self.p_tessellation_state = p_tessellation_state
        self.p_viewport_state = p_viewport_state
        self.p_rasterization_state = p_rasterization_state
        self.p_multisample_state = p_multisample_state
        self.p_depth_stencil_state = p_depth_stencil_state
        self.p_color_blend_state = p_color_blend_state
        self.p_dynamic_state = p_dynamic_state
        self.layout = layout
        self.render_pass = render_pass
        self.subpass = subpass
        self.base_pipeline_handle = base_pipeline_handle
        self.base_pipeline_index = base_pipeline_index


struct PipelineCacheCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCacheCreateFlags
    var initial_data_size: UInt
    var p_initial_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCacheCreateFlags = zero_init[PipelineCacheCreateFlags](),
        initial_data_size: UInt = zero_init[UInt](),
        p_initial_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.PIPELINE_CACHE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.initial_data_size = initial_data_size
        self.p_initial_data = p_initial_data


struct PipelineCacheHeaderVersionOne(ImplicitlyCopyable, Movable):
    var header_size: UInt32
    var header_version: PipelineCacheHeaderVersion
    var vendor_id: UInt32
    var device_id: UInt32
    var pipeline_cache_uuid: InlineArray[UInt8, Int(UUID_SIZE)]

    fn __init__(
        out self,
        header_size: UInt32 = zero_init[UInt32](),
        header_version: PipelineCacheHeaderVersion = zero_init[PipelineCacheHeaderVersion](),
        vendor_id: UInt32 = zero_init[UInt32](),
        device_id: UInt32 = zero_init[UInt32](),
        pipeline_cache_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
    ):
        self.header_size = header_size
        self.header_version = header_version
        self.vendor_id = vendor_id
        self.device_id = device_id
        self.pipeline_cache_uuid = pipeline_cache_uuid


struct PipelineCacheStageValidationIndexEntry(ImplicitlyCopyable, Movable):
    var code_size: UInt64
    var code_offset: UInt64

    fn __init__(
        out self,
        code_size: UInt64 = zero_init[UInt64](),
        code_offset: UInt64 = zero_init[UInt64](),
    ):
        self.code_size = code_size
        self.code_offset = code_offset


struct PipelineCacheSafetyCriticalIndexEntry(ImplicitlyCopyable, Movable):
    var pipeline_identifier: InlineArray[UInt8, Int(UUID_SIZE)]
    var pipeline_memory_size: UInt64
    var json_size: UInt64
    var json_offset: UInt64
    var stage_index_count: UInt32
    var stage_index_stride: UInt32
    var stage_index_offset: UInt64

    fn __init__(
        out self,
        pipeline_identifier: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        pipeline_memory_size: UInt64 = zero_init[UInt64](),
        json_size: UInt64 = zero_init[UInt64](),
        json_offset: UInt64 = zero_init[UInt64](),
        stage_index_count: UInt32 = zero_init[UInt32](),
        stage_index_stride: UInt32 = zero_init[UInt32](),
        stage_index_offset: UInt64 = zero_init[UInt64](),
    ):
        self.pipeline_identifier = pipeline_identifier
        self.pipeline_memory_size = pipeline_memory_size
        self.json_size = json_size
        self.json_offset = json_offset
        self.stage_index_count = stage_index_count
        self.stage_index_stride = stage_index_stride
        self.stage_index_offset = stage_index_offset


struct PipelineCacheHeaderVersionSafetyCriticalOne(ImplicitlyCopyable, Movable):
    var header_version_one: PipelineCacheHeaderVersionOne
    var validation_version: PipelineCacheValidationVersion
    var implementation_data: UInt32
    var pipeline_index_count: UInt32
    var pipeline_index_stride: UInt32
    var pipeline_index_offset: UInt64

    fn __init__(
        out self,
        header_version_one: PipelineCacheHeaderVersionOne = zero_init[PipelineCacheHeaderVersionOne](),
        validation_version: PipelineCacheValidationVersion = zero_init[PipelineCacheValidationVersion](),
        implementation_data: UInt32 = zero_init[UInt32](),
        pipeline_index_count: UInt32 = zero_init[UInt32](),
        pipeline_index_stride: UInt32 = zero_init[UInt32](),
        pipeline_index_offset: UInt64 = zero_init[UInt64](),
    ):
        self.header_version_one = header_version_one
        self.validation_version = validation_version
        self.implementation_data = implementation_data
        self.pipeline_index_count = pipeline_index_count
        self.pipeline_index_stride = pipeline_index_stride
        self.pipeline_index_offset = pipeline_index_offset


struct PushConstantRange(ImplicitlyCopyable, Movable):
    var stage_flags: ShaderStageFlags
    var offset: UInt32
    var size: UInt32

    fn __init__(
        out self,
        stage_flags: ShaderStageFlags = zero_init[ShaderStageFlags](),
        offset: UInt32 = zero_init[UInt32](),
        size: UInt32 = zero_init[UInt32](),
    ):
        self.stage_flags = stage_flags
        self.offset = offset
        self.size = size


struct PipelineBinaryCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_keys_and_data_info: Ptr[PipelineBinaryKeysAndDataKHR]
    var pipeline: Pipeline
    var p_pipeline_create_info: Ptr[PipelineCreateInfoKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_keys_and_data_info: Ptr[PipelineBinaryKeysAndDataKHR] = zero_init[Ptr[PipelineBinaryKeysAndDataKHR]](),
        pipeline: Pipeline = zero_init[Pipeline](),
        p_pipeline_create_info: Ptr[PipelineCreateInfoKHR] = zero_init[Ptr[PipelineCreateInfoKHR]](),
    ):
        self.s_type = StructureType.PIPELINE_BINARY_CREATE_INFO_KHR
        self.p_next = p_next
        self.p_keys_and_data_info = p_keys_and_data_info
        self.pipeline = pipeline
        self.p_pipeline_create_info = p_pipeline_create_info


struct PipelineBinaryHandlesInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_binary_count: UInt32
    var p_pipeline_binaries: Ptr[PipelineBinaryKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_binary_count: UInt32 = zero_init[UInt32](),
        p_pipeline_binaries: Ptr[PipelineBinaryKHR] = zero_init[Ptr[PipelineBinaryKHR]](),
    ):
        self.s_type = StructureType.PIPELINE_BINARY_HANDLES_INFO_KHR
        self.p_next = p_next
        self.pipeline_binary_count = pipeline_binary_count
        self.p_pipeline_binaries = p_pipeline_binaries


struct PipelineBinaryDataKHR(ImplicitlyCopyable, Movable):
    var data_size: UInt
    var p_data: Ptr[NoneType]

    fn __init__(
        out self,
        data_size: UInt = zero_init[UInt](),
        p_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.data_size = data_size
        self.p_data = p_data


struct PipelineBinaryKeysAndDataKHR(ImplicitlyCopyable, Movable):
    var binary_count: UInt32
    var p_pipeline_binary_keys: Ptr[PipelineBinaryKeyKHR]
    var p_pipeline_binary_data: Ptr[PipelineBinaryDataKHR]

    fn __init__(
        out self,
        binary_count: UInt32 = zero_init[UInt32](),
        p_pipeline_binary_keys: Ptr[PipelineBinaryKeyKHR] = zero_init[Ptr[PipelineBinaryKeyKHR]](),
        p_pipeline_binary_data: Ptr[PipelineBinaryDataKHR] = zero_init[Ptr[PipelineBinaryDataKHR]](),
    ):
        self.binary_count = binary_count
        self.p_pipeline_binary_keys = p_pipeline_binary_keys
        self.p_pipeline_binary_data = p_pipeline_binary_data


struct PipelineBinaryKeyKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var key_size: UInt32
    var key: InlineArray[UInt8, Int(MAX_PIPELINE_BINARY_KEY_SIZE_KHR)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        key_size: UInt32 = zero_init[UInt32](),
        key: InlineArray[UInt8, Int(MAX_PIPELINE_BINARY_KEY_SIZE_KHR)] = zero_init[InlineArray[UInt8, Int(MAX_PIPELINE_BINARY_KEY_SIZE_KHR)]](),
    ):
        self.s_type = StructureType.PIPELINE_BINARY_KEY_KHR
        self.p_next = p_next
        self.key_size = key_size
        self.key = key


struct PipelineBinaryInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var binary_count: UInt32
    var p_pipeline_binaries: Ptr[PipelineBinaryKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        binary_count: UInt32 = zero_init[UInt32](),
        p_pipeline_binaries: Ptr[PipelineBinaryKHR] = zero_init[Ptr[PipelineBinaryKHR]](),
    ):
        self.s_type = StructureType.PIPELINE_BINARY_INFO_KHR
        self.p_next = p_next
        self.binary_count = binary_count
        self.p_pipeline_binaries = p_pipeline_binaries


struct ReleaseCapturedPipelineDataInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline: Pipeline

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline: Pipeline = zero_init[Pipeline](),
    ):
        self.s_type = StructureType.RELEASE_CAPTURED_PIPELINE_DATA_INFO_KHR
        self.p_next = p_next
        self.pipeline = pipeline


struct PipelineBinaryDataInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_binary: PipelineBinaryKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_binary: PipelineBinaryKHR = zero_init[PipelineBinaryKHR](),
    ):
        self.s_type = StructureType.PIPELINE_BINARY_DATA_INFO_KHR
        self.p_next = p_next
        self.pipeline_binary = pipeline_binary


struct PipelineCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.PIPELINE_CREATE_INFO_KHR
        self.p_next = p_next


struct PipelineLayoutCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineLayoutCreateFlags
    var set_layout_count: UInt32
    var p_set_layouts: Ptr[DescriptorSetLayout]
    var push_constant_range_count: UInt32
    var p_push_constant_ranges: Ptr[PushConstantRange]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineLayoutCreateFlags = zero_init[PipelineLayoutCreateFlags](),
        set_layout_count: UInt32 = zero_init[UInt32](),
        p_set_layouts: Ptr[DescriptorSetLayout] = zero_init[Ptr[DescriptorSetLayout]](),
        push_constant_range_count: UInt32 = zero_init[UInt32](),
        p_push_constant_ranges: Ptr[PushConstantRange] = zero_init[Ptr[PushConstantRange]](),
    ):
        self.s_type = StructureType.PIPELINE_LAYOUT_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.set_layout_count = set_layout_count
        self.p_set_layouts = p_set_layouts
        self.push_constant_range_count = push_constant_range_count
        self.p_push_constant_ranges = p_push_constant_ranges


struct SamplerCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: SamplerCreateFlags
    var mag_filter: Filter
    var min_filter: Filter
    var mipmap_mode: SamplerMipmapMode
    var address_mode_u: SamplerAddressMode
    var address_mode_v: SamplerAddressMode
    var address_mode_w: SamplerAddressMode
    var mip_lod_bias: Float32
    var anisotropy_enable: Bool32
    var max_anisotropy: Float32
    var compare_enable: Bool32
    var compare_op: CompareOp
    var min_lod: Float32
    var max_lod: Float32
    var border_color: BorderColor
    var unnormalized_coordinates: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: SamplerCreateFlags = zero_init[SamplerCreateFlags](),
        mag_filter: Filter = zero_init[Filter](),
        min_filter: Filter = zero_init[Filter](),
        mipmap_mode: SamplerMipmapMode = zero_init[SamplerMipmapMode](),
        address_mode_u: SamplerAddressMode = zero_init[SamplerAddressMode](),
        address_mode_v: SamplerAddressMode = zero_init[SamplerAddressMode](),
        address_mode_w: SamplerAddressMode = zero_init[SamplerAddressMode](),
        mip_lod_bias: Float32 = zero_init[Float32](),
        anisotropy_enable: Bool32 = zero_init[Bool32](),
        max_anisotropy: Float32 = zero_init[Float32](),
        compare_enable: Bool32 = zero_init[Bool32](),
        compare_op: CompareOp = zero_init[CompareOp](),
        min_lod: Float32 = zero_init[Float32](),
        max_lod: Float32 = zero_init[Float32](),
        border_color: BorderColor = zero_init[BorderColor](),
        unnormalized_coordinates: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SAMPLER_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.mag_filter = mag_filter
        self.min_filter = min_filter
        self.mipmap_mode = mipmap_mode
        self.address_mode_u = address_mode_u
        self.address_mode_v = address_mode_v
        self.address_mode_w = address_mode_w
        self.mip_lod_bias = mip_lod_bias
        self.anisotropy_enable = anisotropy_enable
        self.max_anisotropy = max_anisotropy
        self.compare_enable = compare_enable
        self.compare_op = compare_op
        self.min_lod = min_lod
        self.max_lod = max_lod
        self.border_color = border_color
        self.unnormalized_coordinates = unnormalized_coordinates


struct CommandPoolCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: CommandPoolCreateFlags
    var queue_family_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: CommandPoolCreateFlags = zero_init[CommandPoolCreateFlags](),
        queue_family_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.COMMAND_POOL_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.queue_family_index = queue_family_index


struct CommandBufferAllocateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var command_pool: CommandPool
    var level: CommandBufferLevel
    var command_buffer_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        command_pool: CommandPool = zero_init[CommandPool](),
        level: CommandBufferLevel = zero_init[CommandBufferLevel](),
        command_buffer_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.COMMAND_BUFFER_ALLOCATE_INFO
        self.p_next = p_next
        self.command_pool = command_pool
        self.level = level
        self.command_buffer_count = command_buffer_count


struct CommandBufferInheritanceInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var render_pass: RenderPass
    var subpass: UInt32
    var framebuffer: Framebuffer
    var occlusion_query_enable: Bool32
    var query_flags: QueryControlFlags
    var pipeline_statistics: QueryPipelineStatisticFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        render_pass: RenderPass = zero_init[RenderPass](),
        subpass: UInt32 = zero_init[UInt32](),
        framebuffer: Framebuffer = zero_init[Framebuffer](),
        occlusion_query_enable: Bool32 = zero_init[Bool32](),
        query_flags: QueryControlFlags = zero_init[QueryControlFlags](),
        pipeline_statistics: QueryPipelineStatisticFlags = zero_init[QueryPipelineStatisticFlags](),
    ):
        self.s_type = StructureType.COMMAND_BUFFER_INHERITANCE_INFO
        self.p_next = p_next
        self.render_pass = render_pass
        self.subpass = subpass
        self.framebuffer = framebuffer
        self.occlusion_query_enable = occlusion_query_enable
        self.query_flags = query_flags
        self.pipeline_statistics = pipeline_statistics


struct CommandBufferBeginInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: CommandBufferUsageFlags
    var p_inheritance_info: Ptr[CommandBufferInheritanceInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: CommandBufferUsageFlags = zero_init[CommandBufferUsageFlags](),
        p_inheritance_info: Ptr[CommandBufferInheritanceInfo] = zero_init[Ptr[CommandBufferInheritanceInfo]](),
    ):
        self.s_type = StructureType.COMMAND_BUFFER_BEGIN_INFO
        self.p_next = p_next
        self.flags = flags
        self.p_inheritance_info = p_inheritance_info


struct RenderPassBeginInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var render_pass: RenderPass
    var framebuffer: Framebuffer
    var render_area: Rect2D
    var clear_value_count: UInt32
    var p_clear_values: Ptr[ClearValue]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        render_pass: RenderPass = zero_init[RenderPass](),
        framebuffer: Framebuffer = zero_init[Framebuffer](),
        render_area: Rect2D = zero_init[Rect2D](),
        clear_value_count: UInt32 = zero_init[UInt32](),
        p_clear_values: Ptr[ClearValue] = zero_init[Ptr[ClearValue]](),
    ):
        self.s_type = StructureType.RENDER_PASS_BEGIN_INFO
        self.p_next = p_next
        self.render_pass = render_pass
        self.framebuffer = framebuffer
        self.render_area = render_area
        self.clear_value_count = clear_value_count
        self.p_clear_values = p_clear_values


struct ClearDepthStencilValue(ImplicitlyCopyable, Movable):
    var depth: Float32
    var stencil: UInt32

    fn __init__(
        out self,
        depth: Float32 = zero_init[Float32](),
        stencil: UInt32 = zero_init[UInt32](),
    ):
        self.depth = depth
        self.stencil = stencil


struct ClearAttachment(ImplicitlyCopyable, Movable):
    var aspect_mask: ImageAspectFlags
    var color_attachment: UInt32
    var clear_value: ClearValue

    fn __init__(
        out self,
        aspect_mask: ImageAspectFlags = zero_init[ImageAspectFlags](),
        color_attachment: UInt32 = zero_init[UInt32](),
        clear_value: ClearValue = zero_init[ClearValue](),
    ):
        self.aspect_mask = aspect_mask
        self.color_attachment = color_attachment
        self.clear_value = clear_value


struct AttachmentDescription(ImplicitlyCopyable, Movable):
    var flags: AttachmentDescriptionFlags
    var format: Format
    var samples: SampleCountFlagBits
    var load_op: AttachmentLoadOp
    var store_op: AttachmentStoreOp
    var stencil_load_op: AttachmentLoadOp
    var stencil_store_op: AttachmentStoreOp
    var initial_layout: ImageLayout
    var final_layout: ImageLayout

    fn __init__(
        out self,
        flags: AttachmentDescriptionFlags = zero_init[AttachmentDescriptionFlags](),
        format: Format = zero_init[Format](),
        samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
        load_op: AttachmentLoadOp = zero_init[AttachmentLoadOp](),
        store_op: AttachmentStoreOp = zero_init[AttachmentStoreOp](),
        stencil_load_op: AttachmentLoadOp = zero_init[AttachmentLoadOp](),
        stencil_store_op: AttachmentStoreOp = zero_init[AttachmentStoreOp](),
        initial_layout: ImageLayout = zero_init[ImageLayout](),
        final_layout: ImageLayout = zero_init[ImageLayout](),
    ):
        self.flags = flags
        self.format = format
        self.samples = samples
        self.load_op = load_op
        self.store_op = store_op
        self.stencil_load_op = stencil_load_op
        self.stencil_store_op = stencil_store_op
        self.initial_layout = initial_layout
        self.final_layout = final_layout


struct AttachmentReference(ImplicitlyCopyable, Movable):
    var attachment: UInt32
    var layout: ImageLayout

    fn __init__(
        out self,
        attachment: UInt32 = zero_init[UInt32](),
        layout: ImageLayout = zero_init[ImageLayout](),
    ):
        self.attachment = attachment
        self.layout = layout


struct SubpassDescription(ImplicitlyCopyable, Movable):
    var flags: SubpassDescriptionFlags
    var pipeline_bind_point: PipelineBindPoint
    var input_attachment_count: UInt32
    var p_input_attachments: Ptr[AttachmentReference]
    var color_attachment_count: UInt32
    var p_color_attachments: Ptr[AttachmentReference]
    var p_resolve_attachments: Ptr[AttachmentReference]
    var p_depth_stencil_attachment: Ptr[AttachmentReference]
    var preserve_attachment_count: UInt32
    var p_preserve_attachments: Ptr[UInt32]

    fn __init__(
        out self,
        flags: SubpassDescriptionFlags = zero_init[SubpassDescriptionFlags](),
        pipeline_bind_point: PipelineBindPoint = zero_init[PipelineBindPoint](),
        input_attachment_count: UInt32 = zero_init[UInt32](),
        p_input_attachments: Ptr[AttachmentReference] = zero_init[Ptr[AttachmentReference]](),
        color_attachment_count: UInt32 = zero_init[UInt32](),
        p_color_attachments: Ptr[AttachmentReference] = zero_init[Ptr[AttachmentReference]](),
        p_resolve_attachments: Ptr[AttachmentReference] = zero_init[Ptr[AttachmentReference]](),
        p_depth_stencil_attachment: Ptr[AttachmentReference] = zero_init[Ptr[AttachmentReference]](),
        preserve_attachment_count: UInt32 = zero_init[UInt32](),
        p_preserve_attachments: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.flags = flags
        self.pipeline_bind_point = pipeline_bind_point
        self.input_attachment_count = input_attachment_count
        self.p_input_attachments = p_input_attachments
        self.color_attachment_count = color_attachment_count
        self.p_color_attachments = p_color_attachments
        self.p_resolve_attachments = p_resolve_attachments
        self.p_depth_stencil_attachment = p_depth_stencil_attachment
        self.preserve_attachment_count = preserve_attachment_count
        self.p_preserve_attachments = p_preserve_attachments


struct SubpassDependency(ImplicitlyCopyable, Movable):
    var src_subpass: UInt32
    var dst_subpass: UInt32
    var src_stage_mask: PipelineStageFlags
    var dst_stage_mask: PipelineStageFlags
    var src_access_mask: AccessFlags
    var dst_access_mask: AccessFlags
    var dependency_flags: DependencyFlags

    fn __init__(
        out self,
        src_subpass: UInt32 = zero_init[UInt32](),
        dst_subpass: UInt32 = zero_init[UInt32](),
        src_stage_mask: PipelineStageFlags = zero_init[PipelineStageFlags](),
        dst_stage_mask: PipelineStageFlags = zero_init[PipelineStageFlags](),
        src_access_mask: AccessFlags = zero_init[AccessFlags](),
        dst_access_mask: AccessFlags = zero_init[AccessFlags](),
        dependency_flags: DependencyFlags = zero_init[DependencyFlags](),
    ):
        self.src_subpass = src_subpass
        self.dst_subpass = dst_subpass
        self.src_stage_mask = src_stage_mask
        self.dst_stage_mask = dst_stage_mask
        self.src_access_mask = src_access_mask
        self.dst_access_mask = dst_access_mask
        self.dependency_flags = dependency_flags


struct RenderPassCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: RenderPassCreateFlags
    var attachment_count: UInt32
    var p_attachments: Ptr[AttachmentDescription]
    var subpass_count: UInt32
    var p_subpasses: Ptr[SubpassDescription]
    var dependency_count: UInt32
    var p_dependencies: Ptr[SubpassDependency]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: RenderPassCreateFlags = zero_init[RenderPassCreateFlags](),
        attachment_count: UInt32 = zero_init[UInt32](),
        p_attachments: Ptr[AttachmentDescription] = zero_init[Ptr[AttachmentDescription]](),
        subpass_count: UInt32 = zero_init[UInt32](),
        p_subpasses: Ptr[SubpassDescription] = zero_init[Ptr[SubpassDescription]](),
        dependency_count: UInt32 = zero_init[UInt32](),
        p_dependencies: Ptr[SubpassDependency] = zero_init[Ptr[SubpassDependency]](),
    ):
        self.s_type = StructureType.RENDER_PASS_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.attachment_count = attachment_count
        self.p_attachments = p_attachments
        self.subpass_count = subpass_count
        self.p_subpasses = p_subpasses
        self.dependency_count = dependency_count
        self.p_dependencies = p_dependencies


struct EventCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: EventCreateFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: EventCreateFlags = zero_init[EventCreateFlags](),
    ):
        self.s_type = StructureType.EVENT_CREATE_INFO
        self.p_next = p_next
        self.flags = flags


struct FenceCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: FenceCreateFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: FenceCreateFlags = zero_init[FenceCreateFlags](),
    ):
        self.s_type = StructureType.FENCE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags


struct PhysicalDeviceFeatures(ImplicitlyCopyable, Movable):
    var robust_buffer_access: Bool32
    var full_draw_index_uint_32: Bool32
    var image_cube_array: Bool32
    var independent_blend: Bool32
    var geometry_shader: Bool32
    var tessellation_shader: Bool32
    var sample_rate_shading: Bool32
    var dual_src_blend: Bool32
    var logic_op: Bool32
    var multi_draw_indirect: Bool32
    var draw_indirect_first_instance: Bool32
    var depth_clamp: Bool32
    var depth_bias_clamp: Bool32
    var fill_mode_non_solid: Bool32
    var depth_bounds: Bool32
    var wide_lines: Bool32
    var large_points: Bool32
    var alpha_to_one: Bool32
    var multi_viewport: Bool32
    var sampler_anisotropy: Bool32
    var texture_compression_etc2: Bool32
    var texture_compression_astc_ldr: Bool32
    var texture_compression_bc: Bool32
    var occlusion_query_precise: Bool32
    var pipeline_statistics_query: Bool32
    var vertex_pipeline_stores_and_atomics: Bool32
    var fragment_stores_and_atomics: Bool32
    var shader_tessellation_and_geometry_point_size: Bool32
    var shader_image_gather_extended: Bool32
    var shader_storage_image_extended_formats: Bool32
    var shader_storage_image_multisample: Bool32
    var shader_storage_image_read_without_format: Bool32
    var shader_storage_image_write_without_format: Bool32
    var shader_uniform_buffer_array_dynamic_indexing: Bool32
    var shader_sampled_image_array_dynamic_indexing: Bool32
    var shader_storage_buffer_array_dynamic_indexing: Bool32
    var shader_storage_image_array_dynamic_indexing: Bool32
    var shader_clip_distance: Bool32
    var shader_cull_distance: Bool32
    var shader_float_64: Bool32
    var shader_int_64: Bool32
    var shader_int_16: Bool32
    var shader_resource_residency: Bool32
    var shader_resource_min_lod: Bool32
    var sparse_binding: Bool32
    var sparse_residency_buffer: Bool32
    var sparse_residency_image_2_d: Bool32
    var sparse_residency_image_3_d: Bool32
    var sparse_residency_2_samples: Bool32
    var sparse_residency_4_samples: Bool32
    var sparse_residency_8_samples: Bool32
    var sparse_residency_16_samples: Bool32
    var sparse_residency_aliased: Bool32
    var variable_multisample_rate: Bool32
    var inherited_queries: Bool32

    fn __init__(
        out self,
        robust_buffer_access: Bool32 = zero_init[Bool32](),
        full_draw_index_uint_32: Bool32 = zero_init[Bool32](),
        image_cube_array: Bool32 = zero_init[Bool32](),
        independent_blend: Bool32 = zero_init[Bool32](),
        geometry_shader: Bool32 = zero_init[Bool32](),
        tessellation_shader: Bool32 = zero_init[Bool32](),
        sample_rate_shading: Bool32 = zero_init[Bool32](),
        dual_src_blend: Bool32 = zero_init[Bool32](),
        logic_op: Bool32 = zero_init[Bool32](),
        multi_draw_indirect: Bool32 = zero_init[Bool32](),
        draw_indirect_first_instance: Bool32 = zero_init[Bool32](),
        depth_clamp: Bool32 = zero_init[Bool32](),
        depth_bias_clamp: Bool32 = zero_init[Bool32](),
        fill_mode_non_solid: Bool32 = zero_init[Bool32](),
        depth_bounds: Bool32 = zero_init[Bool32](),
        wide_lines: Bool32 = zero_init[Bool32](),
        large_points: Bool32 = zero_init[Bool32](),
        alpha_to_one: Bool32 = zero_init[Bool32](),
        multi_viewport: Bool32 = zero_init[Bool32](),
        sampler_anisotropy: Bool32 = zero_init[Bool32](),
        texture_compression_etc2: Bool32 = zero_init[Bool32](),
        texture_compression_astc_ldr: Bool32 = zero_init[Bool32](),
        texture_compression_bc: Bool32 = zero_init[Bool32](),
        occlusion_query_precise: Bool32 = zero_init[Bool32](),
        pipeline_statistics_query: Bool32 = zero_init[Bool32](),
        vertex_pipeline_stores_and_atomics: Bool32 = zero_init[Bool32](),
        fragment_stores_and_atomics: Bool32 = zero_init[Bool32](),
        shader_tessellation_and_geometry_point_size: Bool32 = zero_init[Bool32](),
        shader_image_gather_extended: Bool32 = zero_init[Bool32](),
        shader_storage_image_extended_formats: Bool32 = zero_init[Bool32](),
        shader_storage_image_multisample: Bool32 = zero_init[Bool32](),
        shader_storage_image_read_without_format: Bool32 = zero_init[Bool32](),
        shader_storage_image_write_without_format: Bool32 = zero_init[Bool32](),
        shader_uniform_buffer_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_sampled_image_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_buffer_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_image_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_clip_distance: Bool32 = zero_init[Bool32](),
        shader_cull_distance: Bool32 = zero_init[Bool32](),
        shader_float_64: Bool32 = zero_init[Bool32](),
        shader_int_64: Bool32 = zero_init[Bool32](),
        shader_int_16: Bool32 = zero_init[Bool32](),
        shader_resource_residency: Bool32 = zero_init[Bool32](),
        shader_resource_min_lod: Bool32 = zero_init[Bool32](),
        sparse_binding: Bool32 = zero_init[Bool32](),
        sparse_residency_buffer: Bool32 = zero_init[Bool32](),
        sparse_residency_image_2_d: Bool32 = zero_init[Bool32](),
        sparse_residency_image_3_d: Bool32 = zero_init[Bool32](),
        sparse_residency_2_samples: Bool32 = zero_init[Bool32](),
        sparse_residency_4_samples: Bool32 = zero_init[Bool32](),
        sparse_residency_8_samples: Bool32 = zero_init[Bool32](),
        sparse_residency_16_samples: Bool32 = zero_init[Bool32](),
        sparse_residency_aliased: Bool32 = zero_init[Bool32](),
        variable_multisample_rate: Bool32 = zero_init[Bool32](),
        inherited_queries: Bool32 = zero_init[Bool32](),
    ):
        self.robust_buffer_access = robust_buffer_access
        self.full_draw_index_uint_32 = full_draw_index_uint_32
        self.image_cube_array = image_cube_array
        self.independent_blend = independent_blend
        self.geometry_shader = geometry_shader
        self.tessellation_shader = tessellation_shader
        self.sample_rate_shading = sample_rate_shading
        self.dual_src_blend = dual_src_blend
        self.logic_op = logic_op
        self.multi_draw_indirect = multi_draw_indirect
        self.draw_indirect_first_instance = draw_indirect_first_instance
        self.depth_clamp = depth_clamp
        self.depth_bias_clamp = depth_bias_clamp
        self.fill_mode_non_solid = fill_mode_non_solid
        self.depth_bounds = depth_bounds
        self.wide_lines = wide_lines
        self.large_points = large_points
        self.alpha_to_one = alpha_to_one
        self.multi_viewport = multi_viewport
        self.sampler_anisotropy = sampler_anisotropy
        self.texture_compression_etc2 = texture_compression_etc2
        self.texture_compression_astc_ldr = texture_compression_astc_ldr
        self.texture_compression_bc = texture_compression_bc
        self.occlusion_query_precise = occlusion_query_precise
        self.pipeline_statistics_query = pipeline_statistics_query
        self.vertex_pipeline_stores_and_atomics = vertex_pipeline_stores_and_atomics
        self.fragment_stores_and_atomics = fragment_stores_and_atomics
        self.shader_tessellation_and_geometry_point_size = shader_tessellation_and_geometry_point_size
        self.shader_image_gather_extended = shader_image_gather_extended
        self.shader_storage_image_extended_formats = shader_storage_image_extended_formats
        self.shader_storage_image_multisample = shader_storage_image_multisample
        self.shader_storage_image_read_without_format = shader_storage_image_read_without_format
        self.shader_storage_image_write_without_format = shader_storage_image_write_without_format
        self.shader_uniform_buffer_array_dynamic_indexing = shader_uniform_buffer_array_dynamic_indexing
        self.shader_sampled_image_array_dynamic_indexing = shader_sampled_image_array_dynamic_indexing
        self.shader_storage_buffer_array_dynamic_indexing = shader_storage_buffer_array_dynamic_indexing
        self.shader_storage_image_array_dynamic_indexing = shader_storage_image_array_dynamic_indexing
        self.shader_clip_distance = shader_clip_distance
        self.shader_cull_distance = shader_cull_distance
        self.shader_float_64 = shader_float_64
        self.shader_int_64 = shader_int_64
        self.shader_int_16 = shader_int_16
        self.shader_resource_residency = shader_resource_residency
        self.shader_resource_min_lod = shader_resource_min_lod
        self.sparse_binding = sparse_binding
        self.sparse_residency_buffer = sparse_residency_buffer
        self.sparse_residency_image_2_d = sparse_residency_image_2_d
        self.sparse_residency_image_3_d = sparse_residency_image_3_d
        self.sparse_residency_2_samples = sparse_residency_2_samples
        self.sparse_residency_4_samples = sparse_residency_4_samples
        self.sparse_residency_8_samples = sparse_residency_8_samples
        self.sparse_residency_16_samples = sparse_residency_16_samples
        self.sparse_residency_aliased = sparse_residency_aliased
        self.variable_multisample_rate = variable_multisample_rate
        self.inherited_queries = inherited_queries


struct PhysicalDeviceSparseProperties(ImplicitlyCopyable, Movable):
    var residency_standard_2_d_block_shape: Bool32
    var residency_standard_2_d_multisample_block_shape: Bool32
    var residency_standard_3_d_block_shape: Bool32
    var residency_aligned_mip_size: Bool32
    var residency_non_resident_strict: Bool32

    fn __init__(
        out self,
        residency_standard_2_d_block_shape: Bool32 = zero_init[Bool32](),
        residency_standard_2_d_multisample_block_shape: Bool32 = zero_init[Bool32](),
        residency_standard_3_d_block_shape: Bool32 = zero_init[Bool32](),
        residency_aligned_mip_size: Bool32 = zero_init[Bool32](),
        residency_non_resident_strict: Bool32 = zero_init[Bool32](),
    ):
        self.residency_standard_2_d_block_shape = residency_standard_2_d_block_shape
        self.residency_standard_2_d_multisample_block_shape = residency_standard_2_d_multisample_block_shape
        self.residency_standard_3_d_block_shape = residency_standard_3_d_block_shape
        self.residency_aligned_mip_size = residency_aligned_mip_size
        self.residency_non_resident_strict = residency_non_resident_strict


struct PhysicalDeviceLimits(ImplicitlyCopyable, Movable):
    var max_image_dimension_1_d: UInt32
    var max_image_dimension_2_d: UInt32
    var max_image_dimension_3_d: UInt32
    var max_image_dimension_cube: UInt32
    var max_image_array_layers: UInt32
    var max_texel_buffer_elements: UInt32
    var max_uniform_buffer_range: UInt32
    var max_storage_buffer_range: UInt32
    var max_push_constants_size: UInt32
    var max_memory_allocation_count: UInt32
    var max_sampler_allocation_count: UInt32
    var buffer_image_granularity: DeviceSize
    var sparse_address_space_size: DeviceSize
    var max_bound_descriptor_sets: UInt32
    var max_per_stage_descriptor_samplers: UInt32
    var max_per_stage_descriptor_uniform_buffers: UInt32
    var max_per_stage_descriptor_storage_buffers: UInt32
    var max_per_stage_descriptor_sampled_images: UInt32
    var max_per_stage_descriptor_storage_images: UInt32
    var max_per_stage_descriptor_input_attachments: UInt32
    var max_per_stage_resources: UInt32
    var max_descriptor_set_samplers: UInt32
    var max_descriptor_set_uniform_buffers: UInt32
    var max_descriptor_set_uniform_buffers_dynamic: UInt32
    var max_descriptor_set_storage_buffers: UInt32
    var max_descriptor_set_storage_buffers_dynamic: UInt32
    var max_descriptor_set_sampled_images: UInt32
    var max_descriptor_set_storage_images: UInt32
    var max_descriptor_set_input_attachments: UInt32
    var max_vertex_input_attributes: UInt32
    var max_vertex_input_bindings: UInt32
    var max_vertex_input_attribute_offset: UInt32
    var max_vertex_input_binding_stride: UInt32
    var max_vertex_output_components: UInt32
    var max_tessellation_generation_level: UInt32
    var max_tessellation_patch_size: UInt32
    var max_tessellation_control_per_vertex_input_components: UInt32
    var max_tessellation_control_per_vertex_output_components: UInt32
    var max_tessellation_control_per_patch_output_components: UInt32
    var max_tessellation_control_total_output_components: UInt32
    var max_tessellation_evaluation_input_components: UInt32
    var max_tessellation_evaluation_output_components: UInt32
    var max_geometry_shader_invocations: UInt32
    var max_geometry_input_components: UInt32
    var max_geometry_output_components: UInt32
    var max_geometry_output_vertices: UInt32
    var max_geometry_total_output_components: UInt32
    var max_fragment_input_components: UInt32
    var max_fragment_output_attachments: UInt32
    var max_fragment_dual_src_attachments: UInt32
    var max_fragment_combined_output_resources: UInt32
    var max_compute_shared_memory_size: UInt32
    var max_compute_work_group_count: InlineArray[UInt32, Int(3)]
    var max_compute_work_group_invocations: UInt32
    var max_compute_work_group_size: InlineArray[UInt32, Int(3)]
    var sub_pixel_precision_bits: UInt32
    var sub_texel_precision_bits: UInt32
    var mipmap_precision_bits: UInt32
    var max_draw_indexed_index_value: UInt32
    var max_draw_indirect_count: UInt32
    var max_sampler_lod_bias: Float32
    var max_sampler_anisotropy: Float32
    var max_viewports: UInt32
    var max_viewport_dimensions: InlineArray[UInt32, Int(2)]
    var viewport_bounds_range: InlineArray[Float32, Int(2)]
    var viewport_sub_pixel_bits: UInt32
    var min_memory_map_alignment: UInt
    var min_texel_buffer_offset_alignment: DeviceSize
    var min_uniform_buffer_offset_alignment: DeviceSize
    var min_storage_buffer_offset_alignment: DeviceSize
    var min_texel_offset: Int32
    var max_texel_offset: UInt32
    var min_texel_gather_offset: Int32
    var max_texel_gather_offset: UInt32
    var min_interpolation_offset: Float32
    var max_interpolation_offset: Float32
    var sub_pixel_interpolation_offset_bits: UInt32
    var max_framebuffer_width: UInt32
    var max_framebuffer_height: UInt32
    var max_framebuffer_layers: UInt32
    var framebuffer_color_sample_counts: SampleCountFlags
    var framebuffer_depth_sample_counts: SampleCountFlags
    var framebuffer_stencil_sample_counts: SampleCountFlags
    var framebuffer_no_attachments_sample_counts: SampleCountFlags
    var max_color_attachments: UInt32
    var sampled_image_color_sample_counts: SampleCountFlags
    var sampled_image_integer_sample_counts: SampleCountFlags
    var sampled_image_depth_sample_counts: SampleCountFlags
    var sampled_image_stencil_sample_counts: SampleCountFlags
    var storage_image_sample_counts: SampleCountFlags
    var max_sample_mask_words: UInt32
    var timestamp_compute_and_graphics: Bool32
    var timestamp_period: Float32
    var max_clip_distances: UInt32
    var max_cull_distances: UInt32
    var max_combined_clip_and_cull_distances: UInt32
    var discrete_queue_priorities: UInt32
    var point_size_range: InlineArray[Float32, Int(2)]
    var line_width_range: InlineArray[Float32, Int(2)]
    var point_size_granularity: Float32
    var line_width_granularity: Float32
    var strict_lines: Bool32
    var standard_sample_locations: Bool32
    var optimal_buffer_copy_offset_alignment: DeviceSize
    var optimal_buffer_copy_row_pitch_alignment: DeviceSize
    var non_coherent_atom_size: DeviceSize

    fn __init__(
        out self,
        max_image_dimension_1_d: UInt32 = zero_init[UInt32](),
        max_image_dimension_2_d: UInt32 = zero_init[UInt32](),
        max_image_dimension_3_d: UInt32 = zero_init[UInt32](),
        max_image_dimension_cube: UInt32 = zero_init[UInt32](),
        max_image_array_layers: UInt32 = zero_init[UInt32](),
        max_texel_buffer_elements: UInt32 = zero_init[UInt32](),
        max_uniform_buffer_range: UInt32 = zero_init[UInt32](),
        max_storage_buffer_range: UInt32 = zero_init[UInt32](),
        max_push_constants_size: UInt32 = zero_init[UInt32](),
        max_memory_allocation_count: UInt32 = zero_init[UInt32](),
        max_sampler_allocation_count: UInt32 = zero_init[UInt32](),
        buffer_image_granularity: DeviceSize = zero_init[DeviceSize](),
        sparse_address_space_size: DeviceSize = zero_init[DeviceSize](),
        max_bound_descriptor_sets: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_samplers: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_uniform_buffers: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_storage_buffers: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_sampled_images: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_storage_images: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_input_attachments: UInt32 = zero_init[UInt32](),
        max_per_stage_resources: UInt32 = zero_init[UInt32](),
        max_descriptor_set_samplers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_uniform_buffers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_uniform_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_storage_buffers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_storage_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_sampled_images: UInt32 = zero_init[UInt32](),
        max_descriptor_set_storage_images: UInt32 = zero_init[UInt32](),
        max_descriptor_set_input_attachments: UInt32 = zero_init[UInt32](),
        max_vertex_input_attributes: UInt32 = zero_init[UInt32](),
        max_vertex_input_bindings: UInt32 = zero_init[UInt32](),
        max_vertex_input_attribute_offset: UInt32 = zero_init[UInt32](),
        max_vertex_input_binding_stride: UInt32 = zero_init[UInt32](),
        max_vertex_output_components: UInt32 = zero_init[UInt32](),
        max_tessellation_generation_level: UInt32 = zero_init[UInt32](),
        max_tessellation_patch_size: UInt32 = zero_init[UInt32](),
        max_tessellation_control_per_vertex_input_components: UInt32 = zero_init[UInt32](),
        max_tessellation_control_per_vertex_output_components: UInt32 = zero_init[UInt32](),
        max_tessellation_control_per_patch_output_components: UInt32 = zero_init[UInt32](),
        max_tessellation_control_total_output_components: UInt32 = zero_init[UInt32](),
        max_tessellation_evaluation_input_components: UInt32 = zero_init[UInt32](),
        max_tessellation_evaluation_output_components: UInt32 = zero_init[UInt32](),
        max_geometry_shader_invocations: UInt32 = zero_init[UInt32](),
        max_geometry_input_components: UInt32 = zero_init[UInt32](),
        max_geometry_output_components: UInt32 = zero_init[UInt32](),
        max_geometry_output_vertices: UInt32 = zero_init[UInt32](),
        max_geometry_total_output_components: UInt32 = zero_init[UInt32](),
        max_fragment_input_components: UInt32 = zero_init[UInt32](),
        max_fragment_output_attachments: UInt32 = zero_init[UInt32](),
        max_fragment_dual_src_attachments: UInt32 = zero_init[UInt32](),
        max_fragment_combined_output_resources: UInt32 = zero_init[UInt32](),
        max_compute_shared_memory_size: UInt32 = zero_init[UInt32](),
        max_compute_work_group_count: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_compute_work_group_invocations: UInt32 = zero_init[UInt32](),
        max_compute_work_group_size: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        sub_pixel_precision_bits: UInt32 = zero_init[UInt32](),
        sub_texel_precision_bits: UInt32 = zero_init[UInt32](),
        mipmap_precision_bits: UInt32 = zero_init[UInt32](),
        max_draw_indexed_index_value: UInt32 = zero_init[UInt32](),
        max_draw_indirect_count: UInt32 = zero_init[UInt32](),
        max_sampler_lod_bias: Float32 = zero_init[Float32](),
        max_sampler_anisotropy: Float32 = zero_init[Float32](),
        max_viewports: UInt32 = zero_init[UInt32](),
        max_viewport_dimensions: InlineArray[UInt32, Int(2)] = zero_init[InlineArray[UInt32, Int(2)]](),
        viewport_bounds_range: InlineArray[Float32, Int(2)] = zero_init[InlineArray[Float32, Int(2)]](),
        viewport_sub_pixel_bits: UInt32 = zero_init[UInt32](),
        min_memory_map_alignment: UInt = zero_init[UInt](),
        min_texel_buffer_offset_alignment: DeviceSize = zero_init[DeviceSize](),
        min_uniform_buffer_offset_alignment: DeviceSize = zero_init[DeviceSize](),
        min_storage_buffer_offset_alignment: DeviceSize = zero_init[DeviceSize](),
        min_texel_offset: Int32 = zero_init[Int32](),
        max_texel_offset: UInt32 = zero_init[UInt32](),
        min_texel_gather_offset: Int32 = zero_init[Int32](),
        max_texel_gather_offset: UInt32 = zero_init[UInt32](),
        min_interpolation_offset: Float32 = zero_init[Float32](),
        max_interpolation_offset: Float32 = zero_init[Float32](),
        sub_pixel_interpolation_offset_bits: UInt32 = zero_init[UInt32](),
        max_framebuffer_width: UInt32 = zero_init[UInt32](),
        max_framebuffer_height: UInt32 = zero_init[UInt32](),
        max_framebuffer_layers: UInt32 = zero_init[UInt32](),
        framebuffer_color_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        framebuffer_depth_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        framebuffer_stencil_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        framebuffer_no_attachments_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        max_color_attachments: UInt32 = zero_init[UInt32](),
        sampled_image_color_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        sampled_image_integer_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        sampled_image_depth_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        sampled_image_stencil_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        storage_image_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        max_sample_mask_words: UInt32 = zero_init[UInt32](),
        timestamp_compute_and_graphics: Bool32 = zero_init[Bool32](),
        timestamp_period: Float32 = zero_init[Float32](),
        max_clip_distances: UInt32 = zero_init[UInt32](),
        max_cull_distances: UInt32 = zero_init[UInt32](),
        max_combined_clip_and_cull_distances: UInt32 = zero_init[UInt32](),
        discrete_queue_priorities: UInt32 = zero_init[UInt32](),
        point_size_range: InlineArray[Float32, Int(2)] = zero_init[InlineArray[Float32, Int(2)]](),
        line_width_range: InlineArray[Float32, Int(2)] = zero_init[InlineArray[Float32, Int(2)]](),
        point_size_granularity: Float32 = zero_init[Float32](),
        line_width_granularity: Float32 = zero_init[Float32](),
        strict_lines: Bool32 = zero_init[Bool32](),
        standard_sample_locations: Bool32 = zero_init[Bool32](),
        optimal_buffer_copy_offset_alignment: DeviceSize = zero_init[DeviceSize](),
        optimal_buffer_copy_row_pitch_alignment: DeviceSize = zero_init[DeviceSize](),
        non_coherent_atom_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.max_image_dimension_1_d = max_image_dimension_1_d
        self.max_image_dimension_2_d = max_image_dimension_2_d
        self.max_image_dimension_3_d = max_image_dimension_3_d
        self.max_image_dimension_cube = max_image_dimension_cube
        self.max_image_array_layers = max_image_array_layers
        self.max_texel_buffer_elements = max_texel_buffer_elements
        self.max_uniform_buffer_range = max_uniform_buffer_range
        self.max_storage_buffer_range = max_storage_buffer_range
        self.max_push_constants_size = max_push_constants_size
        self.max_memory_allocation_count = max_memory_allocation_count
        self.max_sampler_allocation_count = max_sampler_allocation_count
        self.buffer_image_granularity = buffer_image_granularity
        self.sparse_address_space_size = sparse_address_space_size
        self.max_bound_descriptor_sets = max_bound_descriptor_sets
        self.max_per_stage_descriptor_samplers = max_per_stage_descriptor_samplers
        self.max_per_stage_descriptor_uniform_buffers = max_per_stage_descriptor_uniform_buffers
        self.max_per_stage_descriptor_storage_buffers = max_per_stage_descriptor_storage_buffers
        self.max_per_stage_descriptor_sampled_images = max_per_stage_descriptor_sampled_images
        self.max_per_stage_descriptor_storage_images = max_per_stage_descriptor_storage_images
        self.max_per_stage_descriptor_input_attachments = max_per_stage_descriptor_input_attachments
        self.max_per_stage_resources = max_per_stage_resources
        self.max_descriptor_set_samplers = max_descriptor_set_samplers
        self.max_descriptor_set_uniform_buffers = max_descriptor_set_uniform_buffers
        self.max_descriptor_set_uniform_buffers_dynamic = max_descriptor_set_uniform_buffers_dynamic
        self.max_descriptor_set_storage_buffers = max_descriptor_set_storage_buffers
        self.max_descriptor_set_storage_buffers_dynamic = max_descriptor_set_storage_buffers_dynamic
        self.max_descriptor_set_sampled_images = max_descriptor_set_sampled_images
        self.max_descriptor_set_storage_images = max_descriptor_set_storage_images
        self.max_descriptor_set_input_attachments = max_descriptor_set_input_attachments
        self.max_vertex_input_attributes = max_vertex_input_attributes
        self.max_vertex_input_bindings = max_vertex_input_bindings
        self.max_vertex_input_attribute_offset = max_vertex_input_attribute_offset
        self.max_vertex_input_binding_stride = max_vertex_input_binding_stride
        self.max_vertex_output_components = max_vertex_output_components
        self.max_tessellation_generation_level = max_tessellation_generation_level
        self.max_tessellation_patch_size = max_tessellation_patch_size
        self.max_tessellation_control_per_vertex_input_components = max_tessellation_control_per_vertex_input_components
        self.max_tessellation_control_per_vertex_output_components = max_tessellation_control_per_vertex_output_components
        self.max_tessellation_control_per_patch_output_components = max_tessellation_control_per_patch_output_components
        self.max_tessellation_control_total_output_components = max_tessellation_control_total_output_components
        self.max_tessellation_evaluation_input_components = max_tessellation_evaluation_input_components
        self.max_tessellation_evaluation_output_components = max_tessellation_evaluation_output_components
        self.max_geometry_shader_invocations = max_geometry_shader_invocations
        self.max_geometry_input_components = max_geometry_input_components
        self.max_geometry_output_components = max_geometry_output_components
        self.max_geometry_output_vertices = max_geometry_output_vertices
        self.max_geometry_total_output_components = max_geometry_total_output_components
        self.max_fragment_input_components = max_fragment_input_components
        self.max_fragment_output_attachments = max_fragment_output_attachments
        self.max_fragment_dual_src_attachments = max_fragment_dual_src_attachments
        self.max_fragment_combined_output_resources = max_fragment_combined_output_resources
        self.max_compute_shared_memory_size = max_compute_shared_memory_size
        self.max_compute_work_group_count = max_compute_work_group_count
        self.max_compute_work_group_invocations = max_compute_work_group_invocations
        self.max_compute_work_group_size = max_compute_work_group_size
        self.sub_pixel_precision_bits = sub_pixel_precision_bits
        self.sub_texel_precision_bits = sub_texel_precision_bits
        self.mipmap_precision_bits = mipmap_precision_bits
        self.max_draw_indexed_index_value = max_draw_indexed_index_value
        self.max_draw_indirect_count = max_draw_indirect_count
        self.max_sampler_lod_bias = max_sampler_lod_bias
        self.max_sampler_anisotropy = max_sampler_anisotropy
        self.max_viewports = max_viewports
        self.max_viewport_dimensions = max_viewport_dimensions
        self.viewport_bounds_range = viewport_bounds_range
        self.viewport_sub_pixel_bits = viewport_sub_pixel_bits
        self.min_memory_map_alignment = min_memory_map_alignment
        self.min_texel_buffer_offset_alignment = min_texel_buffer_offset_alignment
        self.min_uniform_buffer_offset_alignment = min_uniform_buffer_offset_alignment
        self.min_storage_buffer_offset_alignment = min_storage_buffer_offset_alignment
        self.min_texel_offset = min_texel_offset
        self.max_texel_offset = max_texel_offset
        self.min_texel_gather_offset = min_texel_gather_offset
        self.max_texel_gather_offset = max_texel_gather_offset
        self.min_interpolation_offset = min_interpolation_offset
        self.max_interpolation_offset = max_interpolation_offset
        self.sub_pixel_interpolation_offset_bits = sub_pixel_interpolation_offset_bits
        self.max_framebuffer_width = max_framebuffer_width
        self.max_framebuffer_height = max_framebuffer_height
        self.max_framebuffer_layers = max_framebuffer_layers
        self.framebuffer_color_sample_counts = framebuffer_color_sample_counts
        self.framebuffer_depth_sample_counts = framebuffer_depth_sample_counts
        self.framebuffer_stencil_sample_counts = framebuffer_stencil_sample_counts
        self.framebuffer_no_attachments_sample_counts = framebuffer_no_attachments_sample_counts
        self.max_color_attachments = max_color_attachments
        self.sampled_image_color_sample_counts = sampled_image_color_sample_counts
        self.sampled_image_integer_sample_counts = sampled_image_integer_sample_counts
        self.sampled_image_depth_sample_counts = sampled_image_depth_sample_counts
        self.sampled_image_stencil_sample_counts = sampled_image_stencil_sample_counts
        self.storage_image_sample_counts = storage_image_sample_counts
        self.max_sample_mask_words = max_sample_mask_words
        self.timestamp_compute_and_graphics = timestamp_compute_and_graphics
        self.timestamp_period = timestamp_period
        self.max_clip_distances = max_clip_distances
        self.max_cull_distances = max_cull_distances
        self.max_combined_clip_and_cull_distances = max_combined_clip_and_cull_distances
        self.discrete_queue_priorities = discrete_queue_priorities
        self.point_size_range = point_size_range
        self.line_width_range = line_width_range
        self.point_size_granularity = point_size_granularity
        self.line_width_granularity = line_width_granularity
        self.strict_lines = strict_lines
        self.standard_sample_locations = standard_sample_locations
        self.optimal_buffer_copy_offset_alignment = optimal_buffer_copy_offset_alignment
        self.optimal_buffer_copy_row_pitch_alignment = optimal_buffer_copy_row_pitch_alignment
        self.non_coherent_atom_size = non_coherent_atom_size


struct SemaphoreCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: SemaphoreCreateFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: SemaphoreCreateFlags = zero_init[SemaphoreCreateFlags](),
    ):
        self.s_type = StructureType.SEMAPHORE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags


struct QueryPoolCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: QueryPoolCreateFlags
    var query_type: QueryType
    var query_count: UInt32
    var pipeline_statistics: QueryPipelineStatisticFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: QueryPoolCreateFlags = zero_init[QueryPoolCreateFlags](),
        query_type: QueryType = zero_init[QueryType](),
        query_count: UInt32 = zero_init[UInt32](),
        pipeline_statistics: QueryPipelineStatisticFlags = zero_init[QueryPipelineStatisticFlags](),
    ):
        self.s_type = StructureType.QUERY_POOL_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.query_type = query_type
        self.query_count = query_count
        self.pipeline_statistics = pipeline_statistics


struct FramebufferCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: FramebufferCreateFlags
    var render_pass: RenderPass
    var attachment_count: UInt32
    var p_attachments: Ptr[ImageView]
    var width: UInt32
    var height: UInt32
    var layers: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: FramebufferCreateFlags = zero_init[FramebufferCreateFlags](),
        render_pass: RenderPass = zero_init[RenderPass](),
        attachment_count: UInt32 = zero_init[UInt32](),
        p_attachments: Ptr[ImageView] = zero_init[Ptr[ImageView]](),
        width: UInt32 = zero_init[UInt32](),
        height: UInt32 = zero_init[UInt32](),
        layers: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.FRAMEBUFFER_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.render_pass = render_pass
        self.attachment_count = attachment_count
        self.p_attachments = p_attachments
        self.width = width
        self.height = height
        self.layers = layers


struct DrawIndirectCommand(ImplicitlyCopyable, Movable):
    var vertex_count: UInt32
    var instance_count: UInt32
    var first_vertex: UInt32
    var first_instance: UInt32

    fn __init__(
        out self,
        vertex_count: UInt32 = zero_init[UInt32](),
        instance_count: UInt32 = zero_init[UInt32](),
        first_vertex: UInt32 = zero_init[UInt32](),
        first_instance: UInt32 = zero_init[UInt32](),
    ):
        self.vertex_count = vertex_count
        self.instance_count = instance_count
        self.first_vertex = first_vertex
        self.first_instance = first_instance


struct DrawIndexedIndirectCommand(ImplicitlyCopyable, Movable):
    var index_count: UInt32
    var instance_count: UInt32
    var first_index: UInt32
    var vertex_offset: Int32
    var first_instance: UInt32

    fn __init__(
        out self,
        index_count: UInt32 = zero_init[UInt32](),
        instance_count: UInt32 = zero_init[UInt32](),
        first_index: UInt32 = zero_init[UInt32](),
        vertex_offset: Int32 = zero_init[Int32](),
        first_instance: UInt32 = zero_init[UInt32](),
    ):
        self.index_count = index_count
        self.instance_count = instance_count
        self.first_index = first_index
        self.vertex_offset = vertex_offset
        self.first_instance = first_instance


struct DispatchIndirectCommand(ImplicitlyCopyable, Movable):
    var x: UInt32
    var y: UInt32
    var z: UInt32

    fn __init__(
        out self,
        x: UInt32 = zero_init[UInt32](),
        y: UInt32 = zero_init[UInt32](),
        z: UInt32 = zero_init[UInt32](),
    ):
        self.x = x
        self.y = y
        self.z = z


struct MultiDrawInfoEXT(ImplicitlyCopyable, Movable):
    var first_vertex: UInt32
    var vertex_count: UInt32

    fn __init__(
        out self,
        first_vertex: UInt32 = zero_init[UInt32](),
        vertex_count: UInt32 = zero_init[UInt32](),
    ):
        self.first_vertex = first_vertex
        self.vertex_count = vertex_count


struct MultiDrawIndexedInfoEXT(ImplicitlyCopyable, Movable):
    var first_index: UInt32
    var index_count: UInt32
    var vertex_offset: Int32

    fn __init__(
        out self,
        first_index: UInt32 = zero_init[UInt32](),
        index_count: UInt32 = zero_init[UInt32](),
        vertex_offset: Int32 = zero_init[Int32](),
    ):
        self.first_index = first_index
        self.index_count = index_count
        self.vertex_offset = vertex_offset


struct SubmitInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var wait_semaphore_count: UInt32
    var p_wait_semaphores: Ptr[Semaphore]
    var p_wait_dst_stage_mask: Ptr[PipelineStageFlags]
    var command_buffer_count: UInt32
    var p_command_buffers: Ptr[CommandBuffer]
    var signal_semaphore_count: UInt32
    var p_signal_semaphores: Ptr[Semaphore]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        wait_semaphore_count: UInt32 = zero_init[UInt32](),
        p_wait_semaphores: Ptr[Semaphore] = zero_init[Ptr[Semaphore]](),
        p_wait_dst_stage_mask: Ptr[PipelineStageFlags] = zero_init[Ptr[PipelineStageFlags]](),
        command_buffer_count: UInt32 = zero_init[UInt32](),
        p_command_buffers: Ptr[CommandBuffer] = zero_init[Ptr[CommandBuffer]](),
        signal_semaphore_count: UInt32 = zero_init[UInt32](),
        p_signal_semaphores: Ptr[Semaphore] = zero_init[Ptr[Semaphore]](),
    ):
        self.s_type = StructureType.SUBMIT_INFO
        self.p_next = p_next
        self.wait_semaphore_count = wait_semaphore_count
        self.p_wait_semaphores = p_wait_semaphores
        self.p_wait_dst_stage_mask = p_wait_dst_stage_mask
        self.command_buffer_count = command_buffer_count
        self.p_command_buffers = p_command_buffers
        self.signal_semaphore_count = signal_semaphore_count
        self.p_signal_semaphores = p_signal_semaphores


struct DisplayPropertiesKHR(ImplicitlyCopyable, Movable):
    var display: DisplayKHR
    var display_name: Ptr[UInt8]
    var physical_dimensions: Extent2D
    var physical_resolution: Extent2D
    var supported_transforms: SurfaceTransformFlagsKHR
    var plane_reorder_possible: Bool32
    var persistent_content: Bool32

    fn __init__(
        out self,
        display: DisplayKHR = zero_init[DisplayKHR](),
        display_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        physical_dimensions: Extent2D = zero_init[Extent2D](),
        physical_resolution: Extent2D = zero_init[Extent2D](),
        supported_transforms: SurfaceTransformFlagsKHR = zero_init[SurfaceTransformFlagsKHR](),
        plane_reorder_possible: Bool32 = zero_init[Bool32](),
        persistent_content: Bool32 = zero_init[Bool32](),
    ):
        self.display = display
        self.display_name = display_name
        self.physical_dimensions = physical_dimensions
        self.physical_resolution = physical_resolution
        self.supported_transforms = supported_transforms
        self.plane_reorder_possible = plane_reorder_possible
        self.persistent_content = persistent_content


struct DisplayPlanePropertiesKHR(ImplicitlyCopyable, Movable):
    var current_display: DisplayKHR
    var current_stack_index: UInt32

    fn __init__(
        out self,
        current_display: DisplayKHR = zero_init[DisplayKHR](),
        current_stack_index: UInt32 = zero_init[UInt32](),
    ):
        self.current_display = current_display
        self.current_stack_index = current_stack_index


struct DisplayModeParametersKHR(ImplicitlyCopyable, Movable):
    var visible_region: Extent2D
    var refresh_rate: UInt32

    fn __init__(
        out self,
        visible_region: Extent2D = zero_init[Extent2D](),
        refresh_rate: UInt32 = zero_init[UInt32](),
    ):
        self.visible_region = visible_region
        self.refresh_rate = refresh_rate


struct DisplayModePropertiesKHR(ImplicitlyCopyable, Movable):
    var display_mode: DisplayModeKHR
    var parameters: DisplayModeParametersKHR

    fn __init__(
        out self,
        display_mode: DisplayModeKHR = zero_init[DisplayModeKHR](),
        parameters: DisplayModeParametersKHR = zero_init[DisplayModeParametersKHR](),
    ):
        self.display_mode = display_mode
        self.parameters = parameters


struct DisplayModeCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DisplayModeCreateFlagsKHR
    var parameters: DisplayModeParametersKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DisplayModeCreateFlagsKHR = zero_init[DisplayModeCreateFlagsKHR](),
        parameters: DisplayModeParametersKHR = zero_init[DisplayModeParametersKHR](),
    ):
        self.s_type = StructureType.DISPLAY_MODE_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.parameters = parameters


struct DisplayPlaneCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var supported_alpha: DisplayPlaneAlphaFlagsKHR
    var min_src_position: Offset2D
    var max_src_position: Offset2D
    var min_src_extent: Extent2D
    var max_src_extent: Extent2D
    var min_dst_position: Offset2D
    var max_dst_position: Offset2D
    var min_dst_extent: Extent2D
    var max_dst_extent: Extent2D

    fn __init__(
        out self,
        supported_alpha: DisplayPlaneAlphaFlagsKHR = zero_init[DisplayPlaneAlphaFlagsKHR](),
        min_src_position: Offset2D = zero_init[Offset2D](),
        max_src_position: Offset2D = zero_init[Offset2D](),
        min_src_extent: Extent2D = zero_init[Extent2D](),
        max_src_extent: Extent2D = zero_init[Extent2D](),
        min_dst_position: Offset2D = zero_init[Offset2D](),
        max_dst_position: Offset2D = zero_init[Offset2D](),
        min_dst_extent: Extent2D = zero_init[Extent2D](),
        max_dst_extent: Extent2D = zero_init[Extent2D](),
    ):
        self.supported_alpha = supported_alpha
        self.min_src_position = min_src_position
        self.max_src_position = max_src_position
        self.min_src_extent = min_src_extent
        self.max_src_extent = max_src_extent
        self.min_dst_position = min_dst_position
        self.max_dst_position = max_dst_position
        self.min_dst_extent = min_dst_extent
        self.max_dst_extent = max_dst_extent


struct DisplaySurfaceCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DisplaySurfaceCreateFlagsKHR
    var display_mode: DisplayModeKHR
    var plane_index: UInt32
    var plane_stack_index: UInt32
    var transform: SurfaceTransformFlagBitsKHR
    var global_alpha: Float32
    var alpha_mode: DisplayPlaneAlphaFlagBitsKHR
    var image_extent: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DisplaySurfaceCreateFlagsKHR = zero_init[DisplaySurfaceCreateFlagsKHR](),
        display_mode: DisplayModeKHR = zero_init[DisplayModeKHR](),
        plane_index: UInt32 = zero_init[UInt32](),
        plane_stack_index: UInt32 = zero_init[UInt32](),
        transform: SurfaceTransformFlagBitsKHR = zero_init[SurfaceTransformFlagBitsKHR](),
        global_alpha: Float32 = zero_init[Float32](),
        alpha_mode: DisplayPlaneAlphaFlagBitsKHR = zero_init[DisplayPlaneAlphaFlagBitsKHR](),
        image_extent: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.DISPLAY_SURFACE_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.display_mode = display_mode
        self.plane_index = plane_index
        self.plane_stack_index = plane_stack_index
        self.transform = transform
        self.global_alpha = global_alpha
        self.alpha_mode = alpha_mode
        self.image_extent = image_extent


struct DisplaySurfaceStereoCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stereo_type: DisplaySurfaceStereoTypeNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stereo_type: DisplaySurfaceStereoTypeNV = zero_init[DisplaySurfaceStereoTypeNV](),
    ):
        self.s_type = StructureType.DISPLAY_SURFACE_STEREO_CREATE_INFO_NV
        self.p_next = p_next
        self.stereo_type = stereo_type


struct DisplayPresentInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_rect: Rect2D
    var dst_rect: Rect2D
    var persistent: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_rect: Rect2D = zero_init[Rect2D](),
        dst_rect: Rect2D = zero_init[Rect2D](),
        persistent: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.DISPLAY_PRESENT_INFO_KHR
        self.p_next = p_next
        self.src_rect = src_rect
        self.dst_rect = dst_rect
        self.persistent = persistent


struct SurfaceCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var min_image_count: UInt32
    var max_image_count: UInt32
    var current_extent: Extent2D
    var min_image_extent: Extent2D
    var max_image_extent: Extent2D
    var max_image_array_layers: UInt32
    var supported_transforms: SurfaceTransformFlagsKHR
    var current_transform: SurfaceTransformFlagBitsKHR
    var supported_composite_alpha: CompositeAlphaFlagsKHR
    var supported_usage_flags: ImageUsageFlags

    fn __init__(
        out self,
        min_image_count: UInt32 = zero_init[UInt32](),
        max_image_count: UInt32 = zero_init[UInt32](),
        current_extent: Extent2D = zero_init[Extent2D](),
        min_image_extent: Extent2D = zero_init[Extent2D](),
        max_image_extent: Extent2D = zero_init[Extent2D](),
        max_image_array_layers: UInt32 = zero_init[UInt32](),
        supported_transforms: SurfaceTransformFlagsKHR = zero_init[SurfaceTransformFlagsKHR](),
        current_transform: SurfaceTransformFlagBitsKHR = zero_init[SurfaceTransformFlagBitsKHR](),
        supported_composite_alpha: CompositeAlphaFlagsKHR = zero_init[CompositeAlphaFlagsKHR](),
        supported_usage_flags: ImageUsageFlags = zero_init[ImageUsageFlags](),
    ):
        self.min_image_count = min_image_count
        self.max_image_count = max_image_count
        self.current_extent = current_extent
        self.min_image_extent = min_image_extent
        self.max_image_extent = max_image_extent
        self.max_image_array_layers = max_image_array_layers
        self.supported_transforms = supported_transforms
        self.current_transform = current_transform
        self.supported_composite_alpha = supported_composite_alpha
        self.supported_usage_flags = supported_usage_flags


struct AndroidSurfaceCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: AndroidSurfaceCreateFlagsKHR
    var window: Ptr[ANativeWindow]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: AndroidSurfaceCreateFlagsKHR = zero_init[AndroidSurfaceCreateFlagsKHR](),
        window: Ptr[ANativeWindow] = zero_init[Ptr[ANativeWindow]](),
    ):
        self.s_type = StructureType.ANDROID_SURFACE_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.window = window


struct ViSurfaceCreateInfoNN(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ViSurfaceCreateFlagsNN
    var window: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ViSurfaceCreateFlagsNN = zero_init[ViSurfaceCreateFlagsNN](),
        window: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.VI_SURFACE_CREATE_INFO_NN
        self.p_next = p_next
        self.flags = flags
        self.window = window


struct WaylandSurfaceCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: WaylandSurfaceCreateFlagsKHR
    var display: Ptr[wl_display]
    var surface: Ptr[wl_surface]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: WaylandSurfaceCreateFlagsKHR = zero_init[WaylandSurfaceCreateFlagsKHR](),
        display: Ptr[wl_display] = zero_init[Ptr[wl_display]](),
        surface: Ptr[wl_surface] = zero_init[Ptr[wl_surface]](),
    ):
        self.s_type = StructureType.WAYLAND_SURFACE_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.display = display
        self.surface = surface


struct Win32SurfaceCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: Win32SurfaceCreateFlagsKHR
    var hinstance: HINSTANCE
    var hwnd: HWND

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: Win32SurfaceCreateFlagsKHR = zero_init[Win32SurfaceCreateFlagsKHR](),
        hinstance: HINSTANCE = zero_init[HINSTANCE](),
        hwnd: HWND = zero_init[HWND](),
    ):
        self.s_type = StructureType.WIN32_SURFACE_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.hinstance = hinstance
        self.hwnd = hwnd


struct XlibSurfaceCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: XlibSurfaceCreateFlagsKHR
    var dpy: Ptr[Display]
    var window: Window

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: XlibSurfaceCreateFlagsKHR = zero_init[XlibSurfaceCreateFlagsKHR](),
        dpy: Ptr[Display] = zero_init[Ptr[Display]](),
        window: Window = zero_init[Window](),
    ):
        self.s_type = StructureType.XLIB_SURFACE_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.dpy = dpy
        self.window = window


struct XcbSurfaceCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: XcbSurfaceCreateFlagsKHR
    var connection: Ptr[xcb_connection_t]
    var window: xcb_window_t

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: XcbSurfaceCreateFlagsKHR = zero_init[XcbSurfaceCreateFlagsKHR](),
        connection: Ptr[xcb_connection_t] = zero_init[Ptr[xcb_connection_t]](),
        window: xcb_window_t = zero_init[xcb_window_t](),
    ):
        self.s_type = StructureType.XCB_SURFACE_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.connection = connection
        self.window = window


struct DirectFBSurfaceCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DirectFBSurfaceCreateFlagsEXT
    var dfb: Ptr[IDirectFB]
    var surface: Ptr[IDirectFBSurface]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DirectFBSurfaceCreateFlagsEXT = zero_init[DirectFBSurfaceCreateFlagsEXT](),
        dfb: Ptr[IDirectFB] = zero_init[Ptr[IDirectFB]](),
        surface: Ptr[IDirectFBSurface] = zero_init[Ptr[IDirectFBSurface]](),
    ):
        self.s_type = StructureType.DIRECTFB_SURFACE_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.dfb = dfb
        self.surface = surface


struct ImagePipeSurfaceCreateInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ImagePipeSurfaceCreateFlagsFUCHSIA
    var image_pipe_handle: zx_handle_t

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ImagePipeSurfaceCreateFlagsFUCHSIA = zero_init[ImagePipeSurfaceCreateFlagsFUCHSIA](),
        image_pipe_handle: zx_handle_t = zero_init[zx_handle_t](),
    ):
        self.s_type = StructureType.IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA
        self.p_next = p_next
        self.flags = flags
        self.image_pipe_handle = image_pipe_handle


struct StreamDescriptorSurfaceCreateInfoGGP(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: StreamDescriptorSurfaceCreateFlagsGGP
    var stream_descriptor: GgpStreamDescriptor

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: StreamDescriptorSurfaceCreateFlagsGGP = zero_init[StreamDescriptorSurfaceCreateFlagsGGP](),
        stream_descriptor: GgpStreamDescriptor = zero_init[GgpStreamDescriptor](),
    ):
        self.s_type = StructureType.STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP
        self.p_next = p_next
        self.flags = flags
        self.stream_descriptor = stream_descriptor


struct ScreenSurfaceCreateInfoQNX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ScreenSurfaceCreateFlagsQNX
    var context: screen_context_t
    var window: screen_window_t

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ScreenSurfaceCreateFlagsQNX = zero_init[ScreenSurfaceCreateFlagsQNX](),
        context: screen_context_t = zero_init[screen_context_t](),
        window: screen_window_t = zero_init[screen_window_t](),
    ):
        self.s_type = StructureType.SCREEN_SURFACE_CREATE_INFO_QNX
        self.p_next = p_next
        self.flags = flags
        self.context = context
        self.window = window


struct SurfaceFormatKHR(ImplicitlyCopyable, Movable):
    var format: Format
    var color_space: ColorSpaceKHR

    fn __init__(
        out self,
        format: Format = zero_init[Format](),
        color_space: ColorSpaceKHR = zero_init[ColorSpaceKHR](),
    ):
        self.format = format
        self.color_space = color_space


struct SwapchainCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: SwapchainCreateFlagsKHR
    var surface: SurfaceKHR
    var min_image_count: UInt32
    var image_format: Format
    var image_color_space: ColorSpaceKHR
    var image_extent: Extent2D
    var image_array_layers: UInt32
    var image_usage: ImageUsageFlags
    var image_sharing_mode: SharingMode
    var queue_family_index_count: UInt32
    var p_queue_family_indices: Ptr[UInt32]
    var pre_transform: SurfaceTransformFlagBitsKHR
    var composite_alpha: CompositeAlphaFlagBitsKHR
    var present_mode: PresentModeKHR
    var clipped: Bool32
    var old_swapchain: SwapchainKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: SwapchainCreateFlagsKHR = zero_init[SwapchainCreateFlagsKHR](),
        surface: SurfaceKHR = zero_init[SurfaceKHR](),
        min_image_count: UInt32 = zero_init[UInt32](),
        image_format: Format = zero_init[Format](),
        image_color_space: ColorSpaceKHR = zero_init[ColorSpaceKHR](),
        image_extent: Extent2D = zero_init[Extent2D](),
        image_array_layers: UInt32 = zero_init[UInt32](),
        image_usage: ImageUsageFlags = zero_init[ImageUsageFlags](),
        image_sharing_mode: SharingMode = zero_init[SharingMode](),
        queue_family_index_count: UInt32 = zero_init[UInt32](),
        p_queue_family_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        pre_transform: SurfaceTransformFlagBitsKHR = zero_init[SurfaceTransformFlagBitsKHR](),
        composite_alpha: CompositeAlphaFlagBitsKHR = zero_init[CompositeAlphaFlagBitsKHR](),
        present_mode: PresentModeKHR = zero_init[PresentModeKHR](),
        clipped: Bool32 = zero_init[Bool32](),
        old_swapchain: SwapchainKHR = zero_init[SwapchainKHR](),
    ):
        self.s_type = StructureType.SWAPCHAIN_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.surface = surface
        self.min_image_count = min_image_count
        self.image_format = image_format
        self.image_color_space = image_color_space
        self.image_extent = image_extent
        self.image_array_layers = image_array_layers
        self.image_usage = image_usage
        self.image_sharing_mode = image_sharing_mode
        self.queue_family_index_count = queue_family_index_count
        self.p_queue_family_indices = p_queue_family_indices
        self.pre_transform = pre_transform
        self.composite_alpha = composite_alpha
        self.present_mode = present_mode
        self.clipped = clipped
        self.old_swapchain = old_swapchain


struct PresentInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var wait_semaphore_count: UInt32
    var p_wait_semaphores: Ptr[Semaphore]
    var swapchain_count: UInt32
    var p_swapchains: Ptr[SwapchainKHR]
    var p_image_indices: Ptr[UInt32]
    var p_results: Ptr[Result]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        wait_semaphore_count: UInt32 = zero_init[UInt32](),
        p_wait_semaphores: Ptr[Semaphore] = zero_init[Ptr[Semaphore]](),
        swapchain_count: UInt32 = zero_init[UInt32](),
        p_swapchains: Ptr[SwapchainKHR] = zero_init[Ptr[SwapchainKHR]](),
        p_image_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        p_results: Ptr[Result] = zero_init[Ptr[Result]](),
    ):
        self.s_type = StructureType.PRESENT_INFO_KHR
        self.p_next = p_next
        self.wait_semaphore_count = wait_semaphore_count
        self.p_wait_semaphores = p_wait_semaphores
        self.swapchain_count = swapchain_count
        self.p_swapchains = p_swapchains
        self.p_image_indices = p_image_indices
        self.p_results = p_results


struct DebugReportCallbackCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DebugReportFlagsEXT
    var pfn_callback: PFN_vkDebugReportCallbackEXT
    var p_user_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DebugReportFlagsEXT = zero_init[DebugReportFlagsEXT](),
        pfn_callback: PFN_vkDebugReportCallbackEXT = zero_init[PFN_vkDebugReportCallbackEXT](),
        p_user_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.pfn_callback = pfn_callback
        self.p_user_data = p_user_data


struct ValidationFlagsEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var disabled_validation_check_count: UInt32
    var p_disabled_validation_checks: Ptr[ValidationCheckEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        disabled_validation_check_count: UInt32 = zero_init[UInt32](),
        p_disabled_validation_checks: Ptr[ValidationCheckEXT] = zero_init[Ptr[ValidationCheckEXT]](),
    ):
        self.s_type = StructureType.VALIDATION_FLAGS_EXT
        self.p_next = p_next
        self.disabled_validation_check_count = disabled_validation_check_count
        self.p_disabled_validation_checks = p_disabled_validation_checks


struct ValidationFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var enabled_validation_feature_count: UInt32
    var p_enabled_validation_features: Ptr[ValidationFeatureEnableEXT]
    var disabled_validation_feature_count: UInt32
    var p_disabled_validation_features: Ptr[ValidationFeatureDisableEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        enabled_validation_feature_count: UInt32 = zero_init[UInt32](),
        p_enabled_validation_features: Ptr[ValidationFeatureEnableEXT] = zero_init[Ptr[ValidationFeatureEnableEXT]](),
        disabled_validation_feature_count: UInt32 = zero_init[UInt32](),
        p_disabled_validation_features: Ptr[ValidationFeatureDisableEXT] = zero_init[Ptr[ValidationFeatureDisableEXT]](),
    ):
        self.s_type = StructureType.VALIDATION_FEATURES_EXT
        self.p_next = p_next
        self.enabled_validation_feature_count = enabled_validation_feature_count
        self.p_enabled_validation_features = p_enabled_validation_features
        self.disabled_validation_feature_count = disabled_validation_feature_count
        self.p_disabled_validation_features = p_disabled_validation_features


struct LayerSettingsCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var setting_count: UInt32
    var p_settings: Ptr[LayerSettingEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        setting_count: UInt32 = zero_init[UInt32](),
        p_settings: Ptr[LayerSettingEXT] = zero_init[Ptr[LayerSettingEXT]](),
    ):
        self.s_type = StructureType.LAYER_SETTINGS_CREATE_INFO_EXT
        self.p_next = p_next
        self.setting_count = setting_count
        self.p_settings = p_settings


struct LayerSettingEXT(ImplicitlyCopyable, Movable):
    var p_layer_name: Ptr[UInt8]
    var p_setting_name: Ptr[UInt8]
    var type: LayerSettingTypeEXT
    var value_count: UInt32
    var p_values: Ptr[NoneType]

    fn __init__(
        out self,
        p_layer_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        p_setting_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        type: LayerSettingTypeEXT = zero_init[LayerSettingTypeEXT](),
        value_count: UInt32 = zero_init[UInt32](),
        p_values: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.p_layer_name = p_layer_name
        self.p_setting_name = p_setting_name
        self.type = type
        self.value_count = value_count
        self.p_values = p_values


struct ApplicationParametersEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vendor_id: UInt32
    var device_id: UInt32
    var key: UInt32
    var value: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vendor_id: UInt32 = zero_init[UInt32](),
        device_id: UInt32 = zero_init[UInt32](),
        key: UInt32 = zero_init[UInt32](),
        value: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.APPLICATION_PARAMETERS_EXT
        self.p_next = p_next
        self.vendor_id = vendor_id
        self.device_id = device_id
        self.key = key
        self.value = value


struct PipelineRasterizationStateRasterizationOrderAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var rasterization_order: RasterizationOrderAMD

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        rasterization_order: RasterizationOrderAMD = zero_init[RasterizationOrderAMD](),
    ):
        self.s_type = StructureType.PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD
        self.p_next = p_next
        self.rasterization_order = rasterization_order


struct DebugMarkerObjectNameInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var object_type: DebugReportObjectTypeEXT
    var object: UInt64
    var p_object_name: Ptr[UInt8]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        object_type: DebugReportObjectTypeEXT = zero_init[DebugReportObjectTypeEXT](),
        object: UInt64 = zero_init[UInt64](),
        p_object_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
    ):
        self.s_type = StructureType.DEBUG_MARKER_OBJECT_NAME_INFO_EXT
        self.p_next = p_next
        self.object_type = object_type
        self.object = object
        self.p_object_name = p_object_name


struct DebugMarkerObjectTagInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var object_type: DebugReportObjectTypeEXT
    var object: UInt64
    var tag_name: UInt64
    var tag_size: UInt
    var p_tag: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        object_type: DebugReportObjectTypeEXT = zero_init[DebugReportObjectTypeEXT](),
        object: UInt64 = zero_init[UInt64](),
        tag_name: UInt64 = zero_init[UInt64](),
        tag_size: UInt = zero_init[UInt](),
        p_tag: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.DEBUG_MARKER_OBJECT_TAG_INFO_EXT
        self.p_next = p_next
        self.object_type = object_type
        self.object = object
        self.tag_name = tag_name
        self.tag_size = tag_size
        self.p_tag = p_tag


struct DebugMarkerMarkerInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_marker_name: Ptr[UInt8]
    var color: InlineArray[Float32, Int(4)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_marker_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        color: InlineArray[Float32, Int(4)] = zero_init[InlineArray[Float32, Int(4)]](),
    ):
        self.s_type = StructureType.DEBUG_MARKER_MARKER_INFO_EXT
        self.p_next = p_next
        self.p_marker_name = p_marker_name
        self.color = color


struct DedicatedAllocationImageCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dedicated_allocation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dedicated_allocation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV
        self.p_next = p_next
        self.dedicated_allocation = dedicated_allocation


struct DedicatedAllocationBufferCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dedicated_allocation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dedicated_allocation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV
        self.p_next = p_next
        self.dedicated_allocation = dedicated_allocation


struct DedicatedAllocationMemoryAllocateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image: Image
    var buffer: Buffer

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image: Image = zero_init[Image](),
        buffer: Buffer = zero_init[Buffer](),
    ):
        self.s_type = StructureType.DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV
        self.p_next = p_next
        self.image = image
        self.buffer = buffer


struct ExternalImageFormatPropertiesNV(ImplicitlyCopyable, Movable):
    var image_format_properties: ImageFormatProperties
    var external_memory_features: ExternalMemoryFeatureFlagsNV
    var export_from_imported_handle_types: ExternalMemoryHandleTypeFlagsNV
    var compatible_handle_types: ExternalMemoryHandleTypeFlagsNV

    fn __init__(
        out self,
        image_format_properties: ImageFormatProperties = zero_init[ImageFormatProperties](),
        external_memory_features: ExternalMemoryFeatureFlagsNV = zero_init[ExternalMemoryFeatureFlagsNV](),
        export_from_imported_handle_types: ExternalMemoryHandleTypeFlagsNV = zero_init[ExternalMemoryHandleTypeFlagsNV](),
        compatible_handle_types: ExternalMemoryHandleTypeFlagsNV = zero_init[ExternalMemoryHandleTypeFlagsNV](),
    ):
        self.image_format_properties = image_format_properties
        self.external_memory_features = external_memory_features
        self.export_from_imported_handle_types = export_from_imported_handle_types
        self.compatible_handle_types = compatible_handle_types


struct ExternalMemoryImageCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_types: ExternalMemoryHandleTypeFlagsNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_types: ExternalMemoryHandleTypeFlagsNV = zero_init[ExternalMemoryHandleTypeFlagsNV](),
    ):
        self.s_type = StructureType.EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV
        self.p_next = p_next
        self.handle_types = handle_types


struct ExportMemoryAllocateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_types: ExternalMemoryHandleTypeFlagsNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_types: ExternalMemoryHandleTypeFlagsNV = zero_init[ExternalMemoryHandleTypeFlagsNV](),
    ):
        self.s_type = StructureType.EXPORT_MEMORY_ALLOCATE_INFO_NV
        self.p_next = p_next
        self.handle_types = handle_types


struct ImportMemoryWin32HandleInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalMemoryHandleTypeFlagsNV
    var handle: HANDLE

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalMemoryHandleTypeFlagsNV = zero_init[ExternalMemoryHandleTypeFlagsNV](),
        handle: HANDLE = zero_init[HANDLE](),
    ):
        self.s_type = StructureType.IMPORT_MEMORY_WIN32_HANDLE_INFO_NV
        self.p_next = p_next
        self.handle_type = handle_type
        self.handle = handle


struct ExportMemoryWin32HandleInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_attributes: Ptr[SECURITY_ATTRIBUTES]
    var dw_access: DWORD

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_attributes: Ptr[SECURITY_ATTRIBUTES] = zero_init[Ptr[SECURITY_ATTRIBUTES]](),
        dw_access: DWORD = zero_init[DWORD](),
    ):
        self.s_type = StructureType.EXPORT_MEMORY_WIN32_HANDLE_INFO_NV
        self.p_next = p_next
        self.p_attributes = p_attributes
        self.dw_access = dw_access


struct ExportMemorySciBufInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_attributes: NvSciBufAttrList

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_attributes: NvSciBufAttrList = zero_init[NvSciBufAttrList](),
    ):
        self.s_type = StructureType.EXPORT_MEMORY_SCI_BUF_INFO_NV
        self.p_next = p_next
        self.p_attributes = p_attributes


struct ImportMemorySciBufInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalMemoryHandleTypeFlagBits
    var handle: NvSciBufObj

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
        handle: NvSciBufObj = zero_init[NvSciBufObj](),
    ):
        self.s_type = StructureType.IMPORT_MEMORY_SCI_BUF_INFO_NV
        self.p_next = p_next
        self.handle_type = handle_type
        self.handle = handle


struct MemoryGetSciBufInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory
    var handle_type: ExternalMemoryHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.MEMORY_GET_SCI_BUF_INFO_NV
        self.p_next = p_next
        self.memory = memory
        self.handle_type = handle_type


struct MemorySciBufPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_type_bits: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.MEMORY_SCI_BUF_PROPERTIES_NV
        self.p_next = p_next
        self.memory_type_bits = memory_type_bits


struct PhysicalDeviceExternalMemorySciBufFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sci_buf_import: Bool32
    var sci_buf_export: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sci_buf_import: Bool32 = zero_init[Bool32](),
        sci_buf_export: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCI_BUF_FEATURES_NV
        self.p_next = p_next
        self.sci_buf_import = sci_buf_import
        self.sci_buf_export = sci_buf_export


struct Win32KeyedMutexAcquireReleaseInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acquire_count: UInt32
    var p_acquire_syncs: Ptr[DeviceMemory]
    var p_acquire_keys: Ptr[UInt64]
    var p_acquire_timeout_milliseconds: Ptr[UInt32]
    var release_count: UInt32
    var p_release_syncs: Ptr[DeviceMemory]
    var p_release_keys: Ptr[UInt64]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acquire_count: UInt32 = zero_init[UInt32](),
        p_acquire_syncs: Ptr[DeviceMemory] = zero_init[Ptr[DeviceMemory]](),
        p_acquire_keys: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
        p_acquire_timeout_milliseconds: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        release_count: UInt32 = zero_init[UInt32](),
        p_release_syncs: Ptr[DeviceMemory] = zero_init[Ptr[DeviceMemory]](),
        p_release_keys: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
    ):
        self.s_type = StructureType.WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV
        self.p_next = p_next
        self.acquire_count = acquire_count
        self.p_acquire_syncs = p_acquire_syncs
        self.p_acquire_keys = p_acquire_keys
        self.p_acquire_timeout_milliseconds = p_acquire_timeout_milliseconds
        self.release_count = release_count
        self.p_release_syncs = p_release_syncs
        self.p_release_keys = p_release_keys


struct PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_generated_commands: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_generated_commands: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV
        self.p_next = p_next
        self.device_generated_commands = device_generated_commands


struct PhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_generated_compute: Bool32
    var device_generated_compute_pipelines: Bool32
    var device_generated_compute_capture_replay: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_generated_compute: Bool32 = zero_init[Bool32](),
        device_generated_compute_pipelines: Bool32 = zero_init[Bool32](),
        device_generated_compute_capture_replay: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV
        self.p_next = p_next
        self.device_generated_compute = device_generated_compute
        self.device_generated_compute_pipelines = device_generated_compute_pipelines
        self.device_generated_compute_capture_replay = device_generated_compute_capture_replay


struct DevicePrivateDataCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var private_data_slot_request_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        private_data_slot_request_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DEVICE_PRIVATE_DATA_CREATE_INFO
        self.p_next = p_next
        self.private_data_slot_request_count = private_data_slot_request_count


struct PrivateDataSlotCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PrivateDataSlotCreateFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PrivateDataSlotCreateFlags = zero_init[PrivateDataSlotCreateFlags](),
    ):
        self.s_type = StructureType.PRIVATE_DATA_SLOT_CREATE_INFO
        self.p_next = p_next
        self.flags = flags


struct PhysicalDevicePrivateDataFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var private_data: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        private_data: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES
        self.p_next = p_next
        self.private_data = private_data


struct PhysicalDeviceDeviceGeneratedCommandsPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_graphics_shader_group_count: UInt32
    var max_indirect_sequence_count: UInt32
    var max_indirect_commands_token_count: UInt32
    var max_indirect_commands_stream_count: UInt32
    var max_indirect_commands_token_offset: UInt32
    var max_indirect_commands_stream_stride: UInt32
    var min_sequences_count_buffer_offset_alignment: UInt32
    var min_sequences_index_buffer_offset_alignment: UInt32
    var min_indirect_commands_buffer_offset_alignment: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_graphics_shader_group_count: UInt32 = zero_init[UInt32](),
        max_indirect_sequence_count: UInt32 = zero_init[UInt32](),
        max_indirect_commands_token_count: UInt32 = zero_init[UInt32](),
        max_indirect_commands_stream_count: UInt32 = zero_init[UInt32](),
        max_indirect_commands_token_offset: UInt32 = zero_init[UInt32](),
        max_indirect_commands_stream_stride: UInt32 = zero_init[UInt32](),
        min_sequences_count_buffer_offset_alignment: UInt32 = zero_init[UInt32](),
        min_sequences_index_buffer_offset_alignment: UInt32 = zero_init[UInt32](),
        min_indirect_commands_buffer_offset_alignment: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV
        self.p_next = p_next
        self.max_graphics_shader_group_count = max_graphics_shader_group_count
        self.max_indirect_sequence_count = max_indirect_sequence_count
        self.max_indirect_commands_token_count = max_indirect_commands_token_count
        self.max_indirect_commands_stream_count = max_indirect_commands_stream_count
        self.max_indirect_commands_token_offset = max_indirect_commands_token_offset
        self.max_indirect_commands_stream_stride = max_indirect_commands_stream_stride
        self.min_sequences_count_buffer_offset_alignment = min_sequences_count_buffer_offset_alignment
        self.min_sequences_index_buffer_offset_alignment = min_sequences_index_buffer_offset_alignment
        self.min_indirect_commands_buffer_offset_alignment = min_indirect_commands_buffer_offset_alignment


struct PhysicalDeviceClusterAccelerationStructureFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cluster_acceleration_structure: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cluster_acceleration_structure: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV
        self.p_next = p_next
        self.cluster_acceleration_structure = cluster_acceleration_structure


struct PhysicalDeviceClusterAccelerationStructurePropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_vertices_per_cluster: UInt32
    var max_triangles_per_cluster: UInt32
    var cluster_scratch_byte_alignment: UInt32
    var cluster_byte_alignment: UInt32
    var cluster_template_byte_alignment: UInt32
    var cluster_bottom_level_byte_alignment: UInt32
    var cluster_template_bounds_byte_alignment: UInt32
    var max_cluster_geometry_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_vertices_per_cluster: UInt32 = zero_init[UInt32](),
        max_triangles_per_cluster: UInt32 = zero_init[UInt32](),
        cluster_scratch_byte_alignment: UInt32 = zero_init[UInt32](),
        cluster_byte_alignment: UInt32 = zero_init[UInt32](),
        cluster_template_byte_alignment: UInt32 = zero_init[UInt32](),
        cluster_bottom_level_byte_alignment: UInt32 = zero_init[UInt32](),
        cluster_template_bounds_byte_alignment: UInt32 = zero_init[UInt32](),
        max_cluster_geometry_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_PROPERTIES_NV
        self.p_next = p_next
        self.max_vertices_per_cluster = max_vertices_per_cluster
        self.max_triangles_per_cluster = max_triangles_per_cluster
        self.cluster_scratch_byte_alignment = cluster_scratch_byte_alignment
        self.cluster_byte_alignment = cluster_byte_alignment
        self.cluster_template_byte_alignment = cluster_template_byte_alignment
        self.cluster_bottom_level_byte_alignment = cluster_bottom_level_byte_alignment
        self.cluster_template_bounds_byte_alignment = cluster_template_bounds_byte_alignment
        self.max_cluster_geometry_index = max_cluster_geometry_index


struct StridedDeviceAddressNV(ImplicitlyCopyable, Movable):
    var start_address: DeviceAddress
    var stride_in_bytes: DeviceSize

    fn __init__(
        out self,
        start_address: DeviceAddress = zero_init[DeviceAddress](),
        stride_in_bytes: DeviceSize = zero_init[DeviceSize](),
    ):
        self.start_address = start_address
        self.stride_in_bytes = stride_in_bytes


struct RayTracingPipelineClusterAccelerationStructureCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var allow_cluster_acceleration_structure: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        allow_cluster_acceleration_structure: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.RAY_TRACING_PIPELINE_CLUSTER_ACCELERATION_STRUCTURE_CREATE_INFO_NV
        self.p_next = p_next
        self.allow_cluster_acceleration_structure = allow_cluster_acceleration_structure


struct ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV(ImplicitlyCopyable, Movable):
    var geometry_index: UInt32
    var reserved: UInt32
    var geometry_flags: UInt32

    fn __init__(
        out self,
        geometry_index: UInt32 = zero_init[UInt32](),
        reserved: UInt32 = zero_init[UInt32](),
        geometry_flags: UInt32 = zero_init[UInt32](),
    ):
        self.geometry_index = geometry_index
        self.reserved = reserved
        self.geometry_flags = geometry_flags


struct ClusterAccelerationStructureMoveObjectsInfoNV(ImplicitlyCopyable, Movable):
    var src_acceleration_structure: DeviceAddress

    fn __init__(
        out self,
        src_acceleration_structure: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.src_acceleration_structure = src_acceleration_structure


struct ClusterAccelerationStructureBuildClustersBottomLevelInfoNV(ImplicitlyCopyable, Movable):
    var cluster_references_count: UInt32
    var cluster_references_stride: UInt32
    var cluster_references: DeviceAddress

    fn __init__(
        out self,
        cluster_references_count: UInt32 = zero_init[UInt32](),
        cluster_references_stride: UInt32 = zero_init[UInt32](),
        cluster_references: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.cluster_references_count = cluster_references_count
        self.cluster_references_stride = cluster_references_stride
        self.cluster_references = cluster_references


struct ClusterAccelerationStructureGetTemplateIndicesInfoNV(ImplicitlyCopyable, Movable):
    var cluster_template_address: DeviceAddress

    fn __init__(
        out self,
        cluster_template_address: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.cluster_template_address = cluster_template_address


struct ClusterAccelerationStructureBuildTriangleClusterInfoNV(ImplicitlyCopyable, Movable):
    var cluster_id: UInt32
    var cluster_flags: ClusterAccelerationStructureClusterFlagsNV
    var triangle_count: UInt32
    var vertex_count: UInt32
    var position_truncate_bit_count: UInt32
    var index_type: UInt32
    var opacity_micromap_index_type: UInt32
    var base_geometry_index_and_geometry_flags: ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV
    var index_buffer_stride: UInt16
    var vertex_buffer_stride: UInt16
    var geometry_index_and_flags_buffer_stride: UInt16
    var opacity_micromap_index_buffer_stride: UInt16
    var index_buffer: DeviceAddress
    var vertex_buffer: DeviceAddress
    var geometry_index_and_flags_buffer: DeviceAddress
    var opacity_micromap_array: DeviceAddress
    var opacity_micromap_index_buffer: DeviceAddress

    fn __init__(
        out self,
        cluster_id: UInt32 = zero_init[UInt32](),
        cluster_flags: ClusterAccelerationStructureClusterFlagsNV = zero_init[ClusterAccelerationStructureClusterFlagsNV](),
        triangle_count: UInt32 = zero_init[UInt32](),
        vertex_count: UInt32 = zero_init[UInt32](),
        position_truncate_bit_count: UInt32 = zero_init[UInt32](),
        index_type: UInt32 = zero_init[UInt32](),
        opacity_micromap_index_type: UInt32 = zero_init[UInt32](),
        base_geometry_index_and_geometry_flags: ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV = zero_init[ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV](),
        index_buffer_stride: UInt16 = zero_init[UInt16](),
        vertex_buffer_stride: UInt16 = zero_init[UInt16](),
        geometry_index_and_flags_buffer_stride: UInt16 = zero_init[UInt16](),
        opacity_micromap_index_buffer_stride: UInt16 = zero_init[UInt16](),
        index_buffer: DeviceAddress = zero_init[DeviceAddress](),
        vertex_buffer: DeviceAddress = zero_init[DeviceAddress](),
        geometry_index_and_flags_buffer: DeviceAddress = zero_init[DeviceAddress](),
        opacity_micromap_array: DeviceAddress = zero_init[DeviceAddress](),
        opacity_micromap_index_buffer: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.cluster_id = cluster_id
        self.cluster_flags = cluster_flags
        self.triangle_count = triangle_count
        self.vertex_count = vertex_count
        self.position_truncate_bit_count = position_truncate_bit_count
        self.index_type = index_type
        self.opacity_micromap_index_type = opacity_micromap_index_type
        self.base_geometry_index_and_geometry_flags = base_geometry_index_and_geometry_flags
        self.index_buffer_stride = index_buffer_stride
        self.vertex_buffer_stride = vertex_buffer_stride
        self.geometry_index_and_flags_buffer_stride = geometry_index_and_flags_buffer_stride
        self.opacity_micromap_index_buffer_stride = opacity_micromap_index_buffer_stride
        self.index_buffer = index_buffer
        self.vertex_buffer = vertex_buffer
        self.geometry_index_and_flags_buffer = geometry_index_and_flags_buffer
        self.opacity_micromap_array = opacity_micromap_array
        self.opacity_micromap_index_buffer = opacity_micromap_index_buffer


struct ClusterAccelerationStructureBuildTriangleClusterTemplateInfoNV(ImplicitlyCopyable, Movable):
    var cluster_id: UInt32
    var cluster_flags: ClusterAccelerationStructureClusterFlagsNV
    var triangle_count: UInt32
    var vertex_count: UInt32
    var position_truncate_bit_count: UInt32
    var index_type: UInt32
    var opacity_micromap_index_type: UInt32
    var base_geometry_index_and_geometry_flags: ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV
    var index_buffer_stride: UInt16
    var vertex_buffer_stride: UInt16
    var geometry_index_and_flags_buffer_stride: UInt16
    var opacity_micromap_index_buffer_stride: UInt16
    var index_buffer: DeviceAddress
    var vertex_buffer: DeviceAddress
    var geometry_index_and_flags_buffer: DeviceAddress
    var opacity_micromap_array: DeviceAddress
    var opacity_micromap_index_buffer: DeviceAddress
    var instantiation_bounding_box_limit: DeviceAddress

    fn __init__(
        out self,
        cluster_id: UInt32 = zero_init[UInt32](),
        cluster_flags: ClusterAccelerationStructureClusterFlagsNV = zero_init[ClusterAccelerationStructureClusterFlagsNV](),
        triangle_count: UInt32 = zero_init[UInt32](),
        vertex_count: UInt32 = zero_init[UInt32](),
        position_truncate_bit_count: UInt32 = zero_init[UInt32](),
        index_type: UInt32 = zero_init[UInt32](),
        opacity_micromap_index_type: UInt32 = zero_init[UInt32](),
        base_geometry_index_and_geometry_flags: ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV = zero_init[ClusterAccelerationStructureGeometryIndexAndGeometryFlagsNV](),
        index_buffer_stride: UInt16 = zero_init[UInt16](),
        vertex_buffer_stride: UInt16 = zero_init[UInt16](),
        geometry_index_and_flags_buffer_stride: UInt16 = zero_init[UInt16](),
        opacity_micromap_index_buffer_stride: UInt16 = zero_init[UInt16](),
        index_buffer: DeviceAddress = zero_init[DeviceAddress](),
        vertex_buffer: DeviceAddress = zero_init[DeviceAddress](),
        geometry_index_and_flags_buffer: DeviceAddress = zero_init[DeviceAddress](),
        opacity_micromap_array: DeviceAddress = zero_init[DeviceAddress](),
        opacity_micromap_index_buffer: DeviceAddress = zero_init[DeviceAddress](),
        instantiation_bounding_box_limit: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.cluster_id = cluster_id
        self.cluster_flags = cluster_flags
        self.triangle_count = triangle_count
        self.vertex_count = vertex_count
        self.position_truncate_bit_count = position_truncate_bit_count
        self.index_type = index_type
        self.opacity_micromap_index_type = opacity_micromap_index_type
        self.base_geometry_index_and_geometry_flags = base_geometry_index_and_geometry_flags
        self.index_buffer_stride = index_buffer_stride
        self.vertex_buffer_stride = vertex_buffer_stride
        self.geometry_index_and_flags_buffer_stride = geometry_index_and_flags_buffer_stride
        self.opacity_micromap_index_buffer_stride = opacity_micromap_index_buffer_stride
        self.index_buffer = index_buffer
        self.vertex_buffer = vertex_buffer
        self.geometry_index_and_flags_buffer = geometry_index_and_flags_buffer
        self.opacity_micromap_array = opacity_micromap_array
        self.opacity_micromap_index_buffer = opacity_micromap_index_buffer
        self.instantiation_bounding_box_limit = instantiation_bounding_box_limit


struct ClusterAccelerationStructureInstantiateClusterInfoNV(ImplicitlyCopyable, Movable):
    var cluster_id_offset: UInt32
    var geometry_index_offset: UInt32
    var reserved: UInt32
    var cluster_template_address: DeviceAddress
    var vertex_buffer: StridedDeviceAddressNV

    fn __init__(
        out self,
        cluster_id_offset: UInt32 = zero_init[UInt32](),
        geometry_index_offset: UInt32 = zero_init[UInt32](),
        reserved: UInt32 = zero_init[UInt32](),
        cluster_template_address: DeviceAddress = zero_init[DeviceAddress](),
        vertex_buffer: StridedDeviceAddressNV = zero_init[StridedDeviceAddressNV](),
    ):
        self.cluster_id_offset = cluster_id_offset
        self.geometry_index_offset = geometry_index_offset
        self.reserved = reserved
        self.cluster_template_address = cluster_template_address
        self.vertex_buffer = vertex_buffer


struct ClusterAccelerationStructureClustersBottomLevelInputNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_total_cluster_count: UInt32
    var max_cluster_count_per_acceleration_structure: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_total_cluster_count: UInt32 = zero_init[UInt32](),
        max_cluster_count_per_acceleration_structure: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.CLUSTER_ACCELERATION_STRUCTURE_CLUSTERS_BOTTOM_LEVEL_INPUT_NV
        self.p_next = p_next
        self.max_total_cluster_count = max_total_cluster_count
        self.max_cluster_count_per_acceleration_structure = max_cluster_count_per_acceleration_structure


struct ClusterAccelerationStructureTriangleClusterInputNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_format: Format
    var max_geometry_index_value: UInt32
    var max_cluster_unique_geometry_count: UInt32
    var max_cluster_triangle_count: UInt32
    var max_cluster_vertex_count: UInt32
    var max_total_triangle_count: UInt32
    var max_total_vertex_count: UInt32
    var min_position_truncate_bit_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_format: Format = zero_init[Format](),
        max_geometry_index_value: UInt32 = zero_init[UInt32](),
        max_cluster_unique_geometry_count: UInt32 = zero_init[UInt32](),
        max_cluster_triangle_count: UInt32 = zero_init[UInt32](),
        max_cluster_vertex_count: UInt32 = zero_init[UInt32](),
        max_total_triangle_count: UInt32 = zero_init[UInt32](),
        max_total_vertex_count: UInt32 = zero_init[UInt32](),
        min_position_truncate_bit_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.CLUSTER_ACCELERATION_STRUCTURE_TRIANGLE_CLUSTER_INPUT_NV
        self.p_next = p_next
        self.vertex_format = vertex_format
        self.max_geometry_index_value = max_geometry_index_value
        self.max_cluster_unique_geometry_count = max_cluster_unique_geometry_count
        self.max_cluster_triangle_count = max_cluster_triangle_count
        self.max_cluster_vertex_count = max_cluster_vertex_count
        self.max_total_triangle_count = max_total_triangle_count
        self.max_total_vertex_count = max_total_vertex_count
        self.min_position_truncate_bit_count = min_position_truncate_bit_count


struct ClusterAccelerationStructureMoveObjectsInputNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: ClusterAccelerationStructureTypeNV
    var no_move_overlap: Bool32
    var max_moved_bytes: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: ClusterAccelerationStructureTypeNV = zero_init[ClusterAccelerationStructureTypeNV](),
        no_move_overlap: Bool32 = zero_init[Bool32](),
        max_moved_bytes: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.CLUSTER_ACCELERATION_STRUCTURE_MOVE_OBJECTS_INPUT_NV
        self.p_next = p_next
        self.type = type
        self.no_move_overlap = no_move_overlap
        self.max_moved_bytes = max_moved_bytes


struct ClusterAccelerationStructureInputInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_acceleration_structure_count: UInt32
    var flags: BuildAccelerationStructureFlagsKHR
    var op_type: ClusterAccelerationStructureOpTypeNV
    var op_mode: ClusterAccelerationStructureOpModeNV
    var op_input: ClusterAccelerationStructureOpInputNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_acceleration_structure_count: UInt32 = zero_init[UInt32](),
        flags: BuildAccelerationStructureFlagsKHR = zero_init[BuildAccelerationStructureFlagsKHR](),
        op_type: ClusterAccelerationStructureOpTypeNV = zero_init[ClusterAccelerationStructureOpTypeNV](),
        op_mode: ClusterAccelerationStructureOpModeNV = zero_init[ClusterAccelerationStructureOpModeNV](),
        op_input: ClusterAccelerationStructureOpInputNV = zero_init[ClusterAccelerationStructureOpInputNV](),
    ):
        self.s_type = StructureType.CLUSTER_ACCELERATION_STRUCTURE_INPUT_INFO_NV
        self.p_next = p_next
        self.max_acceleration_structure_count = max_acceleration_structure_count
        self.flags = flags
        self.op_type = op_type
        self.op_mode = op_mode
        self.op_input = op_input


struct ClusterAccelerationStructureCommandsInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var input: ClusterAccelerationStructureInputInfoNV
    var dst_implicit_data: DeviceAddress
    var scratch_data: DeviceAddress
    var dst_addresses_array: StridedDeviceAddressRegionKHR
    var dst_sizes_array: StridedDeviceAddressRegionKHR
    var src_infos_array: StridedDeviceAddressRegionKHR
    var src_infos_count: DeviceAddress
    var address_resolution_flags: ClusterAccelerationStructureAddressResolutionFlagsNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        input: ClusterAccelerationStructureInputInfoNV = zero_init[ClusterAccelerationStructureInputInfoNV](),
        dst_implicit_data: DeviceAddress = zero_init[DeviceAddress](),
        scratch_data: DeviceAddress = zero_init[DeviceAddress](),
        dst_addresses_array: StridedDeviceAddressRegionKHR = zero_init[StridedDeviceAddressRegionKHR](),
        dst_sizes_array: StridedDeviceAddressRegionKHR = zero_init[StridedDeviceAddressRegionKHR](),
        src_infos_array: StridedDeviceAddressRegionKHR = zero_init[StridedDeviceAddressRegionKHR](),
        src_infos_count: DeviceAddress = zero_init[DeviceAddress](),
        address_resolution_flags: ClusterAccelerationStructureAddressResolutionFlagsNV = zero_init[ClusterAccelerationStructureAddressResolutionFlagsNV](),
    ):
        self.s_type = StructureType.CLUSTER_ACCELERATION_STRUCTURE_COMMANDS_INFO_NV
        self.p_next = p_next
        self.input = input
        self.dst_implicit_data = dst_implicit_data
        self.scratch_data = scratch_data
        self.dst_addresses_array = dst_addresses_array
        self.dst_sizes_array = dst_sizes_array
        self.src_infos_array = src_infos_array
        self.src_infos_count = src_infos_count
        self.address_resolution_flags = address_resolution_flags


struct PhysicalDeviceMultiDrawPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_multi_draw_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_multi_draw_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT
        self.p_next = p_next
        self.max_multi_draw_count = max_multi_draw_count


struct GraphicsShaderGroupCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stage_count: UInt32
    var p_stages: Ptr[PipelineShaderStageCreateInfo]
    var p_vertex_input_state: Ptr[PipelineVertexInputStateCreateInfo]
    var p_tessellation_state: Ptr[PipelineTessellationStateCreateInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stage_count: UInt32 = zero_init[UInt32](),
        p_stages: Ptr[PipelineShaderStageCreateInfo] = zero_init[Ptr[PipelineShaderStageCreateInfo]](),
        p_vertex_input_state: Ptr[PipelineVertexInputStateCreateInfo] = zero_init[Ptr[PipelineVertexInputStateCreateInfo]](),
        p_tessellation_state: Ptr[PipelineTessellationStateCreateInfo] = zero_init[Ptr[PipelineTessellationStateCreateInfo]](),
    ):
        self.s_type = StructureType.GRAPHICS_SHADER_GROUP_CREATE_INFO_NV
        self.p_next = p_next
        self.stage_count = stage_count
        self.p_stages = p_stages
        self.p_vertex_input_state = p_vertex_input_state
        self.p_tessellation_state = p_tessellation_state


struct GraphicsPipelineShaderGroupsCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var group_count: UInt32
    var p_groups: Ptr[GraphicsShaderGroupCreateInfoNV]
    var pipeline_count: UInt32
    var p_pipelines: Ptr[Pipeline]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        group_count: UInt32 = zero_init[UInt32](),
        p_groups: Ptr[GraphicsShaderGroupCreateInfoNV] = zero_init[Ptr[GraphicsShaderGroupCreateInfoNV]](),
        pipeline_count: UInt32 = zero_init[UInt32](),
        p_pipelines: Ptr[Pipeline] = zero_init[Ptr[Pipeline]](),
    ):
        self.s_type = StructureType.GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV
        self.p_next = p_next
        self.group_count = group_count
        self.p_groups = p_groups
        self.pipeline_count = pipeline_count
        self.p_pipelines = p_pipelines


struct BindShaderGroupIndirectCommandNV(ImplicitlyCopyable, Movable):
    var group_index: UInt32

    fn __init__(
        out self,
        group_index: UInt32 = zero_init[UInt32](),
    ):
        self.group_index = group_index


struct BindIndexBufferIndirectCommandNV(ImplicitlyCopyable, Movable):
    var buffer_address: DeviceAddress
    var size: UInt32
    var index_type: IndexType

    fn __init__(
        out self,
        buffer_address: DeviceAddress = zero_init[DeviceAddress](),
        size: UInt32 = zero_init[UInt32](),
        index_type: IndexType = zero_init[IndexType](),
    ):
        self.buffer_address = buffer_address
        self.size = size
        self.index_type = index_type


struct BindVertexBufferIndirectCommandNV(ImplicitlyCopyable, Movable):
    var buffer_address: DeviceAddress
    var size: UInt32
    var stride: UInt32

    fn __init__(
        out self,
        buffer_address: DeviceAddress = zero_init[DeviceAddress](),
        size: UInt32 = zero_init[UInt32](),
        stride: UInt32 = zero_init[UInt32](),
    ):
        self.buffer_address = buffer_address
        self.size = size
        self.stride = stride


struct SetStateFlagsIndirectCommandNV(ImplicitlyCopyable, Movable):
    var data: UInt32

    fn __init__(
        out self,
        data: UInt32 = zero_init[UInt32](),
    ):
        self.data = data


struct IndirectCommandsStreamNV(ImplicitlyCopyable, Movable):
    var buffer: Buffer
    var offset: DeviceSize

    fn __init__(
        out self,
        buffer: Buffer = zero_init[Buffer](),
        offset: DeviceSize = zero_init[DeviceSize](),
    ):
        self.buffer = buffer
        self.offset = offset


struct IndirectCommandsLayoutTokenNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var token_type: IndirectCommandsTokenTypeNV
    var stream: UInt32
    var offset: UInt32
    var vertex_binding_unit: UInt32
    var vertex_dynamic_stride: Bool32
    var pushconstant_pipeline_layout: PipelineLayout
    var pushconstant_shader_stage_flags: ShaderStageFlags
    var pushconstant_offset: UInt32
    var pushconstant_size: UInt32
    var indirect_state_flags: IndirectStateFlagsNV
    var index_type_count: UInt32
    var p_index_types: Ptr[IndexType]
    var p_index_type_values: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        token_type: IndirectCommandsTokenTypeNV = zero_init[IndirectCommandsTokenTypeNV](),
        stream: UInt32 = zero_init[UInt32](),
        offset: UInt32 = zero_init[UInt32](),
        vertex_binding_unit: UInt32 = zero_init[UInt32](),
        vertex_dynamic_stride: Bool32 = zero_init[Bool32](),
        pushconstant_pipeline_layout: PipelineLayout = zero_init[PipelineLayout](),
        pushconstant_shader_stage_flags: ShaderStageFlags = zero_init[ShaderStageFlags](),
        pushconstant_offset: UInt32 = zero_init[UInt32](),
        pushconstant_size: UInt32 = zero_init[UInt32](),
        indirect_state_flags: IndirectStateFlagsNV = zero_init[IndirectStateFlagsNV](),
        index_type_count: UInt32 = zero_init[UInt32](),
        p_index_types: Ptr[IndexType] = zero_init[Ptr[IndexType]](),
        p_index_type_values: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.INDIRECT_COMMANDS_LAYOUT_TOKEN_NV
        self.p_next = p_next
        self.token_type = token_type
        self.stream = stream
        self.offset = offset
        self.vertex_binding_unit = vertex_binding_unit
        self.vertex_dynamic_stride = vertex_dynamic_stride
        self.pushconstant_pipeline_layout = pushconstant_pipeline_layout
        self.pushconstant_shader_stage_flags = pushconstant_shader_stage_flags
        self.pushconstant_offset = pushconstant_offset
        self.pushconstant_size = pushconstant_size
        self.indirect_state_flags = indirect_state_flags
        self.index_type_count = index_type_count
        self.p_index_types = p_index_types
        self.p_index_type_values = p_index_type_values


struct IndirectCommandsLayoutCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: IndirectCommandsLayoutUsageFlagsNV
    var pipeline_bind_point: PipelineBindPoint
    var token_count: UInt32
    var p_tokens: Ptr[IndirectCommandsLayoutTokenNV]
    var stream_count: UInt32
    var p_stream_strides: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: IndirectCommandsLayoutUsageFlagsNV = zero_init[IndirectCommandsLayoutUsageFlagsNV](),
        pipeline_bind_point: PipelineBindPoint = zero_init[PipelineBindPoint](),
        token_count: UInt32 = zero_init[UInt32](),
        p_tokens: Ptr[IndirectCommandsLayoutTokenNV] = zero_init[Ptr[IndirectCommandsLayoutTokenNV]](),
        stream_count: UInt32 = zero_init[UInt32](),
        p_stream_strides: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV
        self.p_next = p_next
        self.flags = flags
        self.pipeline_bind_point = pipeline_bind_point
        self.token_count = token_count
        self.p_tokens = p_tokens
        self.stream_count = stream_count
        self.p_stream_strides = p_stream_strides


struct GeneratedCommandsInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_bind_point: PipelineBindPoint
    var pipeline: Pipeline
    var indirect_commands_layout: IndirectCommandsLayoutNV
    var stream_count: UInt32
    var p_streams: Ptr[IndirectCommandsStreamNV]
    var sequences_count: UInt32
    var preprocess_buffer: Buffer
    var preprocess_offset: DeviceSize
    var preprocess_size: DeviceSize
    var sequences_count_buffer: Buffer
    var sequences_count_offset: DeviceSize
    var sequences_index_buffer: Buffer
    var sequences_index_offset: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_bind_point: PipelineBindPoint = zero_init[PipelineBindPoint](),
        pipeline: Pipeline = zero_init[Pipeline](),
        indirect_commands_layout: IndirectCommandsLayoutNV = zero_init[IndirectCommandsLayoutNV](),
        stream_count: UInt32 = zero_init[UInt32](),
        p_streams: Ptr[IndirectCommandsStreamNV] = zero_init[Ptr[IndirectCommandsStreamNV]](),
        sequences_count: UInt32 = zero_init[UInt32](),
        preprocess_buffer: Buffer = zero_init[Buffer](),
        preprocess_offset: DeviceSize = zero_init[DeviceSize](),
        preprocess_size: DeviceSize = zero_init[DeviceSize](),
        sequences_count_buffer: Buffer = zero_init[Buffer](),
        sequences_count_offset: DeviceSize = zero_init[DeviceSize](),
        sequences_index_buffer: Buffer = zero_init[Buffer](),
        sequences_index_offset: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.GENERATED_COMMANDS_INFO_NV
        self.p_next = p_next
        self.pipeline_bind_point = pipeline_bind_point
        self.pipeline = pipeline
        self.indirect_commands_layout = indirect_commands_layout
        self.stream_count = stream_count
        self.p_streams = p_streams
        self.sequences_count = sequences_count
        self.preprocess_buffer = preprocess_buffer
        self.preprocess_offset = preprocess_offset
        self.preprocess_size = preprocess_size
        self.sequences_count_buffer = sequences_count_buffer
        self.sequences_count_offset = sequences_count_offset
        self.sequences_index_buffer = sequences_index_buffer
        self.sequences_index_offset = sequences_index_offset


struct GeneratedCommandsMemoryRequirementsInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_bind_point: PipelineBindPoint
    var pipeline: Pipeline
    var indirect_commands_layout: IndirectCommandsLayoutNV
    var max_sequences_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_bind_point: PipelineBindPoint = zero_init[PipelineBindPoint](),
        pipeline: Pipeline = zero_init[Pipeline](),
        indirect_commands_layout: IndirectCommandsLayoutNV = zero_init[IndirectCommandsLayoutNV](),
        max_sequences_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV
        self.p_next = p_next
        self.pipeline_bind_point = pipeline_bind_point
        self.pipeline = pipeline
        self.indirect_commands_layout = indirect_commands_layout
        self.max_sequences_count = max_sequences_count


struct PipelineIndirectDeviceAddressInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_bind_point: PipelineBindPoint
    var pipeline: Pipeline

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_bind_point: PipelineBindPoint = zero_init[PipelineBindPoint](),
        pipeline: Pipeline = zero_init[Pipeline](),
    ):
        self.s_type = StructureType.PIPELINE_INDIRECT_DEVICE_ADDRESS_INFO_NV
        self.p_next = p_next
        self.pipeline_bind_point = pipeline_bind_point
        self.pipeline = pipeline


struct BindPipelineIndirectCommandNV(ImplicitlyCopyable, Movable):
    var pipeline_address: DeviceAddress

    fn __init__(
        out self,
        pipeline_address: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.pipeline_address = pipeline_address


struct PhysicalDeviceFeatures2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var features: PhysicalDeviceFeatures

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        features: PhysicalDeviceFeatures = zero_init[PhysicalDeviceFeatures](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FEATURES_2
        self.p_next = p_next
        self.features = features


struct PhysicalDeviceProperties2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var properties: PhysicalDeviceProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        properties: PhysicalDeviceProperties = zero_init[PhysicalDeviceProperties](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PROPERTIES_2
        self.p_next = p_next
        self.properties = properties


struct FormatProperties2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format_properties: FormatProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format_properties: FormatProperties = zero_init[FormatProperties](),
    ):
        self.s_type = StructureType.FORMAT_PROPERTIES_2
        self.p_next = p_next
        self.format_properties = format_properties


struct ImageFormatProperties2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_format_properties: ImageFormatProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_format_properties: ImageFormatProperties = zero_init[ImageFormatProperties](),
    ):
        self.s_type = StructureType.IMAGE_FORMAT_PROPERTIES_2
        self.p_next = p_next
        self.image_format_properties = image_format_properties


struct PhysicalDeviceImageFormatInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format: Format
    var type: ImageType
    var tiling: ImageTiling
    var usage: ImageUsageFlags
    var flags: ImageCreateFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format: Format = zero_init[Format](),
        type: ImageType = zero_init[ImageType](),
        tiling: ImageTiling = zero_init[ImageTiling](),
        usage: ImageUsageFlags = zero_init[ImageUsageFlags](),
        flags: ImageCreateFlags = zero_init[ImageCreateFlags](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2
        self.p_next = p_next
        self.format = format
        self.type = type
        self.tiling = tiling
        self.usage = usage
        self.flags = flags


struct QueueFamilyProperties2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var queue_family_properties: QueueFamilyProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        queue_family_properties: QueueFamilyProperties = zero_init[QueueFamilyProperties](),
    ):
        self.s_type = StructureType.QUEUE_FAMILY_PROPERTIES_2
        self.p_next = p_next
        self.queue_family_properties = queue_family_properties


struct PhysicalDeviceMemoryProperties2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_properties: PhysicalDeviceMemoryProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_properties: PhysicalDeviceMemoryProperties = zero_init[PhysicalDeviceMemoryProperties](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MEMORY_PROPERTIES_2
        self.p_next = p_next
        self.memory_properties = memory_properties


struct SparseImageFormatProperties2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var properties: SparseImageFormatProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        properties: SparseImageFormatProperties = zero_init[SparseImageFormatProperties](),
    ):
        self.s_type = StructureType.SPARSE_IMAGE_FORMAT_PROPERTIES_2
        self.p_next = p_next
        self.properties = properties


struct PhysicalDeviceSparseImageFormatInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format: Format
    var type: ImageType
    var samples: SampleCountFlagBits
    var usage: ImageUsageFlags
    var tiling: ImageTiling

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format: Format = zero_init[Format](),
        type: ImageType = zero_init[ImageType](),
        samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
        usage: ImageUsageFlags = zero_init[ImageUsageFlags](),
        tiling: ImageTiling = zero_init[ImageTiling](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2
        self.p_next = p_next
        self.format = format
        self.type = type
        self.samples = samples
        self.usage = usage
        self.tiling = tiling


struct PhysicalDevicePushDescriptorProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_push_descriptors: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_push_descriptors: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES
        self.p_next = p_next
        self.max_push_descriptors = max_push_descriptors


struct ConformanceVersion(ImplicitlyCopyable, Movable):
    var major: UInt8
    var minor: UInt8
    var subminor: UInt8
    var patch: UInt8

    fn __init__(
        out self,
        major: UInt8 = zero_init[UInt8](),
        minor: UInt8 = zero_init[UInt8](),
        subminor: UInt8 = zero_init[UInt8](),
        patch: UInt8 = zero_init[UInt8](),
    ):
        self.major = major
        self.minor = minor
        self.subminor = subminor
        self.patch = patch


struct PhysicalDeviceDriverProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var driver_id: DriverId
    var driver_name: InlineArray[UInt8, Int(MAX_DRIVER_NAME_SIZE)]
    var driver_info: InlineArray[UInt8, Int(MAX_DRIVER_INFO_SIZE)]
    var conformance_version: ConformanceVersion

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        driver_id: DriverId = zero_init[DriverId](),
        driver_name: InlineArray[UInt8, Int(MAX_DRIVER_NAME_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DRIVER_NAME_SIZE)]](),
        driver_info: InlineArray[UInt8, Int(MAX_DRIVER_INFO_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DRIVER_INFO_SIZE)]](),
        conformance_version: ConformanceVersion = zero_init[ConformanceVersion](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DRIVER_PROPERTIES
        self.p_next = p_next
        self.driver_id = driver_id
        self.driver_name = driver_name
        self.driver_info = driver_info
        self.conformance_version = conformance_version

    fn driver_name_slice(self) -> StringSlice[__origin_of(self.driver_name)]:
        return StringSlice[__origin_of(self.driver_name)](unsafe_from_utf8_ptr = self.driver_name.unsafe_ptr())

    fn driver_info_slice(self) -> StringSlice[__origin_of(self.driver_info)]:
        return StringSlice[__origin_of(self.driver_info)](unsafe_from_utf8_ptr = self.driver_info.unsafe_ptr())


struct PresentRegionsKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain_count: UInt32
    var p_regions: Ptr[PresentRegionKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[PresentRegionKHR] = zero_init[Ptr[PresentRegionKHR]](),
    ):
        self.s_type = StructureType.PRESENT_REGIONS_KHR
        self.p_next = p_next
        self.swapchain_count = swapchain_count
        self.p_regions = p_regions


struct PresentRegionKHR(ImplicitlyCopyable, Movable):
    var rectangle_count: UInt32
    var p_rectangles: Ptr[RectLayerKHR]

    fn __init__(
        out self,
        rectangle_count: UInt32 = zero_init[UInt32](),
        p_rectangles: Ptr[RectLayerKHR] = zero_init[Ptr[RectLayerKHR]](),
    ):
        self.rectangle_count = rectangle_count
        self.p_rectangles = p_rectangles


struct RectLayerKHR(ImplicitlyCopyable, Movable):
    var offset: Offset2D
    var extent: Extent2D
    var layer: UInt32

    fn __init__(
        out self,
        offset: Offset2D = zero_init[Offset2D](),
        extent: Extent2D = zero_init[Extent2D](),
        layer: UInt32 = zero_init[UInt32](),
    ):
        self.offset = offset
        self.extent = extent
        self.layer = layer


struct PhysicalDeviceVariablePointersFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var variable_pointers_storage_buffer: Bool32
    var variable_pointers: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        variable_pointers_storage_buffer: Bool32 = zero_init[Bool32](),
        variable_pointers: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
        self.p_next = p_next
        self.variable_pointers_storage_buffer = variable_pointers_storage_buffer
        self.variable_pointers = variable_pointers


struct ExternalMemoryProperties(ImplicitlyCopyable, Movable):
    var external_memory_features: ExternalMemoryFeatureFlags
    var export_from_imported_handle_types: ExternalMemoryHandleTypeFlags
    var compatible_handle_types: ExternalMemoryHandleTypeFlags

    fn __init__(
        out self,
        external_memory_features: ExternalMemoryFeatureFlags = zero_init[ExternalMemoryFeatureFlags](),
        export_from_imported_handle_types: ExternalMemoryHandleTypeFlags = zero_init[ExternalMemoryHandleTypeFlags](),
        compatible_handle_types: ExternalMemoryHandleTypeFlags = zero_init[ExternalMemoryHandleTypeFlags](),
    ):
        self.external_memory_features = external_memory_features
        self.export_from_imported_handle_types = export_from_imported_handle_types
        self.compatible_handle_types = compatible_handle_types


struct PhysicalDeviceExternalImageFormatInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalMemoryHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO
        self.p_next = p_next
        self.handle_type = handle_type


struct ExternalImageFormatProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var external_memory_properties: ExternalMemoryProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        external_memory_properties: ExternalMemoryProperties = zero_init[ExternalMemoryProperties](),
    ):
        self.s_type = StructureType.EXTERNAL_IMAGE_FORMAT_PROPERTIES
        self.p_next = p_next
        self.external_memory_properties = external_memory_properties


struct PhysicalDeviceExternalBufferInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: BufferCreateFlags
    var usage: BufferUsageFlags
    var handle_type: ExternalMemoryHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: BufferCreateFlags = zero_init[BufferCreateFlags](),
        usage: BufferUsageFlags = zero_init[BufferUsageFlags](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO
        self.p_next = p_next
        self.flags = flags
        self.usage = usage
        self.handle_type = handle_type


struct ExternalBufferProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var external_memory_properties: ExternalMemoryProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        external_memory_properties: ExternalMemoryProperties = zero_init[ExternalMemoryProperties](),
    ):
        self.s_type = StructureType.EXTERNAL_BUFFER_PROPERTIES
        self.p_next = p_next
        self.external_memory_properties = external_memory_properties


struct PhysicalDeviceIDProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_uuid: InlineArray[UInt8, Int(UUID_SIZE)]
    var driver_uuid: InlineArray[UInt8, Int(UUID_SIZE)]
    var device_luid: InlineArray[UInt8, Int(LUID_SIZE)]
    var device_node_mask: UInt32
    var device_luid_valid: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        driver_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        device_luid: InlineArray[UInt8, Int(LUID_SIZE)] = zero_init[InlineArray[UInt8, Int(LUID_SIZE)]](),
        device_node_mask: UInt32 = zero_init[UInt32](),
        device_luid_valid: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ID_PROPERTIES
        self.p_next = p_next
        self.device_uuid = device_uuid
        self.driver_uuid = driver_uuid
        self.device_luid = device_luid
        self.device_node_mask = device_node_mask
        self.device_luid_valid = device_luid_valid


struct ExternalMemoryImageCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_types: ExternalMemoryHandleTypeFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_types: ExternalMemoryHandleTypeFlags = zero_init[ExternalMemoryHandleTypeFlags](),
    ):
        self.s_type = StructureType.EXTERNAL_MEMORY_IMAGE_CREATE_INFO
        self.p_next = p_next
        self.handle_types = handle_types


struct ExternalMemoryBufferCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_types: ExternalMemoryHandleTypeFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_types: ExternalMemoryHandleTypeFlags = zero_init[ExternalMemoryHandleTypeFlags](),
    ):
        self.s_type = StructureType.EXTERNAL_MEMORY_BUFFER_CREATE_INFO
        self.p_next = p_next
        self.handle_types = handle_types


struct ExportMemoryAllocateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_types: ExternalMemoryHandleTypeFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_types: ExternalMemoryHandleTypeFlags = zero_init[ExternalMemoryHandleTypeFlags](),
    ):
        self.s_type = StructureType.EXPORT_MEMORY_ALLOCATE_INFO
        self.p_next = p_next
        self.handle_types = handle_types


struct ImportMemoryWin32HandleInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalMemoryHandleTypeFlagBits
    var handle: HANDLE
    var name: LPCWSTR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
        handle: HANDLE = zero_init[HANDLE](),
        name: LPCWSTR = zero_init[LPCWSTR](),
    ):
        self.s_type = StructureType.IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR
        self.p_next = p_next
        self.handle_type = handle_type
        self.handle = handle
        self.name = name


struct ExportMemoryWin32HandleInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_attributes: Ptr[SECURITY_ATTRIBUTES]
    var dw_access: DWORD
    var name: LPCWSTR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_attributes: Ptr[SECURITY_ATTRIBUTES] = zero_init[Ptr[SECURITY_ATTRIBUTES]](),
        dw_access: DWORD = zero_init[DWORD](),
        name: LPCWSTR = zero_init[LPCWSTR](),
    ):
        self.s_type = StructureType.EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR
        self.p_next = p_next
        self.p_attributes = p_attributes
        self.dw_access = dw_access
        self.name = name


struct ImportMemoryZirconHandleInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalMemoryHandleTypeFlagBits
    var handle: zx_handle_t

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
        handle: zx_handle_t = zero_init[zx_handle_t](),
    ):
        self.s_type = StructureType.IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA
        self.p_next = p_next
        self.handle_type = handle_type
        self.handle = handle


struct MemoryZirconHandlePropertiesFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_type_bits: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA
        self.p_next = p_next
        self.memory_type_bits = memory_type_bits


struct MemoryGetZirconHandleInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory
    var handle_type: ExternalMemoryHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA
        self.p_next = p_next
        self.memory = memory
        self.handle_type = handle_type


struct MemoryWin32HandlePropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_type_bits: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.MEMORY_WIN32_HANDLE_PROPERTIES_KHR
        self.p_next = p_next
        self.memory_type_bits = memory_type_bits


struct MemoryGetWin32HandleInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory
    var handle_type: ExternalMemoryHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.MEMORY_GET_WIN32_HANDLE_INFO_KHR
        self.p_next = p_next
        self.memory = memory
        self.handle_type = handle_type


struct ImportMemoryFdInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalMemoryHandleTypeFlagBits
    var fd: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
        fd: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.IMPORT_MEMORY_FD_INFO_KHR
        self.p_next = p_next
        self.handle_type = handle_type
        self.fd = fd


struct MemoryFdPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_type_bits: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.MEMORY_FD_PROPERTIES_KHR
        self.p_next = p_next
        self.memory_type_bits = memory_type_bits


struct MemoryGetFdInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory
    var handle_type: ExternalMemoryHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.MEMORY_GET_FD_INFO_KHR
        self.p_next = p_next
        self.memory = memory
        self.handle_type = handle_type


struct Win32KeyedMutexAcquireReleaseInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acquire_count: UInt32
    var p_acquire_syncs: Ptr[DeviceMemory]
    var p_acquire_keys: Ptr[UInt64]
    var p_acquire_timeouts: Ptr[UInt32]
    var release_count: UInt32
    var p_release_syncs: Ptr[DeviceMemory]
    var p_release_keys: Ptr[UInt64]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acquire_count: UInt32 = zero_init[UInt32](),
        p_acquire_syncs: Ptr[DeviceMemory] = zero_init[Ptr[DeviceMemory]](),
        p_acquire_keys: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
        p_acquire_timeouts: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        release_count: UInt32 = zero_init[UInt32](),
        p_release_syncs: Ptr[DeviceMemory] = zero_init[Ptr[DeviceMemory]](),
        p_release_keys: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
    ):
        self.s_type = StructureType.WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR
        self.p_next = p_next
        self.acquire_count = acquire_count
        self.p_acquire_syncs = p_acquire_syncs
        self.p_acquire_keys = p_acquire_keys
        self.p_acquire_timeouts = p_acquire_timeouts
        self.release_count = release_count
        self.p_release_syncs = p_release_syncs
        self.p_release_keys = p_release_keys


struct ImportMemoryMetalHandleInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalMemoryHandleTypeFlagBits
    var handle: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
        handle: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.IMPORT_MEMORY_METAL_HANDLE_INFO_EXT
        self.p_next = p_next
        self.handle_type = handle_type
        self.handle = handle


struct MemoryMetalHandlePropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_type_bits: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.MEMORY_METAL_HANDLE_PROPERTIES_EXT
        self.p_next = p_next
        self.memory_type_bits = memory_type_bits


struct MemoryGetMetalHandleInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory
    var handle_type: ExternalMemoryHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.MEMORY_GET_METAL_HANDLE_INFO_EXT
        self.p_next = p_next
        self.memory = memory
        self.handle_type = handle_type


struct PhysicalDeviceExternalSemaphoreInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalSemaphoreHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalSemaphoreHandleTypeFlagBits = zero_init[ExternalSemaphoreHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO
        self.p_next = p_next
        self.handle_type = handle_type


struct ExternalSemaphoreProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var export_from_imported_handle_types: ExternalSemaphoreHandleTypeFlags
    var compatible_handle_types: ExternalSemaphoreHandleTypeFlags
    var external_semaphore_features: ExternalSemaphoreFeatureFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        export_from_imported_handle_types: ExternalSemaphoreHandleTypeFlags = zero_init[ExternalSemaphoreHandleTypeFlags](),
        compatible_handle_types: ExternalSemaphoreHandleTypeFlags = zero_init[ExternalSemaphoreHandleTypeFlags](),
        external_semaphore_features: ExternalSemaphoreFeatureFlags = zero_init[ExternalSemaphoreFeatureFlags](),
    ):
        self.s_type = StructureType.EXTERNAL_SEMAPHORE_PROPERTIES
        self.p_next = p_next
        self.export_from_imported_handle_types = export_from_imported_handle_types
        self.compatible_handle_types = compatible_handle_types
        self.external_semaphore_features = external_semaphore_features


struct ExportSemaphoreCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_types: ExternalSemaphoreHandleTypeFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_types: ExternalSemaphoreHandleTypeFlags = zero_init[ExternalSemaphoreHandleTypeFlags](),
    ):
        self.s_type = StructureType.EXPORT_SEMAPHORE_CREATE_INFO
        self.p_next = p_next
        self.handle_types = handle_types


struct ImportSemaphoreWin32HandleInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var flags: SemaphoreImportFlags
    var handle_type: ExternalSemaphoreHandleTypeFlagBits
    var handle: HANDLE
    var name: LPCWSTR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        flags: SemaphoreImportFlags = zero_init[SemaphoreImportFlags](),
        handle_type: ExternalSemaphoreHandleTypeFlagBits = zero_init[ExternalSemaphoreHandleTypeFlagBits](),
        handle: HANDLE = zero_init[HANDLE](),
        name: LPCWSTR = zero_init[LPCWSTR](),
    ):
        self.s_type = StructureType.IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
        self.p_next = p_next
        self.semaphore = semaphore
        self.flags = flags
        self.handle_type = handle_type
        self.handle = handle
        self.name = name


struct ExportSemaphoreWin32HandleInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_attributes: Ptr[SECURITY_ATTRIBUTES]
    var dw_access: DWORD
    var name: LPCWSTR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_attributes: Ptr[SECURITY_ATTRIBUTES] = zero_init[Ptr[SECURITY_ATTRIBUTES]](),
        dw_access: DWORD = zero_init[DWORD](),
        name: LPCWSTR = zero_init[LPCWSTR](),
    ):
        self.s_type = StructureType.EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR
        self.p_next = p_next
        self.p_attributes = p_attributes
        self.dw_access = dw_access
        self.name = name


struct D3D12FenceSubmitInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var wait_semaphore_values_count: UInt32
    var p_wait_semaphore_values: Ptr[UInt64]
    var signal_semaphore_values_count: UInt32
    var p_signal_semaphore_values: Ptr[UInt64]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        wait_semaphore_values_count: UInt32 = zero_init[UInt32](),
        p_wait_semaphore_values: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
        signal_semaphore_values_count: UInt32 = zero_init[UInt32](),
        p_signal_semaphore_values: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
    ):
        self.s_type = StructureType.D3D12_FENCE_SUBMIT_INFO_KHR
        self.p_next = p_next
        self.wait_semaphore_values_count = wait_semaphore_values_count
        self.p_wait_semaphore_values = p_wait_semaphore_values
        self.signal_semaphore_values_count = signal_semaphore_values_count
        self.p_signal_semaphore_values = p_signal_semaphore_values


struct SemaphoreGetWin32HandleInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var handle_type: ExternalSemaphoreHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        handle_type: ExternalSemaphoreHandleTypeFlagBits = zero_init[ExternalSemaphoreHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR
        self.p_next = p_next
        self.semaphore = semaphore
        self.handle_type = handle_type


struct ImportSemaphoreFdInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var flags: SemaphoreImportFlags
    var handle_type: ExternalSemaphoreHandleTypeFlagBits
    var fd: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        flags: SemaphoreImportFlags = zero_init[SemaphoreImportFlags](),
        handle_type: ExternalSemaphoreHandleTypeFlagBits = zero_init[ExternalSemaphoreHandleTypeFlagBits](),
        fd: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.IMPORT_SEMAPHORE_FD_INFO_KHR
        self.p_next = p_next
        self.semaphore = semaphore
        self.flags = flags
        self.handle_type = handle_type
        self.fd = fd


struct SemaphoreGetFdInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var handle_type: ExternalSemaphoreHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        handle_type: ExternalSemaphoreHandleTypeFlagBits = zero_init[ExternalSemaphoreHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.SEMAPHORE_GET_FD_INFO_KHR
        self.p_next = p_next
        self.semaphore = semaphore
        self.handle_type = handle_type


struct ImportSemaphoreZirconHandleInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var flags: SemaphoreImportFlags
    var handle_type: ExternalSemaphoreHandleTypeFlagBits
    var zircon_handle: zx_handle_t

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        flags: SemaphoreImportFlags = zero_init[SemaphoreImportFlags](),
        handle_type: ExternalSemaphoreHandleTypeFlagBits = zero_init[ExternalSemaphoreHandleTypeFlagBits](),
        zircon_handle: zx_handle_t = zero_init[zx_handle_t](),
    ):
        self.s_type = StructureType.IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA
        self.p_next = p_next
        self.semaphore = semaphore
        self.flags = flags
        self.handle_type = handle_type
        self.zircon_handle = zircon_handle


struct SemaphoreGetZirconHandleInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var handle_type: ExternalSemaphoreHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        handle_type: ExternalSemaphoreHandleTypeFlagBits = zero_init[ExternalSemaphoreHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA
        self.p_next = p_next
        self.semaphore = semaphore
        self.handle_type = handle_type


struct PhysicalDeviceExternalFenceInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalFenceHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalFenceHandleTypeFlagBits = zero_init[ExternalFenceHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO
        self.p_next = p_next
        self.handle_type = handle_type


struct ExternalFenceProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var export_from_imported_handle_types: ExternalFenceHandleTypeFlags
    var compatible_handle_types: ExternalFenceHandleTypeFlags
    var external_fence_features: ExternalFenceFeatureFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        export_from_imported_handle_types: ExternalFenceHandleTypeFlags = zero_init[ExternalFenceHandleTypeFlags](),
        compatible_handle_types: ExternalFenceHandleTypeFlags = zero_init[ExternalFenceHandleTypeFlags](),
        external_fence_features: ExternalFenceFeatureFlags = zero_init[ExternalFenceFeatureFlags](),
    ):
        self.s_type = StructureType.EXTERNAL_FENCE_PROPERTIES
        self.p_next = p_next
        self.export_from_imported_handle_types = export_from_imported_handle_types
        self.compatible_handle_types = compatible_handle_types
        self.external_fence_features = external_fence_features


struct ExportFenceCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_types: ExternalFenceHandleTypeFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_types: ExternalFenceHandleTypeFlags = zero_init[ExternalFenceHandleTypeFlags](),
    ):
        self.s_type = StructureType.EXPORT_FENCE_CREATE_INFO
        self.p_next = p_next
        self.handle_types = handle_types


struct ImportFenceWin32HandleInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fence: Fence
    var flags: FenceImportFlags
    var handle_type: ExternalFenceHandleTypeFlagBits
    var handle: HANDLE
    var name: LPCWSTR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fence: Fence = zero_init[Fence](),
        flags: FenceImportFlags = zero_init[FenceImportFlags](),
        handle_type: ExternalFenceHandleTypeFlagBits = zero_init[ExternalFenceHandleTypeFlagBits](),
        handle: HANDLE = zero_init[HANDLE](),
        name: LPCWSTR = zero_init[LPCWSTR](),
    ):
        self.s_type = StructureType.IMPORT_FENCE_WIN32_HANDLE_INFO_KHR
        self.p_next = p_next
        self.fence = fence
        self.flags = flags
        self.handle_type = handle_type
        self.handle = handle
        self.name = name


struct ExportFenceWin32HandleInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_attributes: Ptr[SECURITY_ATTRIBUTES]
    var dw_access: DWORD
    var name: LPCWSTR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_attributes: Ptr[SECURITY_ATTRIBUTES] = zero_init[Ptr[SECURITY_ATTRIBUTES]](),
        dw_access: DWORD = zero_init[DWORD](),
        name: LPCWSTR = zero_init[LPCWSTR](),
    ):
        self.s_type = StructureType.EXPORT_FENCE_WIN32_HANDLE_INFO_KHR
        self.p_next = p_next
        self.p_attributes = p_attributes
        self.dw_access = dw_access
        self.name = name


struct FenceGetWin32HandleInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fence: Fence
    var handle_type: ExternalFenceHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fence: Fence = zero_init[Fence](),
        handle_type: ExternalFenceHandleTypeFlagBits = zero_init[ExternalFenceHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.FENCE_GET_WIN32_HANDLE_INFO_KHR
        self.p_next = p_next
        self.fence = fence
        self.handle_type = handle_type


struct ImportFenceFdInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fence: Fence
    var flags: FenceImportFlags
    var handle_type: ExternalFenceHandleTypeFlagBits
    var fd: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fence: Fence = zero_init[Fence](),
        flags: FenceImportFlags = zero_init[FenceImportFlags](),
        handle_type: ExternalFenceHandleTypeFlagBits = zero_init[ExternalFenceHandleTypeFlagBits](),
        fd: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.IMPORT_FENCE_FD_INFO_KHR
        self.p_next = p_next
        self.fence = fence
        self.flags = flags
        self.handle_type = handle_type
        self.fd = fd


struct FenceGetFdInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fence: Fence
    var handle_type: ExternalFenceHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fence: Fence = zero_init[Fence](),
        handle_type: ExternalFenceHandleTypeFlagBits = zero_init[ExternalFenceHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.FENCE_GET_FD_INFO_KHR
        self.p_next = p_next
        self.fence = fence
        self.handle_type = handle_type


struct ExportFenceSciSyncInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_attributes: NvSciSyncAttrList

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_attributes: NvSciSyncAttrList = zero_init[NvSciSyncAttrList](),
    ):
        self.s_type = StructureType.EXPORT_FENCE_SCI_SYNC_INFO_NV
        self.p_next = p_next
        self.p_attributes = p_attributes


struct ImportFenceSciSyncInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fence: Fence
    var handle_type: ExternalFenceHandleTypeFlagBits
    var handle: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fence: Fence = zero_init[Fence](),
        handle_type: ExternalFenceHandleTypeFlagBits = zero_init[ExternalFenceHandleTypeFlagBits](),
        handle: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.IMPORT_FENCE_SCI_SYNC_INFO_NV
        self.p_next = p_next
        self.fence = fence
        self.handle_type = handle_type
        self.handle = handle


struct FenceGetSciSyncInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fence: Fence
    var handle_type: ExternalFenceHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fence: Fence = zero_init[Fence](),
        handle_type: ExternalFenceHandleTypeFlagBits = zero_init[ExternalFenceHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.FENCE_GET_SCI_SYNC_INFO_NV
        self.p_next = p_next
        self.fence = fence
        self.handle_type = handle_type


struct ExportSemaphoreSciSyncInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_attributes: NvSciSyncAttrList

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_attributes: NvSciSyncAttrList = zero_init[NvSciSyncAttrList](),
    ):
        self.s_type = StructureType.EXPORT_SEMAPHORE_SCI_SYNC_INFO_NV
        self.p_next = p_next
        self.p_attributes = p_attributes


struct ImportSemaphoreSciSyncInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var handle_type: ExternalSemaphoreHandleTypeFlagBits
    var handle: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        handle_type: ExternalSemaphoreHandleTypeFlagBits = zero_init[ExternalSemaphoreHandleTypeFlagBits](),
        handle: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.IMPORT_SEMAPHORE_SCI_SYNC_INFO_NV
        self.p_next = p_next
        self.semaphore = semaphore
        self.handle_type = handle_type
        self.handle = handle


struct SemaphoreGetSciSyncInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var handle_type: ExternalSemaphoreHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        handle_type: ExternalSemaphoreHandleTypeFlagBits = zero_init[ExternalSemaphoreHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.SEMAPHORE_GET_SCI_SYNC_INFO_NV
        self.p_next = p_next
        self.semaphore = semaphore
        self.handle_type = handle_type


struct SciSyncAttributesInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var client_type: SciSyncClientTypeNV
    var primitive_type: SciSyncPrimitiveTypeNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        client_type: SciSyncClientTypeNV = zero_init[SciSyncClientTypeNV](),
        primitive_type: SciSyncPrimitiveTypeNV = zero_init[SciSyncPrimitiveTypeNV](),
    ):
        self.s_type = StructureType.SCI_SYNC_ATTRIBUTES_INFO_NV
        self.p_next = p_next
        self.client_type = client_type
        self.primitive_type = primitive_type


struct PhysicalDeviceExternalSciSyncFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sci_sync_fence: Bool32
    var sci_sync_semaphore: Bool32
    var sci_sync_import: Bool32
    var sci_sync_export: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sci_sync_fence: Bool32 = zero_init[Bool32](),
        sci_sync_semaphore: Bool32 = zero_init[Bool32](),
        sci_sync_import: Bool32 = zero_init[Bool32](),
        sci_sync_export: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_FEATURES_NV
        self.p_next = p_next
        self.sci_sync_fence = sci_sync_fence
        self.sci_sync_semaphore = sci_sync_semaphore
        self.sci_sync_import = sci_sync_import
        self.sci_sync_export = sci_sync_export


struct PhysicalDeviceExternalSciSync2FeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sci_sync_fence: Bool32
    var sci_sync_semaphore_2: Bool32
    var sci_sync_import: Bool32
    var sci_sync_export: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sci_sync_fence: Bool32 = zero_init[Bool32](),
        sci_sync_semaphore_2: Bool32 = zero_init[Bool32](),
        sci_sync_import: Bool32 = zero_init[Bool32](),
        sci_sync_export: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_SCI_SYNC_2_FEATURES_NV
        self.p_next = p_next
        self.sci_sync_fence = sci_sync_fence
        self.sci_sync_semaphore_2 = sci_sync_semaphore_2
        self.sci_sync_import = sci_sync_import
        self.sci_sync_export = sci_sync_export


struct SemaphoreSciSyncPoolCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle: NvSciSyncObj

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle: NvSciSyncObj = zero_init[NvSciSyncObj](),
    ):
        self.s_type = StructureType.SEMAPHORE_SCI_SYNC_POOL_CREATE_INFO_NV
        self.p_next = p_next
        self.handle = handle


struct SemaphoreSciSyncCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore_pool: SemaphoreSciSyncPoolNV
    var p_fence: Ptr[NvSciSyncFence]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore_pool: SemaphoreSciSyncPoolNV = zero_init[SemaphoreSciSyncPoolNV](),
        p_fence: Ptr[NvSciSyncFence] = zero_init[Ptr[NvSciSyncFence]](),
    ):
        self.s_type = StructureType.SEMAPHORE_SCI_SYNC_CREATE_INFO_NV
        self.p_next = p_next
        self.semaphore_pool = semaphore_pool
        self.p_fence = p_fence


struct DeviceSemaphoreSciSyncPoolReservationCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore_sci_sync_pool_request_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore_sci_sync_pool_request_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DEVICE_SEMAPHORE_SCI_SYNC_POOL_RESERVATION_CREATE_INFO_NV
        self.p_next = p_next
        self.semaphore_sci_sync_pool_request_count = semaphore_sci_sync_pool_request_count


struct PhysicalDeviceMultiviewFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var multiview: Bool32
    var multiview_geometry_shader: Bool32
    var multiview_tessellation_shader: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        multiview: Bool32 = zero_init[Bool32](),
        multiview_geometry_shader: Bool32 = zero_init[Bool32](),
        multiview_tessellation_shader: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MULTIVIEW_FEATURES
        self.p_next = p_next
        self.multiview = multiview
        self.multiview_geometry_shader = multiview_geometry_shader
        self.multiview_tessellation_shader = multiview_tessellation_shader


struct PhysicalDeviceMultiviewProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_multiview_view_count: UInt32
    var max_multiview_instance_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_multiview_view_count: UInt32 = zero_init[UInt32](),
        max_multiview_instance_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES
        self.p_next = p_next
        self.max_multiview_view_count = max_multiview_view_count
        self.max_multiview_instance_index = max_multiview_instance_index


struct RenderPassMultiviewCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var subpass_count: UInt32
    var p_view_masks: Ptr[UInt32]
    var dependency_count: UInt32
    var p_view_offsets: Ptr[Int32]
    var correlation_mask_count: UInt32
    var p_correlation_masks: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        subpass_count: UInt32 = zero_init[UInt32](),
        p_view_masks: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        dependency_count: UInt32 = zero_init[UInt32](),
        p_view_offsets: Ptr[Int32] = zero_init[Ptr[Int32]](),
        correlation_mask_count: UInt32 = zero_init[UInt32](),
        p_correlation_masks: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.RENDER_PASS_MULTIVIEW_CREATE_INFO
        self.p_next = p_next
        self.subpass_count = subpass_count
        self.p_view_masks = p_view_masks
        self.dependency_count = dependency_count
        self.p_view_offsets = p_view_offsets
        self.correlation_mask_count = correlation_mask_count
        self.p_correlation_masks = p_correlation_masks


struct SurfaceCapabilities2EXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_image_count: UInt32
    var max_image_count: UInt32
    var current_extent: Extent2D
    var min_image_extent: Extent2D
    var max_image_extent: Extent2D
    var max_image_array_layers: UInt32
    var supported_transforms: SurfaceTransformFlagsKHR
    var current_transform: SurfaceTransformFlagBitsKHR
    var supported_composite_alpha: CompositeAlphaFlagsKHR
    var supported_usage_flags: ImageUsageFlags
    var supported_surface_counters: SurfaceCounterFlagsEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_image_count: UInt32 = zero_init[UInt32](),
        max_image_count: UInt32 = zero_init[UInt32](),
        current_extent: Extent2D = zero_init[Extent2D](),
        min_image_extent: Extent2D = zero_init[Extent2D](),
        max_image_extent: Extent2D = zero_init[Extent2D](),
        max_image_array_layers: UInt32 = zero_init[UInt32](),
        supported_transforms: SurfaceTransformFlagsKHR = zero_init[SurfaceTransformFlagsKHR](),
        current_transform: SurfaceTransformFlagBitsKHR = zero_init[SurfaceTransformFlagBitsKHR](),
        supported_composite_alpha: CompositeAlphaFlagsKHR = zero_init[CompositeAlphaFlagsKHR](),
        supported_usage_flags: ImageUsageFlags = zero_init[ImageUsageFlags](),
        supported_surface_counters: SurfaceCounterFlagsEXT = zero_init[SurfaceCounterFlagsEXT](),
    ):
        self.s_type = StructureType.SURFACE_CAPABILITIES_2_EXT
        self.p_next = p_next
        self.min_image_count = min_image_count
        self.max_image_count = max_image_count
        self.current_extent = current_extent
        self.min_image_extent = min_image_extent
        self.max_image_extent = max_image_extent
        self.max_image_array_layers = max_image_array_layers
        self.supported_transforms = supported_transforms
        self.current_transform = current_transform
        self.supported_composite_alpha = supported_composite_alpha
        self.supported_usage_flags = supported_usage_flags
        self.supported_surface_counters = supported_surface_counters


struct DisplayPowerInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var power_state: DisplayPowerStateEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        power_state: DisplayPowerStateEXT = zero_init[DisplayPowerStateEXT](),
    ):
        self.s_type = StructureType.DISPLAY_POWER_INFO_EXT
        self.p_next = p_next
        self.power_state = power_state


struct DeviceEventInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_event: DeviceEventTypeEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_event: DeviceEventTypeEXT = zero_init[DeviceEventTypeEXT](),
    ):
        self.s_type = StructureType.DEVICE_EVENT_INFO_EXT
        self.p_next = p_next
        self.device_event = device_event


struct DisplayEventInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var display_event: DisplayEventTypeEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        display_event: DisplayEventTypeEXT = zero_init[DisplayEventTypeEXT](),
    ):
        self.s_type = StructureType.DISPLAY_EVENT_INFO_EXT
        self.p_next = p_next
        self.display_event = display_event


struct SwapchainCounterCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var surface_counters: SurfaceCounterFlagsEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        surface_counters: SurfaceCounterFlagsEXT = zero_init[SurfaceCounterFlagsEXT](),
    ):
        self.s_type = StructureType.SWAPCHAIN_COUNTER_CREATE_INFO_EXT
        self.p_next = p_next
        self.surface_counters = surface_counters


struct PhysicalDeviceGroupProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var physical_device_count: UInt32
    var physical_devices: InlineArray[PhysicalDevice, Int(MAX_DEVICE_GROUP_SIZE)]
    var subset_allocation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        physical_device_count: UInt32 = zero_init[UInt32](),
        physical_devices: InlineArray[PhysicalDevice, Int(MAX_DEVICE_GROUP_SIZE)] = zero_init[InlineArray[PhysicalDevice, Int(MAX_DEVICE_GROUP_SIZE)]](),
        subset_allocation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_GROUP_PROPERTIES
        self.p_next = p_next
        self.physical_device_count = physical_device_count
        self.physical_devices = physical_devices
        self.subset_allocation = subset_allocation


struct MemoryAllocateFlagsInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: MemoryAllocateFlags
    var device_mask: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: MemoryAllocateFlags = zero_init[MemoryAllocateFlags](),
        device_mask: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.MEMORY_ALLOCATE_FLAGS_INFO
        self.p_next = p_next
        self.flags = flags
        self.device_mask = device_mask


struct BindBufferMemoryInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer: Buffer
    var memory: DeviceMemory
    var memory_offset: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer: Buffer = zero_init[Buffer](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        memory_offset: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.BIND_BUFFER_MEMORY_INFO
        self.p_next = p_next
        self.buffer = buffer
        self.memory = memory
        self.memory_offset = memory_offset


struct BindBufferMemoryDeviceGroupInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_index_count: UInt32
    var p_device_indices: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_index_count: UInt32 = zero_init[UInt32](),
        p_device_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO
        self.p_next = p_next
        self.device_index_count = device_index_count
        self.p_device_indices = p_device_indices


struct BindImageMemoryInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image: Image
    var memory: DeviceMemory
    var memory_offset: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image: Image = zero_init[Image](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        memory_offset: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.BIND_IMAGE_MEMORY_INFO
        self.p_next = p_next
        self.image = image
        self.memory = memory
        self.memory_offset = memory_offset


struct BindImageMemoryDeviceGroupInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_index_count: UInt32
    var p_device_indices: Ptr[UInt32]
    var split_instance_bind_region_count: UInt32
    var p_split_instance_bind_regions: Ptr[Rect2D]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_index_count: UInt32 = zero_init[UInt32](),
        p_device_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        split_instance_bind_region_count: UInt32 = zero_init[UInt32](),
        p_split_instance_bind_regions: Ptr[Rect2D] = zero_init[Ptr[Rect2D]](),
    ):
        self.s_type = StructureType.BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO
        self.p_next = p_next
        self.device_index_count = device_index_count
        self.p_device_indices = p_device_indices
        self.split_instance_bind_region_count = split_instance_bind_region_count
        self.p_split_instance_bind_regions = p_split_instance_bind_regions


struct DeviceGroupRenderPassBeginInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_mask: UInt32
    var device_render_area_count: UInt32
    var p_device_render_areas: Ptr[Rect2D]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_mask: UInt32 = zero_init[UInt32](),
        device_render_area_count: UInt32 = zero_init[UInt32](),
        p_device_render_areas: Ptr[Rect2D] = zero_init[Ptr[Rect2D]](),
    ):
        self.s_type = StructureType.DEVICE_GROUP_RENDER_PASS_BEGIN_INFO
        self.p_next = p_next
        self.device_mask = device_mask
        self.device_render_area_count = device_render_area_count
        self.p_device_render_areas = p_device_render_areas


struct DeviceGroupCommandBufferBeginInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_mask: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_mask: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO
        self.p_next = p_next
        self.device_mask = device_mask


struct DeviceGroupSubmitInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var wait_semaphore_count: UInt32
    var p_wait_semaphore_device_indices: Ptr[UInt32]
    var command_buffer_count: UInt32
    var p_command_buffer_device_masks: Ptr[UInt32]
    var signal_semaphore_count: UInt32
    var p_signal_semaphore_device_indices: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        wait_semaphore_count: UInt32 = zero_init[UInt32](),
        p_wait_semaphore_device_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        command_buffer_count: UInt32 = zero_init[UInt32](),
        p_command_buffer_device_masks: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        signal_semaphore_count: UInt32 = zero_init[UInt32](),
        p_signal_semaphore_device_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.DEVICE_GROUP_SUBMIT_INFO
        self.p_next = p_next
        self.wait_semaphore_count = wait_semaphore_count
        self.p_wait_semaphore_device_indices = p_wait_semaphore_device_indices
        self.command_buffer_count = command_buffer_count
        self.p_command_buffer_device_masks = p_command_buffer_device_masks
        self.signal_semaphore_count = signal_semaphore_count
        self.p_signal_semaphore_device_indices = p_signal_semaphore_device_indices


struct DeviceGroupBindSparseInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var resource_device_index: UInt32
    var memory_device_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        resource_device_index: UInt32 = zero_init[UInt32](),
        memory_device_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DEVICE_GROUP_BIND_SPARSE_INFO
        self.p_next = p_next
        self.resource_device_index = resource_device_index
        self.memory_device_index = memory_device_index


struct DeviceGroupPresentCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_mask: InlineArray[UInt32, Int(MAX_DEVICE_GROUP_SIZE)]
    var modes: DeviceGroupPresentModeFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_mask: InlineArray[UInt32, Int(MAX_DEVICE_GROUP_SIZE)] = zero_init[InlineArray[UInt32, Int(MAX_DEVICE_GROUP_SIZE)]](),
        modes: DeviceGroupPresentModeFlagsKHR = zero_init[DeviceGroupPresentModeFlagsKHR](),
    ):
        self.s_type = StructureType.DEVICE_GROUP_PRESENT_CAPABILITIES_KHR
        self.p_next = p_next
        self.present_mask = present_mask
        self.modes = modes


struct ImageSwapchainCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain: SwapchainKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain: SwapchainKHR = zero_init[SwapchainKHR](),
    ):
        self.s_type = StructureType.IMAGE_SWAPCHAIN_CREATE_INFO_KHR
        self.p_next = p_next
        self.swapchain = swapchain


struct BindImageMemorySwapchainInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain: SwapchainKHR
    var image_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain: SwapchainKHR = zero_init[SwapchainKHR](),
        image_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR
        self.p_next = p_next
        self.swapchain = swapchain
        self.image_index = image_index


struct AcquireNextImageInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain: SwapchainKHR
    var timeout: UInt64
    var semaphore: Semaphore
    var fence: Fence
    var device_mask: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain: SwapchainKHR = zero_init[SwapchainKHR](),
        timeout: UInt64 = zero_init[UInt64](),
        semaphore: Semaphore = zero_init[Semaphore](),
        fence: Fence = zero_init[Fence](),
        device_mask: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.ACQUIRE_NEXT_IMAGE_INFO_KHR
        self.p_next = p_next
        self.swapchain = swapchain
        self.timeout = timeout
        self.semaphore = semaphore
        self.fence = fence
        self.device_mask = device_mask


struct DeviceGroupPresentInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain_count: UInt32
    var p_device_masks: Ptr[UInt32]
    var mode: DeviceGroupPresentModeFlagBitsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain_count: UInt32 = zero_init[UInt32](),
        p_device_masks: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        mode: DeviceGroupPresentModeFlagBitsKHR = zero_init[DeviceGroupPresentModeFlagBitsKHR](),
    ):
        self.s_type = StructureType.DEVICE_GROUP_PRESENT_INFO_KHR
        self.p_next = p_next
        self.swapchain_count = swapchain_count
        self.p_device_masks = p_device_masks
        self.mode = mode


struct DeviceGroupDeviceCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var physical_device_count: UInt32
    var p_physical_devices: Ptr[PhysicalDevice]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        physical_device_count: UInt32 = zero_init[UInt32](),
        p_physical_devices: Ptr[PhysicalDevice] = zero_init[Ptr[PhysicalDevice]](),
    ):
        self.s_type = StructureType.DEVICE_GROUP_DEVICE_CREATE_INFO
        self.p_next = p_next
        self.physical_device_count = physical_device_count
        self.p_physical_devices = p_physical_devices


struct DeviceGroupSwapchainCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var modes: DeviceGroupPresentModeFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        modes: DeviceGroupPresentModeFlagsKHR = zero_init[DeviceGroupPresentModeFlagsKHR](),
    ):
        self.s_type = StructureType.DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR
        self.p_next = p_next
        self.modes = modes


struct DescriptorUpdateTemplateEntry(ImplicitlyCopyable, Movable):
    var dst_binding: UInt32
    var dst_array_element: UInt32
    var descriptor_count: UInt32
    var descriptor_type: DescriptorType
    var offset: UInt
    var stride: UInt

    fn __init__(
        out self,
        dst_binding: UInt32 = zero_init[UInt32](),
        dst_array_element: UInt32 = zero_init[UInt32](),
        descriptor_count: UInt32 = zero_init[UInt32](),
        descriptor_type: DescriptorType = zero_init[DescriptorType](),
        offset: UInt = zero_init[UInt](),
        stride: UInt = zero_init[UInt](),
    ):
        self.dst_binding = dst_binding
        self.dst_array_element = dst_array_element
        self.descriptor_count = descriptor_count
        self.descriptor_type = descriptor_type
        self.offset = offset
        self.stride = stride


struct DescriptorUpdateTemplateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DescriptorUpdateTemplateCreateFlags
    var descriptor_update_entry_count: UInt32
    var p_descriptor_update_entries: Ptr[DescriptorUpdateTemplateEntry]
    var template_type: DescriptorUpdateTemplateType
    var descriptor_set_layout: DescriptorSetLayout
    var pipeline_bind_point: PipelineBindPoint
    var pipeline_layout: PipelineLayout
    var set: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DescriptorUpdateTemplateCreateFlags = zero_init[DescriptorUpdateTemplateCreateFlags](),
        descriptor_update_entry_count: UInt32 = zero_init[UInt32](),
        p_descriptor_update_entries: Ptr[DescriptorUpdateTemplateEntry] = zero_init[Ptr[DescriptorUpdateTemplateEntry]](),
        template_type: DescriptorUpdateTemplateType = zero_init[DescriptorUpdateTemplateType](),
        descriptor_set_layout: DescriptorSetLayout = zero_init[DescriptorSetLayout](),
        pipeline_bind_point: PipelineBindPoint = zero_init[PipelineBindPoint](),
        pipeline_layout: PipelineLayout = zero_init[PipelineLayout](),
        set: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO
        self.p_next = p_next
        self.flags = flags
        self.descriptor_update_entry_count = descriptor_update_entry_count
        self.p_descriptor_update_entries = p_descriptor_update_entries
        self.template_type = template_type
        self.descriptor_set_layout = descriptor_set_layout
        self.pipeline_bind_point = pipeline_bind_point
        self.pipeline_layout = pipeline_layout
        self.set = set


struct XYColorEXT(ImplicitlyCopyable, Movable):
    var x: Float32
    var y: Float32

    fn __init__(
        out self,
        x: Float32 = zero_init[Float32](),
        y: Float32 = zero_init[Float32](),
    ):
        self.x = x
        self.y = y


struct PhysicalDevicePresentIdFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_id: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_id: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR
        self.p_next = p_next
        self.present_id = present_id


struct PresentIdKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain_count: UInt32
    var p_present_ids: Ptr[UInt64]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain_count: UInt32 = zero_init[UInt32](),
        p_present_ids: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
    ):
        self.s_type = StructureType.PRESENT_ID_KHR
        self.p_next = p_next
        self.swapchain_count = swapchain_count
        self.p_present_ids = p_present_ids


struct PhysicalDevicePresentId2FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_id_2: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_id_2: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRESENT_ID_2_FEATURES_KHR
        self.p_next = p_next
        self.present_id_2 = present_id_2


struct PresentId2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain_count: UInt32
    var p_present_ids: Ptr[UInt64]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain_count: UInt32 = zero_init[UInt32](),
        p_present_ids: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
    ):
        self.s_type = StructureType.PRESENT_ID_2_KHR
        self.p_next = p_next
        self.swapchain_count = swapchain_count
        self.p_present_ids = p_present_ids


struct PresentWait2InfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_id: UInt64
    var timeout: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_id: UInt64 = zero_init[UInt64](),
        timeout: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.PRESENT_WAIT_2_INFO_KHR
        self.p_next = p_next
        self.present_id = present_id
        self.timeout = timeout


struct PhysicalDevicePresentWaitFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_wait: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_wait: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR
        self.p_next = p_next
        self.present_wait = present_wait


struct PhysicalDevicePresentWait2FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_wait_2: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_wait_2: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRESENT_WAIT_2_FEATURES_KHR
        self.p_next = p_next
        self.present_wait_2 = present_wait_2


struct HdrMetadataEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var display_primary_red: XYColorEXT
    var display_primary_green: XYColorEXT
    var display_primary_blue: XYColorEXT
    var white_point: XYColorEXT
    var max_luminance: Float32
    var min_luminance: Float32
    var max_content_light_level: Float32
    var max_frame_average_light_level: Float32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        display_primary_red: XYColorEXT = zero_init[XYColorEXT](),
        display_primary_green: XYColorEXT = zero_init[XYColorEXT](),
        display_primary_blue: XYColorEXT = zero_init[XYColorEXT](),
        white_point: XYColorEXT = zero_init[XYColorEXT](),
        max_luminance: Float32 = zero_init[Float32](),
        min_luminance: Float32 = zero_init[Float32](),
        max_content_light_level: Float32 = zero_init[Float32](),
        max_frame_average_light_level: Float32 = zero_init[Float32](),
    ):
        self.s_type = StructureType.HDR_METADATA_EXT
        self.p_next = p_next
        self.display_primary_red = display_primary_red
        self.display_primary_green = display_primary_green
        self.display_primary_blue = display_primary_blue
        self.white_point = white_point
        self.max_luminance = max_luminance
        self.min_luminance = min_luminance
        self.max_content_light_level = max_content_light_level
        self.max_frame_average_light_level = max_frame_average_light_level


struct HdrVividDynamicMetadataHUAWEI(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dynamic_metadata_size: UInt
    var p_dynamic_metadata: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dynamic_metadata_size: UInt = zero_init[UInt](),
        p_dynamic_metadata: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.HDR_VIVID_DYNAMIC_METADATA_HUAWEI
        self.p_next = p_next
        self.dynamic_metadata_size = dynamic_metadata_size
        self.p_dynamic_metadata = p_dynamic_metadata


struct DisplayNativeHdrSurfaceCapabilitiesAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var local_dimming_support: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        local_dimming_support: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD
        self.p_next = p_next
        self.local_dimming_support = local_dimming_support


struct SwapchainDisplayNativeHdrCreateInfoAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var local_dimming_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        local_dimming_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD
        self.p_next = p_next
        self.local_dimming_enable = local_dimming_enable


struct RefreshCycleDurationGOOGLE(ImplicitlyCopyable, Movable):
    var refresh_duration: UInt64

    fn __init__(
        out self,
        refresh_duration: UInt64 = zero_init[UInt64](),
    ):
        self.refresh_duration = refresh_duration


struct PastPresentationTimingGOOGLE(ImplicitlyCopyable, Movable):
    var present_id: UInt32
    var desired_present_time: UInt64
    var actual_present_time: UInt64
    var earliest_present_time: UInt64
    var present_margin: UInt64

    fn __init__(
        out self,
        present_id: UInt32 = zero_init[UInt32](),
        desired_present_time: UInt64 = zero_init[UInt64](),
        actual_present_time: UInt64 = zero_init[UInt64](),
        earliest_present_time: UInt64 = zero_init[UInt64](),
        present_margin: UInt64 = zero_init[UInt64](),
    ):
        self.present_id = present_id
        self.desired_present_time = desired_present_time
        self.actual_present_time = actual_present_time
        self.earliest_present_time = earliest_present_time
        self.present_margin = present_margin


struct PresentTimesInfoGOOGLE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain_count: UInt32
    var p_times: Ptr[PresentTimeGOOGLE]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain_count: UInt32 = zero_init[UInt32](),
        p_times: Ptr[PresentTimeGOOGLE] = zero_init[Ptr[PresentTimeGOOGLE]](),
    ):
        self.s_type = StructureType.PRESENT_TIMES_INFO_GOOGLE
        self.p_next = p_next
        self.swapchain_count = swapchain_count
        self.p_times = p_times


struct PresentTimeGOOGLE(ImplicitlyCopyable, Movable):
    var present_id: UInt32
    var desired_present_time: UInt64

    fn __init__(
        out self,
        present_id: UInt32 = zero_init[UInt32](),
        desired_present_time: UInt64 = zero_init[UInt64](),
    ):
        self.present_id = present_id
        self.desired_present_time = desired_present_time


struct IOSSurfaceCreateInfoMVK(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: IOSSurfaceCreateFlagsMVK
    var p_view: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: IOSSurfaceCreateFlagsMVK = zero_init[IOSSurfaceCreateFlagsMVK](),
        p_view: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.IOS_SURFACE_CREATE_INFO_MVK
        self.p_next = p_next
        self.flags = flags
        self.p_view = p_view


struct MacOSSurfaceCreateInfoMVK(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: MacOSSurfaceCreateFlagsMVK
    var p_view: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: MacOSSurfaceCreateFlagsMVK = zero_init[MacOSSurfaceCreateFlagsMVK](),
        p_view: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.MACOS_SURFACE_CREATE_INFO_MVK
        self.p_next = p_next
        self.flags = flags
        self.p_view = p_view


struct MetalSurfaceCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: MetalSurfaceCreateFlagsEXT
    var p_layer: Ptr[CAMetalLayer]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: MetalSurfaceCreateFlagsEXT = zero_init[MetalSurfaceCreateFlagsEXT](),
        p_layer: Ptr[CAMetalLayer] = zero_init[Ptr[CAMetalLayer]](),
    ):
        self.s_type = StructureType.METAL_SURFACE_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.p_layer = p_layer


struct ViewportWScalingNV(ImplicitlyCopyable, Movable):
    var xcoeff: Float32
    var ycoeff: Float32

    fn __init__(
        out self,
        xcoeff: Float32 = zero_init[Float32](),
        ycoeff: Float32 = zero_init[Float32](),
    ):
        self.xcoeff = xcoeff
        self.ycoeff = ycoeff


struct PipelineViewportWScalingStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var viewport_w_scaling_enable: Bool32
    var viewport_count: UInt32
    var p_viewport_w_scalings: Ptr[ViewportWScalingNV]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        viewport_w_scaling_enable: Bool32 = zero_init[Bool32](),
        viewport_count: UInt32 = zero_init[UInt32](),
        p_viewport_w_scalings: Ptr[ViewportWScalingNV] = zero_init[Ptr[ViewportWScalingNV]](),
    ):
        self.s_type = StructureType.PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.viewport_w_scaling_enable = viewport_w_scaling_enable
        self.viewport_count = viewport_count
        self.p_viewport_w_scalings = p_viewport_w_scalings


struct ViewportSwizzleNV(ImplicitlyCopyable, Movable):
    var x: ViewportCoordinateSwizzleNV
    var y: ViewportCoordinateSwizzleNV
    var z: ViewportCoordinateSwizzleNV
    var w: ViewportCoordinateSwizzleNV

    fn __init__(
        out self,
        x: ViewportCoordinateSwizzleNV = zero_init[ViewportCoordinateSwizzleNV](),
        y: ViewportCoordinateSwizzleNV = zero_init[ViewportCoordinateSwizzleNV](),
        z: ViewportCoordinateSwizzleNV = zero_init[ViewportCoordinateSwizzleNV](),
        w: ViewportCoordinateSwizzleNV = zero_init[ViewportCoordinateSwizzleNV](),
    ):
        self.x = x
        self.y = y
        self.z = z
        self.w = w


struct PipelineViewportSwizzleStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineViewportSwizzleStateCreateFlagsNV
    var viewport_count: UInt32
    var p_viewport_swizzles: Ptr[ViewportSwizzleNV]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineViewportSwizzleStateCreateFlagsNV = zero_init[PipelineViewportSwizzleStateCreateFlagsNV](),
        viewport_count: UInt32 = zero_init[UInt32](),
        p_viewport_swizzles: Ptr[ViewportSwizzleNV] = zero_init[Ptr[ViewportSwizzleNV]](),
    ):
        self.s_type = StructureType.PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.flags = flags
        self.viewport_count = viewport_count
        self.p_viewport_swizzles = p_viewport_swizzles


struct PhysicalDeviceDiscardRectanglePropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_discard_rectangles: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_discard_rectangles: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT
        self.p_next = p_next
        self.max_discard_rectangles = max_discard_rectangles


struct PipelineDiscardRectangleStateCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineDiscardRectangleStateCreateFlagsEXT
    var discard_rectangle_mode: DiscardRectangleModeEXT
    var discard_rectangle_count: UInt32
    var p_discard_rectangles: Ptr[Rect2D]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineDiscardRectangleStateCreateFlagsEXT = zero_init[PipelineDiscardRectangleStateCreateFlagsEXT](),
        discard_rectangle_mode: DiscardRectangleModeEXT = zero_init[DiscardRectangleModeEXT](),
        discard_rectangle_count: UInt32 = zero_init[UInt32](),
        p_discard_rectangles: Ptr[Rect2D] = zero_init[Ptr[Rect2D]](),
    ):
        self.s_type = StructureType.PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.discard_rectangle_mode = discard_rectangle_mode
        self.discard_rectangle_count = discard_rectangle_count
        self.p_discard_rectangles = p_discard_rectangles


struct PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var per_view_position_all_components: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        per_view_position_all_components: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX
        self.p_next = p_next
        self.per_view_position_all_components = per_view_position_all_components


struct InputAttachmentAspectReference(ImplicitlyCopyable, Movable):
    var subpass: UInt32
    var input_attachment_index: UInt32
    var aspect_mask: ImageAspectFlags

    fn __init__(
        out self,
        subpass: UInt32 = zero_init[UInt32](),
        input_attachment_index: UInt32 = zero_init[UInt32](),
        aspect_mask: ImageAspectFlags = zero_init[ImageAspectFlags](),
    ):
        self.subpass = subpass
        self.input_attachment_index = input_attachment_index
        self.aspect_mask = aspect_mask


struct RenderPassInputAttachmentAspectCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var aspect_reference_count: UInt32
    var p_aspect_references: Ptr[InputAttachmentAspectReference]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        aspect_reference_count: UInt32 = zero_init[UInt32](),
        p_aspect_references: Ptr[InputAttachmentAspectReference] = zero_init[Ptr[InputAttachmentAspectReference]](),
    ):
        self.s_type = StructureType.RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO
        self.p_next = p_next
        self.aspect_reference_count = aspect_reference_count
        self.p_aspect_references = p_aspect_references


struct PhysicalDeviceSurfaceInfo2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var surface: SurfaceKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        surface: SurfaceKHR = zero_init[SurfaceKHR](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SURFACE_INFO_2_KHR
        self.p_next = p_next
        self.surface = surface


struct SurfaceCapabilities2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var surface_capabilities: SurfaceCapabilitiesKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        surface_capabilities: SurfaceCapabilitiesKHR = zero_init[SurfaceCapabilitiesKHR](),
    ):
        self.s_type = StructureType.SURFACE_CAPABILITIES_2_KHR
        self.p_next = p_next
        self.surface_capabilities = surface_capabilities


struct SurfaceFormat2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var surface_format: SurfaceFormatKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        surface_format: SurfaceFormatKHR = zero_init[SurfaceFormatKHR](),
    ):
        self.s_type = StructureType.SURFACE_FORMAT_2_KHR
        self.p_next = p_next
        self.surface_format = surface_format


struct DisplayProperties2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var display_properties: DisplayPropertiesKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        display_properties: DisplayPropertiesKHR = zero_init[DisplayPropertiesKHR](),
    ):
        self.s_type = StructureType.DISPLAY_PROPERTIES_2_KHR
        self.p_next = p_next
        self.display_properties = display_properties


struct DisplayPlaneProperties2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var display_plane_properties: DisplayPlanePropertiesKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        display_plane_properties: DisplayPlanePropertiesKHR = zero_init[DisplayPlanePropertiesKHR](),
    ):
        self.s_type = StructureType.DISPLAY_PLANE_PROPERTIES_2_KHR
        self.p_next = p_next
        self.display_plane_properties = display_plane_properties


struct DisplayModeProperties2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var display_mode_properties: DisplayModePropertiesKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        display_mode_properties: DisplayModePropertiesKHR = zero_init[DisplayModePropertiesKHR](),
    ):
        self.s_type = StructureType.DISPLAY_MODE_PROPERTIES_2_KHR
        self.p_next = p_next
        self.display_mode_properties = display_mode_properties


struct DisplayModeStereoPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var hdmi_3_d_supported: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        hdmi_3_d_supported: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.DISPLAY_MODE_STEREO_PROPERTIES_NV
        self.p_next = p_next
        self.hdmi_3_d_supported = hdmi_3_d_supported


struct DisplayPlaneInfo2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var mode: DisplayModeKHR
    var plane_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        mode: DisplayModeKHR = zero_init[DisplayModeKHR](),
        plane_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DISPLAY_PLANE_INFO_2_KHR
        self.p_next = p_next
        self.mode = mode
        self.plane_index = plane_index


struct DisplayPlaneCapabilities2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var capabilities: DisplayPlaneCapabilitiesKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        capabilities: DisplayPlaneCapabilitiesKHR = zero_init[DisplayPlaneCapabilitiesKHR](),
    ):
        self.s_type = StructureType.DISPLAY_PLANE_CAPABILITIES_2_KHR
        self.p_next = p_next
        self.capabilities = capabilities


struct SharedPresentSurfaceCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shared_present_supported_usage_flags: ImageUsageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shared_present_supported_usage_flags: ImageUsageFlags = zero_init[ImageUsageFlags](),
    ):
        self.s_type = StructureType.SHARED_PRESENT_SURFACE_CAPABILITIES_KHR
        self.p_next = p_next
        self.shared_present_supported_usage_flags = shared_present_supported_usage_flags


struct PhysicalDevice16BitStorageFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var storage_buffer_16_bit_access: Bool32
    var uniform_and_storage_buffer_16_bit_access: Bool32
    var storage_push_constant_16: Bool32
    var storage_input_output_16: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        storage_buffer_16_bit_access: Bool32 = zero_init[Bool32](),
        uniform_and_storage_buffer_16_bit_access: Bool32 = zero_init[Bool32](),
        storage_push_constant_16: Bool32 = zero_init[Bool32](),
        storage_input_output_16: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES
        self.p_next = p_next
        self.storage_buffer_16_bit_access = storage_buffer_16_bit_access
        self.uniform_and_storage_buffer_16_bit_access = uniform_and_storage_buffer_16_bit_access
        self.storage_push_constant_16 = storage_push_constant_16
        self.storage_input_output_16 = storage_input_output_16


struct PhysicalDeviceSubgroupProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var subgroup_size: UInt32
    var supported_stages: ShaderStageFlags
    var supported_operations: SubgroupFeatureFlags
    var quad_operations_in_all_stages: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        subgroup_size: UInt32 = zero_init[UInt32](),
        supported_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
        supported_operations: SubgroupFeatureFlags = zero_init[SubgroupFeatureFlags](),
        quad_operations_in_all_stages: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SUBGROUP_PROPERTIES
        self.p_next = p_next
        self.subgroup_size = subgroup_size
        self.supported_stages = supported_stages
        self.supported_operations = supported_operations
        self.quad_operations_in_all_stages = quad_operations_in_all_stages


struct PhysicalDeviceShaderSubgroupExtendedTypesFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_subgroup_extended_types: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_subgroup_extended_types: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES
        self.p_next = p_next
        self.shader_subgroup_extended_types = shader_subgroup_extended_types


struct BufferMemoryRequirementsInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer: Buffer

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer: Buffer = zero_init[Buffer](),
    ):
        self.s_type = StructureType.BUFFER_MEMORY_REQUIREMENTS_INFO_2
        self.p_next = p_next
        self.buffer = buffer


struct DeviceBufferMemoryRequirements(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_create_info: Ptr[BufferCreateInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_create_info: Ptr[BufferCreateInfo] = zero_init[Ptr[BufferCreateInfo]](),
    ):
        self.s_type = StructureType.DEVICE_BUFFER_MEMORY_REQUIREMENTS
        self.p_next = p_next
        self.p_create_info = p_create_info


struct ImageMemoryRequirementsInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image: Image

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image: Image = zero_init[Image](),
    ):
        self.s_type = StructureType.IMAGE_MEMORY_REQUIREMENTS_INFO_2
        self.p_next = p_next
        self.image = image


struct ImageSparseMemoryRequirementsInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image: Image

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image: Image = zero_init[Image](),
    ):
        self.s_type = StructureType.IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2
        self.p_next = p_next
        self.image = image


struct DeviceImageMemoryRequirements(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_create_info: Ptr[ImageCreateInfo]
    var plane_aspect: ImageAspectFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_create_info: Ptr[ImageCreateInfo] = zero_init[Ptr[ImageCreateInfo]](),
        plane_aspect: ImageAspectFlagBits = zero_init[ImageAspectFlagBits](),
    ):
        self.s_type = StructureType.DEVICE_IMAGE_MEMORY_REQUIREMENTS
        self.p_next = p_next
        self.p_create_info = p_create_info
        self.plane_aspect = plane_aspect


struct MemoryRequirements2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_requirements: MemoryRequirements

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_requirements: MemoryRequirements = zero_init[MemoryRequirements](),
    ):
        self.s_type = StructureType.MEMORY_REQUIREMENTS_2
        self.p_next = p_next
        self.memory_requirements = memory_requirements


struct SparseImageMemoryRequirements2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_requirements: SparseImageMemoryRequirements

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_requirements: SparseImageMemoryRequirements = zero_init[SparseImageMemoryRequirements](),
    ):
        self.s_type = StructureType.SPARSE_IMAGE_MEMORY_REQUIREMENTS_2
        self.p_next = p_next
        self.memory_requirements = memory_requirements


struct PhysicalDevicePointClippingProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var point_clipping_behavior: PointClippingBehavior

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        point_clipping_behavior: PointClippingBehavior = zero_init[PointClippingBehavior](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES
        self.p_next = p_next
        self.point_clipping_behavior = point_clipping_behavior


struct MemoryDedicatedRequirements(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var prefers_dedicated_allocation: Bool32
    var requires_dedicated_allocation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        prefers_dedicated_allocation: Bool32 = zero_init[Bool32](),
        requires_dedicated_allocation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.MEMORY_DEDICATED_REQUIREMENTS
        self.p_next = p_next
        self.prefers_dedicated_allocation = prefers_dedicated_allocation
        self.requires_dedicated_allocation = requires_dedicated_allocation


struct MemoryDedicatedAllocateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image: Image
    var buffer: Buffer

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image: Image = zero_init[Image](),
        buffer: Buffer = zero_init[Buffer](),
    ):
        self.s_type = StructureType.MEMORY_DEDICATED_ALLOCATE_INFO
        self.p_next = p_next
        self.image = image
        self.buffer = buffer


struct ImageViewUsageCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var usage: ImageUsageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        usage: ImageUsageFlags = zero_init[ImageUsageFlags](),
    ):
        self.s_type = StructureType.IMAGE_VIEW_USAGE_CREATE_INFO
        self.p_next = p_next
        self.usage = usage


struct ImageViewSlicedCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var slice_offset: UInt32
    var slice_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        slice_offset: UInt32 = zero_init[UInt32](),
        slice_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.IMAGE_VIEW_SLICED_CREATE_INFO_EXT
        self.p_next = p_next
        self.slice_offset = slice_offset
        self.slice_count = slice_count


struct PipelineTessellationDomainOriginStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var domain_origin: TessellationDomainOrigin

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        domain_origin: TessellationDomainOrigin = zero_init[TessellationDomainOrigin](),
    ):
        self.s_type = StructureType.PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO
        self.p_next = p_next
        self.domain_origin = domain_origin


struct SamplerYcbcrConversionInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var conversion: SamplerYcbcrConversion

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        conversion: SamplerYcbcrConversion = zero_init[SamplerYcbcrConversion](),
    ):
        self.s_type = StructureType.SAMPLER_YCBCR_CONVERSION_INFO
        self.p_next = p_next
        self.conversion = conversion


struct SamplerYcbcrConversionCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format: Format
    var ycbcr_model: SamplerYcbcrModelConversion
    var ycbcr_range: SamplerYcbcrRange
    var components: ComponentMapping
    var x_chroma_offset: ChromaLocation
    var y_chroma_offset: ChromaLocation
    var chroma_filter: Filter
    var force_explicit_reconstruction: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format: Format = zero_init[Format](),
        ycbcr_model: SamplerYcbcrModelConversion = zero_init[SamplerYcbcrModelConversion](),
        ycbcr_range: SamplerYcbcrRange = zero_init[SamplerYcbcrRange](),
        components: ComponentMapping = zero_init[ComponentMapping](),
        x_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
        y_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
        chroma_filter: Filter = zero_init[Filter](),
        force_explicit_reconstruction: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SAMPLER_YCBCR_CONVERSION_CREATE_INFO
        self.p_next = p_next
        self.format = format
        self.ycbcr_model = ycbcr_model
        self.ycbcr_range = ycbcr_range
        self.components = components
        self.x_chroma_offset = x_chroma_offset
        self.y_chroma_offset = y_chroma_offset
        self.chroma_filter = chroma_filter
        self.force_explicit_reconstruction = force_explicit_reconstruction


struct BindImagePlaneMemoryInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var plane_aspect: ImageAspectFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        plane_aspect: ImageAspectFlagBits = zero_init[ImageAspectFlagBits](),
    ):
        self.s_type = StructureType.BIND_IMAGE_PLANE_MEMORY_INFO
        self.p_next = p_next
        self.plane_aspect = plane_aspect


struct ImagePlaneMemoryRequirementsInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var plane_aspect: ImageAspectFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        plane_aspect: ImageAspectFlagBits = zero_init[ImageAspectFlagBits](),
    ):
        self.s_type = StructureType.IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO
        self.p_next = p_next
        self.plane_aspect = plane_aspect


struct PhysicalDeviceSamplerYcbcrConversionFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sampler_ycbcr_conversion: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sampler_ycbcr_conversion: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES
        self.p_next = p_next
        self.sampler_ycbcr_conversion = sampler_ycbcr_conversion


struct SamplerYcbcrConversionImageFormatProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var combined_image_sampler_descriptor_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        combined_image_sampler_descriptor_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES
        self.p_next = p_next
        self.combined_image_sampler_descriptor_count = combined_image_sampler_descriptor_count


struct TextureLODGatherFormatPropertiesAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var supports_texture_gather_lod_bias_amd: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        supports_texture_gather_lod_bias_amd: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD
        self.p_next = p_next
        self.supports_texture_gather_lod_bias_amd = supports_texture_gather_lod_bias_amd


struct ConditionalRenderingBeginInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer: Buffer
    var offset: DeviceSize
    var flags: ConditionalRenderingFlagsEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer: Buffer = zero_init[Buffer](),
        offset: DeviceSize = zero_init[DeviceSize](),
        flags: ConditionalRenderingFlagsEXT = zero_init[ConditionalRenderingFlagsEXT](),
    ):
        self.s_type = StructureType.CONDITIONAL_RENDERING_BEGIN_INFO_EXT
        self.p_next = p_next
        self.buffer = buffer
        self.offset = offset
        self.flags = flags


struct ProtectedSubmitInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var protected_submit: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        protected_submit: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PROTECTED_SUBMIT_INFO
        self.p_next = p_next
        self.protected_submit = protected_submit


struct PhysicalDeviceProtectedMemoryFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var protected_memory: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        protected_memory: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES
        self.p_next = p_next
        self.protected_memory = protected_memory


struct PhysicalDeviceProtectedMemoryProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var protected_no_fault: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        protected_no_fault: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES
        self.p_next = p_next
        self.protected_no_fault = protected_no_fault


struct DeviceQueueInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DeviceQueueCreateFlags
    var queue_family_index: UInt32
    var queue_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DeviceQueueCreateFlags = zero_init[DeviceQueueCreateFlags](),
        queue_family_index: UInt32 = zero_init[UInt32](),
        queue_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DEVICE_QUEUE_INFO_2
        self.p_next = p_next
        self.flags = flags
        self.queue_family_index = queue_family_index
        self.queue_index = queue_index


struct PipelineCoverageToColorStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCoverageToColorStateCreateFlagsNV
    var coverage_to_color_enable: Bool32
    var coverage_to_color_location: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCoverageToColorStateCreateFlagsNV = zero_init[PipelineCoverageToColorStateCreateFlagsNV](),
        coverage_to_color_enable: Bool32 = zero_init[Bool32](),
        coverage_to_color_location: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.flags = flags
        self.coverage_to_color_enable = coverage_to_color_enable
        self.coverage_to_color_location = coverage_to_color_location


struct PhysicalDeviceSamplerFilterMinmaxProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var filter_minmax_single_component_formats: Bool32
    var filter_minmax_image_component_mapping: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        filter_minmax_single_component_formats: Bool32 = zero_init[Bool32](),
        filter_minmax_image_component_mapping: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES
        self.p_next = p_next
        self.filter_minmax_single_component_formats = filter_minmax_single_component_formats
        self.filter_minmax_image_component_mapping = filter_minmax_image_component_mapping


struct SampleLocationEXT(ImplicitlyCopyable, Movable):
    var x: Float32
    var y: Float32

    fn __init__(
        out self,
        x: Float32 = zero_init[Float32](),
        y: Float32 = zero_init[Float32](),
    ):
        self.x = x
        self.y = y


struct SampleLocationsInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sample_locations_per_pixel: SampleCountFlagBits
    var sample_location_grid_size: Extent2D
    var sample_locations_count: UInt32
    var p_sample_locations: Ptr[SampleLocationEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sample_locations_per_pixel: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
        sample_location_grid_size: Extent2D = zero_init[Extent2D](),
        sample_locations_count: UInt32 = zero_init[UInt32](),
        p_sample_locations: Ptr[SampleLocationEXT] = zero_init[Ptr[SampleLocationEXT]](),
    ):
        self.s_type = StructureType.SAMPLE_LOCATIONS_INFO_EXT
        self.p_next = p_next
        self.sample_locations_per_pixel = sample_locations_per_pixel
        self.sample_location_grid_size = sample_location_grid_size
        self.sample_locations_count = sample_locations_count
        self.p_sample_locations = p_sample_locations


struct AttachmentSampleLocationsEXT(ImplicitlyCopyable, Movable):
    var attachment_index: UInt32
    var sample_locations_info: SampleLocationsInfoEXT

    fn __init__(
        out self,
        attachment_index: UInt32 = zero_init[UInt32](),
        sample_locations_info: SampleLocationsInfoEXT = zero_init[SampleLocationsInfoEXT](),
    ):
        self.attachment_index = attachment_index
        self.sample_locations_info = sample_locations_info


struct SubpassSampleLocationsEXT(ImplicitlyCopyable, Movable):
    var subpass_index: UInt32
    var sample_locations_info: SampleLocationsInfoEXT

    fn __init__(
        out self,
        subpass_index: UInt32 = zero_init[UInt32](),
        sample_locations_info: SampleLocationsInfoEXT = zero_init[SampleLocationsInfoEXT](),
    ):
        self.subpass_index = subpass_index
        self.sample_locations_info = sample_locations_info


struct RenderPassSampleLocationsBeginInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var attachment_initial_sample_locations_count: UInt32
    var p_attachment_initial_sample_locations: Ptr[AttachmentSampleLocationsEXT]
    var post_subpass_sample_locations_count: UInt32
    var p_post_subpass_sample_locations: Ptr[SubpassSampleLocationsEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        attachment_initial_sample_locations_count: UInt32 = zero_init[UInt32](),
        p_attachment_initial_sample_locations: Ptr[AttachmentSampleLocationsEXT] = zero_init[Ptr[AttachmentSampleLocationsEXT]](),
        post_subpass_sample_locations_count: UInt32 = zero_init[UInt32](),
        p_post_subpass_sample_locations: Ptr[SubpassSampleLocationsEXT] = zero_init[Ptr[SubpassSampleLocationsEXT]](),
    ):
        self.s_type = StructureType.RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT
        self.p_next = p_next
        self.attachment_initial_sample_locations_count = attachment_initial_sample_locations_count
        self.p_attachment_initial_sample_locations = p_attachment_initial_sample_locations
        self.post_subpass_sample_locations_count = post_subpass_sample_locations_count
        self.p_post_subpass_sample_locations = p_post_subpass_sample_locations


struct PipelineSampleLocationsStateCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sample_locations_enable: Bool32
    var sample_locations_info: SampleLocationsInfoEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sample_locations_enable: Bool32 = zero_init[Bool32](),
        sample_locations_info: SampleLocationsInfoEXT = zero_init[SampleLocationsInfoEXT](),
    ):
        self.s_type = StructureType.PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT
        self.p_next = p_next
        self.sample_locations_enable = sample_locations_enable
        self.sample_locations_info = sample_locations_info


struct PhysicalDeviceSampleLocationsPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sample_location_sample_counts: SampleCountFlags
    var max_sample_location_grid_size: Extent2D
    var sample_location_coordinate_range: InlineArray[Float32, Int(2)]
    var sample_location_sub_pixel_bits: UInt32
    var variable_sample_locations: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sample_location_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        max_sample_location_grid_size: Extent2D = zero_init[Extent2D](),
        sample_location_coordinate_range: InlineArray[Float32, Int(2)] = zero_init[InlineArray[Float32, Int(2)]](),
        sample_location_sub_pixel_bits: UInt32 = zero_init[UInt32](),
        variable_sample_locations: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT
        self.p_next = p_next
        self.sample_location_sample_counts = sample_location_sample_counts
        self.max_sample_location_grid_size = max_sample_location_grid_size
        self.sample_location_coordinate_range = sample_location_coordinate_range
        self.sample_location_sub_pixel_bits = sample_location_sub_pixel_bits
        self.variable_sample_locations = variable_sample_locations


struct MultisamplePropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_sample_location_grid_size: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_sample_location_grid_size: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.MULTISAMPLE_PROPERTIES_EXT
        self.p_next = p_next
        self.max_sample_location_grid_size = max_sample_location_grid_size


struct SamplerReductionModeCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var reduction_mode: SamplerReductionMode

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        reduction_mode: SamplerReductionMode = zero_init[SamplerReductionMode](),
    ):
        self.s_type = StructureType.SAMPLER_REDUCTION_MODE_CREATE_INFO
        self.p_next = p_next
        self.reduction_mode = reduction_mode


struct PhysicalDeviceBlendOperationAdvancedFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var advanced_blend_coherent_operations: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        advanced_blend_coherent_operations: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT
        self.p_next = p_next
        self.advanced_blend_coherent_operations = advanced_blend_coherent_operations


struct PhysicalDeviceMultiDrawFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var multi_draw: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        multi_draw: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT
        self.p_next = p_next
        self.multi_draw = multi_draw


struct PhysicalDeviceBlendOperationAdvancedPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var advanced_blend_max_color_attachments: UInt32
    var advanced_blend_independent_blend: Bool32
    var advanced_blend_non_premultiplied_src_color: Bool32
    var advanced_blend_non_premultiplied_dst_color: Bool32
    var advanced_blend_correlated_overlap: Bool32
    var advanced_blend_all_operations: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        advanced_blend_max_color_attachments: UInt32 = zero_init[UInt32](),
        advanced_blend_independent_blend: Bool32 = zero_init[Bool32](),
        advanced_blend_non_premultiplied_src_color: Bool32 = zero_init[Bool32](),
        advanced_blend_non_premultiplied_dst_color: Bool32 = zero_init[Bool32](),
        advanced_blend_correlated_overlap: Bool32 = zero_init[Bool32](),
        advanced_blend_all_operations: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT
        self.p_next = p_next
        self.advanced_blend_max_color_attachments = advanced_blend_max_color_attachments
        self.advanced_blend_independent_blend = advanced_blend_independent_blend
        self.advanced_blend_non_premultiplied_src_color = advanced_blend_non_premultiplied_src_color
        self.advanced_blend_non_premultiplied_dst_color = advanced_blend_non_premultiplied_dst_color
        self.advanced_blend_correlated_overlap = advanced_blend_correlated_overlap
        self.advanced_blend_all_operations = advanced_blend_all_operations


struct PipelineColorBlendAdvancedStateCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_premultiplied: Bool32
    var dst_premultiplied: Bool32
    var blend_overlap: BlendOverlapEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_premultiplied: Bool32 = zero_init[Bool32](),
        dst_premultiplied: Bool32 = zero_init[Bool32](),
        blend_overlap: BlendOverlapEXT = zero_init[BlendOverlapEXT](),
    ):
        self.s_type = StructureType.PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT
        self.p_next = p_next
        self.src_premultiplied = src_premultiplied
        self.dst_premultiplied = dst_premultiplied
        self.blend_overlap = blend_overlap


struct PhysicalDeviceInlineUniformBlockFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var inline_uniform_block: Bool32
    var descriptor_binding_inline_uniform_block_update_after_bind: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        inline_uniform_block: Bool32 = zero_init[Bool32](),
        descriptor_binding_inline_uniform_block_update_after_bind: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES
        self.p_next = p_next
        self.inline_uniform_block = inline_uniform_block
        self.descriptor_binding_inline_uniform_block_update_after_bind = descriptor_binding_inline_uniform_block_update_after_bind


struct PhysicalDeviceInlineUniformBlockProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_inline_uniform_block_size: UInt32
    var max_per_stage_descriptor_inline_uniform_blocks: UInt32
    var max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: UInt32
    var max_descriptor_set_inline_uniform_blocks: UInt32
    var max_descriptor_set_update_after_bind_inline_uniform_blocks: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_inline_uniform_block_size: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_inline_uniform_blocks: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: UInt32 = zero_init[UInt32](),
        max_descriptor_set_inline_uniform_blocks: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_inline_uniform_blocks: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES
        self.p_next = p_next
        self.max_inline_uniform_block_size = max_inline_uniform_block_size
        self.max_per_stage_descriptor_inline_uniform_blocks = max_per_stage_descriptor_inline_uniform_blocks
        self.max_per_stage_descriptor_update_after_bind_inline_uniform_blocks = max_per_stage_descriptor_update_after_bind_inline_uniform_blocks
        self.max_descriptor_set_inline_uniform_blocks = max_descriptor_set_inline_uniform_blocks
        self.max_descriptor_set_update_after_bind_inline_uniform_blocks = max_descriptor_set_update_after_bind_inline_uniform_blocks


struct WriteDescriptorSetInlineUniformBlock(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var data_size: UInt32
    var p_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        data_size: UInt32 = zero_init[UInt32](),
        p_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK
        self.p_next = p_next
        self.data_size = data_size
        self.p_data = p_data


struct DescriptorPoolInlineUniformBlockCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_inline_uniform_block_bindings: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_inline_uniform_block_bindings: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO
        self.p_next = p_next
        self.max_inline_uniform_block_bindings = max_inline_uniform_block_bindings


struct PipelineCoverageModulationStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCoverageModulationStateCreateFlagsNV
    var coverage_modulation_mode: CoverageModulationModeNV
    var coverage_modulation_table_enable: Bool32
    var coverage_modulation_table_count: UInt32
    var p_coverage_modulation_table: Ptr[Float32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCoverageModulationStateCreateFlagsNV = zero_init[PipelineCoverageModulationStateCreateFlagsNV](),
        coverage_modulation_mode: CoverageModulationModeNV = zero_init[CoverageModulationModeNV](),
        coverage_modulation_table_enable: Bool32 = zero_init[Bool32](),
        coverage_modulation_table_count: UInt32 = zero_init[UInt32](),
        p_coverage_modulation_table: Ptr[Float32] = zero_init[Ptr[Float32]](),
    ):
        self.s_type = StructureType.PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.flags = flags
        self.coverage_modulation_mode = coverage_modulation_mode
        self.coverage_modulation_table_enable = coverage_modulation_table_enable
        self.coverage_modulation_table_count = coverage_modulation_table_count
        self.p_coverage_modulation_table = p_coverage_modulation_table


struct ImageFormatListCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var view_format_count: UInt32
    var p_view_formats: Ptr[Format]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        view_format_count: UInt32 = zero_init[UInt32](),
        p_view_formats: Ptr[Format] = zero_init[Ptr[Format]](),
    ):
        self.s_type = StructureType.IMAGE_FORMAT_LIST_CREATE_INFO
        self.p_next = p_next
        self.view_format_count = view_format_count
        self.p_view_formats = p_view_formats


struct ValidationCacheCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ValidationCacheCreateFlagsEXT
    var initial_data_size: UInt
    var p_initial_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ValidationCacheCreateFlagsEXT = zero_init[ValidationCacheCreateFlagsEXT](),
        initial_data_size: UInt = zero_init[UInt](),
        p_initial_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.VALIDATION_CACHE_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.initial_data_size = initial_data_size
        self.p_initial_data = p_initial_data


struct ShaderModuleValidationCacheCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var validation_cache: ValidationCacheEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        validation_cache: ValidationCacheEXT = zero_init[ValidationCacheEXT](),
    ):
        self.s_type = StructureType.SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT
        self.p_next = p_next
        self.validation_cache = validation_cache


struct PhysicalDeviceMaintenance3Properties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_per_set_descriptors: UInt32
    var max_memory_allocation_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_per_set_descriptors: UInt32 = zero_init[UInt32](),
        max_memory_allocation_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES
        self.p_next = p_next
        self.max_per_set_descriptors = max_per_set_descriptors
        self.max_memory_allocation_size = max_memory_allocation_size


struct PhysicalDeviceMaintenance4Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var maintenance_4: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        maintenance_4: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES
        self.p_next = p_next
        self.maintenance_4 = maintenance_4


struct PhysicalDeviceMaintenance4Properties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_buffer_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_buffer_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES
        self.p_next = p_next
        self.max_buffer_size = max_buffer_size


struct PhysicalDeviceMaintenance5Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var maintenance_5: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        maintenance_5: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES
        self.p_next = p_next
        self.maintenance_5 = maintenance_5


struct PhysicalDeviceMaintenance5Properties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var early_fragment_multisample_coverage_after_sample_counting: Bool32
    var early_fragment_sample_mask_test_before_sample_counting: Bool32
    var depth_stencil_swizzle_one_support: Bool32
    var polygon_mode_point_size: Bool32
    var non_strict_single_pixel_wide_lines_use_parallelogram: Bool32
    var non_strict_wide_lines_use_parallelogram: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        early_fragment_multisample_coverage_after_sample_counting: Bool32 = zero_init[Bool32](),
        early_fragment_sample_mask_test_before_sample_counting: Bool32 = zero_init[Bool32](),
        depth_stencil_swizzle_one_support: Bool32 = zero_init[Bool32](),
        polygon_mode_point_size: Bool32 = zero_init[Bool32](),
        non_strict_single_pixel_wide_lines_use_parallelogram: Bool32 = zero_init[Bool32](),
        non_strict_wide_lines_use_parallelogram: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_5_PROPERTIES
        self.p_next = p_next
        self.early_fragment_multisample_coverage_after_sample_counting = early_fragment_multisample_coverage_after_sample_counting
        self.early_fragment_sample_mask_test_before_sample_counting = early_fragment_sample_mask_test_before_sample_counting
        self.depth_stencil_swizzle_one_support = depth_stencil_swizzle_one_support
        self.polygon_mode_point_size = polygon_mode_point_size
        self.non_strict_single_pixel_wide_lines_use_parallelogram = non_strict_single_pixel_wide_lines_use_parallelogram
        self.non_strict_wide_lines_use_parallelogram = non_strict_wide_lines_use_parallelogram


struct PhysicalDeviceMaintenance6Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var maintenance_6: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        maintenance_6: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES
        self.p_next = p_next
        self.maintenance_6 = maintenance_6


struct PhysicalDeviceMaintenance6Properties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var block_texel_view_compatible_multiple_layers: Bool32
    var max_combined_image_sampler_descriptor_count: UInt32
    var fragment_shading_rate_clamp_combiner_inputs: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        block_texel_view_compatible_multiple_layers: Bool32 = zero_init[Bool32](),
        max_combined_image_sampler_descriptor_count: UInt32 = zero_init[UInt32](),
        fragment_shading_rate_clamp_combiner_inputs: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_6_PROPERTIES
        self.p_next = p_next
        self.block_texel_view_compatible_multiple_layers = block_texel_view_compatible_multiple_layers
        self.max_combined_image_sampler_descriptor_count = max_combined_image_sampler_descriptor_count
        self.fragment_shading_rate_clamp_combiner_inputs = fragment_shading_rate_clamp_combiner_inputs


struct PhysicalDeviceMaintenance7FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var maintenance_7: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        maintenance_7: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR
        self.p_next = p_next
        self.maintenance_7 = maintenance_7


struct PhysicalDeviceMaintenance7PropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var robust_fragment_shading_rate_attachment_access: Bool32
    var separate_depth_stencil_attachment_access: Bool32
    var max_descriptor_set_total_uniform_buffers_dynamic: UInt32
    var max_descriptor_set_total_storage_buffers_dynamic: UInt32
    var max_descriptor_set_total_buffers_dynamic: UInt32
    var max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic: UInt32
    var max_descriptor_set_update_after_bind_total_storage_buffers_dynamic: UInt32
    var max_descriptor_set_update_after_bind_total_buffers_dynamic: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        robust_fragment_shading_rate_attachment_access: Bool32 = zero_init[Bool32](),
        separate_depth_stencil_attachment_access: Bool32 = zero_init[Bool32](),
        max_descriptor_set_total_uniform_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_total_storage_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_total_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_total_storage_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_total_buffers_dynamic: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_7_PROPERTIES_KHR
        self.p_next = p_next
        self.robust_fragment_shading_rate_attachment_access = robust_fragment_shading_rate_attachment_access
        self.separate_depth_stencil_attachment_access = separate_depth_stencil_attachment_access
        self.max_descriptor_set_total_uniform_buffers_dynamic = max_descriptor_set_total_uniform_buffers_dynamic
        self.max_descriptor_set_total_storage_buffers_dynamic = max_descriptor_set_total_storage_buffers_dynamic
        self.max_descriptor_set_total_buffers_dynamic = max_descriptor_set_total_buffers_dynamic
        self.max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic = max_descriptor_set_update_after_bind_total_uniform_buffers_dynamic
        self.max_descriptor_set_update_after_bind_total_storage_buffers_dynamic = max_descriptor_set_update_after_bind_total_storage_buffers_dynamic
        self.max_descriptor_set_update_after_bind_total_buffers_dynamic = max_descriptor_set_update_after_bind_total_buffers_dynamic


struct PhysicalDeviceLayeredApiPropertiesListKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var layered_api_count: UInt32
    var p_layered_apis: Ptr[PhysicalDeviceLayeredApiPropertiesKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        layered_api_count: UInt32 = zero_init[UInt32](),
        p_layered_apis: Ptr[PhysicalDeviceLayeredApiPropertiesKHR] = zero_init[Ptr[PhysicalDeviceLayeredApiPropertiesKHR]](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_LIST_KHR
        self.p_next = p_next
        self.layered_api_count = layered_api_count
        self.p_layered_apis = p_layered_apis


struct PhysicalDeviceLayeredApiPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vendor_id: UInt32
    var device_id: UInt32
    var layered_api: PhysicalDeviceLayeredApiKHR
    var device_name: InlineArray[UInt8, Int(MAX_PHYSICAL_DEVICE_NAME_SIZE)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vendor_id: UInt32 = zero_init[UInt32](),
        device_id: UInt32 = zero_init[UInt32](),
        layered_api: PhysicalDeviceLayeredApiKHR = zero_init[PhysicalDeviceLayeredApiKHR](),
        device_name: InlineArray[UInt8, Int(MAX_PHYSICAL_DEVICE_NAME_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_PHYSICAL_DEVICE_NAME_SIZE)]](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LAYERED_API_PROPERTIES_KHR
        self.p_next = p_next
        self.vendor_id = vendor_id
        self.device_id = device_id
        self.layered_api = layered_api
        self.device_name = device_name

    fn device_name_slice(self) -> StringSlice[__origin_of(self.device_name)]:
        return StringSlice[__origin_of(self.device_name)](unsafe_from_utf8_ptr = self.device_name.unsafe_ptr())


struct PhysicalDeviceLayeredApiVulkanPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var properties: PhysicalDeviceProperties2

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        properties: PhysicalDeviceProperties2 = zero_init[PhysicalDeviceProperties2](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LAYERED_API_VULKAN_PROPERTIES_KHR
        self.p_next = p_next
        self.properties = properties


struct PhysicalDeviceMaintenance8FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var maintenance_8: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        maintenance_8: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR
        self.p_next = p_next
        self.maintenance_8 = maintenance_8


struct PhysicalDeviceMaintenance9FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var maintenance_9: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        maintenance_9: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_9_FEATURES_KHR
        self.p_next = p_next
        self.maintenance_9 = maintenance_9


struct PhysicalDeviceMaintenance9PropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_2_d_view_of_3_d_sparse: Bool32
    var default_vertex_attribute_value: DefaultVertexAttributeValueKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_2_d_view_of_3_d_sparse: Bool32 = zero_init[Bool32](),
        default_vertex_attribute_value: DefaultVertexAttributeValueKHR = zero_init[DefaultVertexAttributeValueKHR](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAINTENANCE_9_PROPERTIES_KHR
        self.p_next = p_next
        self.image_2_d_view_of_3_d_sparse = image_2_d_view_of_3_d_sparse
        self.default_vertex_attribute_value = default_vertex_attribute_value


struct QueueFamilyOwnershipTransferPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var optimal_image_transfer_to_queue_families: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        optimal_image_transfer_to_queue_families: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.QUEUE_FAMILY_OWNERSHIP_TRANSFER_PROPERTIES_KHR
        self.p_next = p_next
        self.optimal_image_transfer_to_queue_families = optimal_image_transfer_to_queue_families


struct RenderingAreaInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var view_mask: UInt32
    var color_attachment_count: UInt32
    var p_color_attachment_formats: Ptr[Format]
    var depth_attachment_format: Format
    var stencil_attachment_format: Format

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        view_mask: UInt32 = zero_init[UInt32](),
        color_attachment_count: UInt32 = zero_init[UInt32](),
        p_color_attachment_formats: Ptr[Format] = zero_init[Ptr[Format]](),
        depth_attachment_format: Format = zero_init[Format](),
        stencil_attachment_format: Format = zero_init[Format](),
    ):
        self.s_type = StructureType.RENDERING_AREA_INFO
        self.p_next = p_next
        self.view_mask = view_mask
        self.color_attachment_count = color_attachment_count
        self.p_color_attachment_formats = p_color_attachment_formats
        self.depth_attachment_format = depth_attachment_format
        self.stencil_attachment_format = stencil_attachment_format


struct DescriptorSetLayoutSupport(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var supported: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        supported: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.DESCRIPTOR_SET_LAYOUT_SUPPORT
        self.p_next = p_next
        self.supported = supported


struct PhysicalDeviceShaderDrawParametersFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_draw_parameters: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_draw_parameters: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES
        self.p_next = p_next
        self.shader_draw_parameters = shader_draw_parameters


struct PhysicalDeviceShaderFloat16Int8Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_float_16: Bool32
    var shader_int_8: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_float_16: Bool32 = zero_init[Bool32](),
        shader_int_8: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES
        self.p_next = p_next
        self.shader_float_16 = shader_float_16
        self.shader_int_8 = shader_int_8


struct PhysicalDeviceFloatControlsProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var denorm_behavior_independence: ShaderFloatControlsIndependence
    var rounding_mode_independence: ShaderFloatControlsIndependence
    var shader_signed_zero_inf_nan_preserve_float_16: Bool32
    var shader_signed_zero_inf_nan_preserve_float_32: Bool32
    var shader_signed_zero_inf_nan_preserve_float_64: Bool32
    var shader_denorm_preserve_float_16: Bool32
    var shader_denorm_preserve_float_32: Bool32
    var shader_denorm_preserve_float_64: Bool32
    var shader_denorm_flush_to_zero_float_16: Bool32
    var shader_denorm_flush_to_zero_float_32: Bool32
    var shader_denorm_flush_to_zero_float_64: Bool32
    var shader_rounding_mode_rte_float_16: Bool32
    var shader_rounding_mode_rte_float_32: Bool32
    var shader_rounding_mode_rte_float_64: Bool32
    var shader_rounding_mode_rtz_float_16: Bool32
    var shader_rounding_mode_rtz_float_32: Bool32
    var shader_rounding_mode_rtz_float_64: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        denorm_behavior_independence: ShaderFloatControlsIndependence = zero_init[ShaderFloatControlsIndependence](),
        rounding_mode_independence: ShaderFloatControlsIndependence = zero_init[ShaderFloatControlsIndependence](),
        shader_signed_zero_inf_nan_preserve_float_16: Bool32 = zero_init[Bool32](),
        shader_signed_zero_inf_nan_preserve_float_32: Bool32 = zero_init[Bool32](),
        shader_signed_zero_inf_nan_preserve_float_64: Bool32 = zero_init[Bool32](),
        shader_denorm_preserve_float_16: Bool32 = zero_init[Bool32](),
        shader_denorm_preserve_float_32: Bool32 = zero_init[Bool32](),
        shader_denorm_preserve_float_64: Bool32 = zero_init[Bool32](),
        shader_denorm_flush_to_zero_float_16: Bool32 = zero_init[Bool32](),
        shader_denorm_flush_to_zero_float_32: Bool32 = zero_init[Bool32](),
        shader_denorm_flush_to_zero_float_64: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rte_float_16: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rte_float_32: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rte_float_64: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rtz_float_16: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rtz_float_32: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rtz_float_64: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES
        self.p_next = p_next
        self.denorm_behavior_independence = denorm_behavior_independence
        self.rounding_mode_independence = rounding_mode_independence
        self.shader_signed_zero_inf_nan_preserve_float_16 = shader_signed_zero_inf_nan_preserve_float_16
        self.shader_signed_zero_inf_nan_preserve_float_32 = shader_signed_zero_inf_nan_preserve_float_32
        self.shader_signed_zero_inf_nan_preserve_float_64 = shader_signed_zero_inf_nan_preserve_float_64
        self.shader_denorm_preserve_float_16 = shader_denorm_preserve_float_16
        self.shader_denorm_preserve_float_32 = shader_denorm_preserve_float_32
        self.shader_denorm_preserve_float_64 = shader_denorm_preserve_float_64
        self.shader_denorm_flush_to_zero_float_16 = shader_denorm_flush_to_zero_float_16
        self.shader_denorm_flush_to_zero_float_32 = shader_denorm_flush_to_zero_float_32
        self.shader_denorm_flush_to_zero_float_64 = shader_denorm_flush_to_zero_float_64
        self.shader_rounding_mode_rte_float_16 = shader_rounding_mode_rte_float_16
        self.shader_rounding_mode_rte_float_32 = shader_rounding_mode_rte_float_32
        self.shader_rounding_mode_rte_float_64 = shader_rounding_mode_rte_float_64
        self.shader_rounding_mode_rtz_float_16 = shader_rounding_mode_rtz_float_16
        self.shader_rounding_mode_rtz_float_32 = shader_rounding_mode_rtz_float_32
        self.shader_rounding_mode_rtz_float_64 = shader_rounding_mode_rtz_float_64


struct PhysicalDeviceHostQueryResetFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var host_query_reset: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        host_query_reset: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES
        self.p_next = p_next
        self.host_query_reset = host_query_reset


struct NativeBufferUsage2ANDROID(ImplicitlyCopyable, Movable):
    var consumer: UInt64
    var producer: UInt64

    fn __init__(
        out self,
        consumer: UInt64 = zero_init[UInt64](),
        producer: UInt64 = zero_init[UInt64](),
    ):
        self.consumer = consumer
        self.producer = producer


struct NativeBufferANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle: Ptr[NoneType]
    var stride: Int32
    var format: Int32
    var usage: Int32
    var usage_2: NativeBufferUsage2ANDROID

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stride: Int32 = zero_init[Int32](),
        format: Int32 = zero_init[Int32](),
        usage: Int32 = zero_init[Int32](),
        usage_2: NativeBufferUsage2ANDROID = zero_init[NativeBufferUsage2ANDROID](),
    ):
        self.s_type = StructureType.NATIVE_BUFFER_ANDROID
        self.p_next = p_next
        self.handle = handle
        self.stride = stride
        self.format = format
        self.usage = usage
        self.usage_2 = usage_2


struct SwapchainImageCreateInfoANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var usage: SwapchainImageUsageFlagsANDROID

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        usage: SwapchainImageUsageFlagsANDROID = zero_init[SwapchainImageUsageFlagsANDROID](),
    ):
        self.s_type = StructureType.SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID
        self.p_next = p_next
        self.usage = usage


struct PhysicalDevicePresentationPropertiesANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shared_image: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shared_image: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID
        self.p_next = p_next
        self.shared_image = shared_image


struct ShaderResourceUsageAMD(ImplicitlyCopyable, Movable):
    var num_used_vgprs: UInt32
    var num_used_sgprs: UInt32
    var lds_size_per_local_work_group: UInt32
    var lds_usage_size_in_bytes: UInt
    var scratch_mem_usage_in_bytes: UInt

    fn __init__(
        out self,
        num_used_vgprs: UInt32 = zero_init[UInt32](),
        num_used_sgprs: UInt32 = zero_init[UInt32](),
        lds_size_per_local_work_group: UInt32 = zero_init[UInt32](),
        lds_usage_size_in_bytes: UInt = zero_init[UInt](),
        scratch_mem_usage_in_bytes: UInt = zero_init[UInt](),
    ):
        self.num_used_vgprs = num_used_vgprs
        self.num_used_sgprs = num_used_sgprs
        self.lds_size_per_local_work_group = lds_size_per_local_work_group
        self.lds_usage_size_in_bytes = lds_usage_size_in_bytes
        self.scratch_mem_usage_in_bytes = scratch_mem_usage_in_bytes


struct ShaderStatisticsInfoAMD(ImplicitlyCopyable, Movable):
    var shader_stage_mask: ShaderStageFlags
    var resource_usage: ShaderResourceUsageAMD
    var num_physical_vgprs: UInt32
    var num_physical_sgprs: UInt32
    var num_available_vgprs: UInt32
    var num_available_sgprs: UInt32
    var compute_work_group_size: InlineArray[UInt32, Int(3)]

    fn __init__(
        out self,
        shader_stage_mask: ShaderStageFlags = zero_init[ShaderStageFlags](),
        resource_usage: ShaderResourceUsageAMD = zero_init[ShaderResourceUsageAMD](),
        num_physical_vgprs: UInt32 = zero_init[UInt32](),
        num_physical_sgprs: UInt32 = zero_init[UInt32](),
        num_available_vgprs: UInt32 = zero_init[UInt32](),
        num_available_sgprs: UInt32 = zero_init[UInt32](),
        compute_work_group_size: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
    ):
        self.shader_stage_mask = shader_stage_mask
        self.resource_usage = resource_usage
        self.num_physical_vgprs = num_physical_vgprs
        self.num_physical_sgprs = num_physical_sgprs
        self.num_available_vgprs = num_available_vgprs
        self.num_available_sgprs = num_available_sgprs
        self.compute_work_group_size = compute_work_group_size


struct DeviceQueueGlobalPriorityCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var global_priority: QueueGlobalPriority

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        global_priority: QueueGlobalPriority = zero_init[QueueGlobalPriority](),
    ):
        self.s_type = StructureType.DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO
        self.p_next = p_next
        self.global_priority = global_priority


struct PhysicalDeviceGlobalPriorityQueryFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var global_priority_query: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        global_priority_query: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES
        self.p_next = p_next
        self.global_priority_query = global_priority_query


struct QueueFamilyGlobalPriorityProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var priority_count: UInt32
    var priorities: InlineArray[QueueGlobalPriority, Int(MAX_GLOBAL_PRIORITY_SIZE)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        priority_count: UInt32 = zero_init[UInt32](),
        priorities: InlineArray[QueueGlobalPriority, Int(MAX_GLOBAL_PRIORITY_SIZE)] = zero_init[InlineArray[QueueGlobalPriority, Int(MAX_GLOBAL_PRIORITY_SIZE)]](),
    ):
        self.s_type = StructureType.QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES
        self.p_next = p_next
        self.priority_count = priority_count
        self.priorities = priorities


struct DebugUtilsObjectNameInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var object_type: ObjectType
    var object_handle: UInt64
    var p_object_name: Ptr[UInt8]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        object_type: ObjectType = zero_init[ObjectType](),
        object_handle: UInt64 = zero_init[UInt64](),
        p_object_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
    ):
        self.s_type = StructureType.DEBUG_UTILS_OBJECT_NAME_INFO_EXT
        self.p_next = p_next
        self.object_type = object_type
        self.object_handle = object_handle
        self.p_object_name = p_object_name


struct DebugUtilsObjectTagInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var object_type: ObjectType
    var object_handle: UInt64
    var tag_name: UInt64
    var tag_size: UInt
    var p_tag: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        object_type: ObjectType = zero_init[ObjectType](),
        object_handle: UInt64 = zero_init[UInt64](),
        tag_name: UInt64 = zero_init[UInt64](),
        tag_size: UInt = zero_init[UInt](),
        p_tag: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.DEBUG_UTILS_OBJECT_TAG_INFO_EXT
        self.p_next = p_next
        self.object_type = object_type
        self.object_handle = object_handle
        self.tag_name = tag_name
        self.tag_size = tag_size
        self.p_tag = p_tag


struct DebugUtilsLabelEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_label_name: Ptr[UInt8]
    var color: InlineArray[Float32, Int(4)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_label_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        color: InlineArray[Float32, Int(4)] = zero_init[InlineArray[Float32, Int(4)]](),
    ):
        self.s_type = StructureType.DEBUG_UTILS_LABEL_EXT
        self.p_next = p_next
        self.p_label_name = p_label_name
        self.color = color


struct DebugUtilsMessengerCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DebugUtilsMessengerCreateFlagsEXT
    var message_severity: DebugUtilsMessageSeverityFlagsEXT
    var message_type: DebugUtilsMessageTypeFlagsEXT
    var pfn_user_callback: PFN_vkDebugUtilsMessengerCallbackEXT
    var p_user_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DebugUtilsMessengerCreateFlagsEXT = zero_init[DebugUtilsMessengerCreateFlagsEXT](),
        message_severity: DebugUtilsMessageSeverityFlagsEXT = zero_init[DebugUtilsMessageSeverityFlagsEXT](),
        message_type: DebugUtilsMessageTypeFlagsEXT = zero_init[DebugUtilsMessageTypeFlagsEXT](),
        pfn_user_callback: PFN_vkDebugUtilsMessengerCallbackEXT = zero_init[PFN_vkDebugUtilsMessengerCallbackEXT](),
        p_user_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.message_severity = message_severity
        self.message_type = message_type
        self.pfn_user_callback = pfn_user_callback
        self.p_user_data = p_user_data


struct DebugUtilsMessengerCallbackDataEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DebugUtilsMessengerCallbackDataFlagsEXT
    var p_message_id_name: Ptr[UInt8]
    var message_id_number: Int32
    var p_message: Ptr[UInt8]
    var queue_label_count: UInt32
    var p_queue_labels: Ptr[DebugUtilsLabelEXT]
    var cmd_buf_label_count: UInt32
    var p_cmd_buf_labels: Ptr[DebugUtilsLabelEXT]
    var object_count: UInt32
    var p_objects: Ptr[DebugUtilsObjectNameInfoEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DebugUtilsMessengerCallbackDataFlagsEXT = zero_init[DebugUtilsMessengerCallbackDataFlagsEXT](),
        p_message_id_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        message_id_number: Int32 = zero_init[Int32](),
        p_message: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        queue_label_count: UInt32 = zero_init[UInt32](),
        p_queue_labels: Ptr[DebugUtilsLabelEXT] = zero_init[Ptr[DebugUtilsLabelEXT]](),
        cmd_buf_label_count: UInt32 = zero_init[UInt32](),
        p_cmd_buf_labels: Ptr[DebugUtilsLabelEXT] = zero_init[Ptr[DebugUtilsLabelEXT]](),
        object_count: UInt32 = zero_init[UInt32](),
        p_objects: Ptr[DebugUtilsObjectNameInfoEXT] = zero_init[Ptr[DebugUtilsObjectNameInfoEXT]](),
    ):
        self.s_type = StructureType.DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT
        self.p_next = p_next
        self.flags = flags
        self.p_message_id_name = p_message_id_name
        self.message_id_number = message_id_number
        self.p_message = p_message
        self.queue_label_count = queue_label_count
        self.p_queue_labels = p_queue_labels
        self.cmd_buf_label_count = cmd_buf_label_count
        self.p_cmd_buf_labels = p_cmd_buf_labels
        self.object_count = object_count
        self.p_objects = p_objects


struct PhysicalDeviceDeviceMemoryReportFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_memory_report: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_memory_report: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT
        self.p_next = p_next
        self.device_memory_report = device_memory_report


struct DeviceDeviceMemoryReportCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DeviceMemoryReportFlagsEXT
    var pfn_user_callback: PFN_vkDeviceMemoryReportCallbackEXT
    var p_user_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DeviceMemoryReportFlagsEXT = zero_init[DeviceMemoryReportFlagsEXT](),
        pfn_user_callback: PFN_vkDeviceMemoryReportCallbackEXT = zero_init[PFN_vkDeviceMemoryReportCallbackEXT](),
        p_user_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.pfn_user_callback = pfn_user_callback
        self.p_user_data = p_user_data


struct DeviceMemoryReportCallbackDataEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DeviceMemoryReportFlagsEXT
    var type: DeviceMemoryReportEventTypeEXT
    var memory_object_id: UInt64
    var size: DeviceSize
    var object_type: ObjectType
    var object_handle: UInt64
    var heap_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DeviceMemoryReportFlagsEXT = zero_init[DeviceMemoryReportFlagsEXT](),
        type: DeviceMemoryReportEventTypeEXT = zero_init[DeviceMemoryReportEventTypeEXT](),
        memory_object_id: UInt64 = zero_init[UInt64](),
        size: DeviceSize = zero_init[DeviceSize](),
        object_type: ObjectType = zero_init[ObjectType](),
        object_handle: UInt64 = zero_init[UInt64](),
        heap_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT
        self.p_next = p_next
        self.flags = flags
        self.type = type
        self.memory_object_id = memory_object_id
        self.size = size
        self.object_type = object_type
        self.object_handle = object_handle
        self.heap_index = heap_index


struct ImportMemoryHostPointerInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_type: ExternalMemoryHandleTypeFlagBits
    var p_host_pointer: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
        p_host_pointer: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.IMPORT_MEMORY_HOST_POINTER_INFO_EXT
        self.p_next = p_next
        self.handle_type = handle_type
        self.p_host_pointer = p_host_pointer


struct MemoryHostPointerPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_type_bits: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.MEMORY_HOST_POINTER_PROPERTIES_EXT
        self.p_next = p_next
        self.memory_type_bits = memory_type_bits


struct PhysicalDeviceExternalMemoryHostPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_imported_host_pointer_alignment: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_imported_host_pointer_alignment: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT
        self.p_next = p_next
        self.min_imported_host_pointer_alignment = min_imported_host_pointer_alignment


struct PhysicalDeviceConservativeRasterizationPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var primitive_overestimation_size: Float32
    var max_extra_primitive_overestimation_size: Float32
    var extra_primitive_overestimation_size_granularity: Float32
    var primitive_underestimation: Bool32
    var conservative_point_and_line_rasterization: Bool32
    var degenerate_triangles_rasterized: Bool32
    var degenerate_lines_rasterized: Bool32
    var fully_covered_fragment_shader_input_variable: Bool32
    var conservative_rasterization_post_depth_coverage: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        primitive_overestimation_size: Float32 = zero_init[Float32](),
        max_extra_primitive_overestimation_size: Float32 = zero_init[Float32](),
        extra_primitive_overestimation_size_granularity: Float32 = zero_init[Float32](),
        primitive_underestimation: Bool32 = zero_init[Bool32](),
        conservative_point_and_line_rasterization: Bool32 = zero_init[Bool32](),
        degenerate_triangles_rasterized: Bool32 = zero_init[Bool32](),
        degenerate_lines_rasterized: Bool32 = zero_init[Bool32](),
        fully_covered_fragment_shader_input_variable: Bool32 = zero_init[Bool32](),
        conservative_rasterization_post_depth_coverage: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT
        self.p_next = p_next
        self.primitive_overestimation_size = primitive_overestimation_size
        self.max_extra_primitive_overestimation_size = max_extra_primitive_overestimation_size
        self.extra_primitive_overestimation_size_granularity = extra_primitive_overestimation_size_granularity
        self.primitive_underestimation = primitive_underestimation
        self.conservative_point_and_line_rasterization = conservative_point_and_line_rasterization
        self.degenerate_triangles_rasterized = degenerate_triangles_rasterized
        self.degenerate_lines_rasterized = degenerate_lines_rasterized
        self.fully_covered_fragment_shader_input_variable = fully_covered_fragment_shader_input_variable
        self.conservative_rasterization_post_depth_coverage = conservative_rasterization_post_depth_coverage


struct CalibratedTimestampInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var time_domain: TimeDomainKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        time_domain: TimeDomainKHR = zero_init[TimeDomainKHR](),
    ):
        self.s_type = StructureType.CALIBRATED_TIMESTAMP_INFO_KHR
        self.p_next = p_next
        self.time_domain = time_domain


struct PhysicalDeviceShaderCorePropertiesAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_engine_count: UInt32
    var shader_arrays_per_engine_count: UInt32
    var compute_units_per_shader_array: UInt32
    var simd_per_compute_unit: UInt32
    var wavefronts_per_simd: UInt32
    var wavefront_size: UInt32
    var sgprs_per_simd: UInt32
    var min_sgpr_allocation: UInt32
    var max_sgpr_allocation: UInt32
    var sgpr_allocation_granularity: UInt32
    var vgprs_per_simd: UInt32
    var min_vgpr_allocation: UInt32
    var max_vgpr_allocation: UInt32
    var vgpr_allocation_granularity: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_engine_count: UInt32 = zero_init[UInt32](),
        shader_arrays_per_engine_count: UInt32 = zero_init[UInt32](),
        compute_units_per_shader_array: UInt32 = zero_init[UInt32](),
        simd_per_compute_unit: UInt32 = zero_init[UInt32](),
        wavefronts_per_simd: UInt32 = zero_init[UInt32](),
        wavefront_size: UInt32 = zero_init[UInt32](),
        sgprs_per_simd: UInt32 = zero_init[UInt32](),
        min_sgpr_allocation: UInt32 = zero_init[UInt32](),
        max_sgpr_allocation: UInt32 = zero_init[UInt32](),
        sgpr_allocation_granularity: UInt32 = zero_init[UInt32](),
        vgprs_per_simd: UInt32 = zero_init[UInt32](),
        min_vgpr_allocation: UInt32 = zero_init[UInt32](),
        max_vgpr_allocation: UInt32 = zero_init[UInt32](),
        vgpr_allocation_granularity: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD
        self.p_next = p_next
        self.shader_engine_count = shader_engine_count
        self.shader_arrays_per_engine_count = shader_arrays_per_engine_count
        self.compute_units_per_shader_array = compute_units_per_shader_array
        self.simd_per_compute_unit = simd_per_compute_unit
        self.wavefronts_per_simd = wavefronts_per_simd
        self.wavefront_size = wavefront_size
        self.sgprs_per_simd = sgprs_per_simd
        self.min_sgpr_allocation = min_sgpr_allocation
        self.max_sgpr_allocation = max_sgpr_allocation
        self.sgpr_allocation_granularity = sgpr_allocation_granularity
        self.vgprs_per_simd = vgprs_per_simd
        self.min_vgpr_allocation = min_vgpr_allocation
        self.max_vgpr_allocation = max_vgpr_allocation
        self.vgpr_allocation_granularity = vgpr_allocation_granularity


struct PhysicalDeviceShaderCoreProperties2AMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_core_features: ShaderCorePropertiesFlagsAMD
    var active_compute_unit_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_core_features: ShaderCorePropertiesFlagsAMD = zero_init[ShaderCorePropertiesFlagsAMD](),
        active_compute_unit_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD
        self.p_next = p_next
        self.shader_core_features = shader_core_features
        self.active_compute_unit_count = active_compute_unit_count


struct PipelineRasterizationConservativeStateCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineRasterizationConservativeStateCreateFlagsEXT
    var conservative_rasterization_mode: ConservativeRasterizationModeEXT
    var extra_primitive_overestimation_size: Float32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineRasterizationConservativeStateCreateFlagsEXT = zero_init[PipelineRasterizationConservativeStateCreateFlagsEXT](),
        conservative_rasterization_mode: ConservativeRasterizationModeEXT = zero_init[ConservativeRasterizationModeEXT](),
        extra_primitive_overestimation_size: Float32 = zero_init[Float32](),
    ):
        self.s_type = StructureType.PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.conservative_rasterization_mode = conservative_rasterization_mode
        self.extra_primitive_overestimation_size = extra_primitive_overestimation_size


struct PhysicalDeviceDescriptorIndexingFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_input_attachment_array_dynamic_indexing: Bool32
    var shader_uniform_texel_buffer_array_dynamic_indexing: Bool32
    var shader_storage_texel_buffer_array_dynamic_indexing: Bool32
    var shader_uniform_buffer_array_non_uniform_indexing: Bool32
    var shader_sampled_image_array_non_uniform_indexing: Bool32
    var shader_storage_buffer_array_non_uniform_indexing: Bool32
    var shader_storage_image_array_non_uniform_indexing: Bool32
    var shader_input_attachment_array_non_uniform_indexing: Bool32
    var shader_uniform_texel_buffer_array_non_uniform_indexing: Bool32
    var shader_storage_texel_buffer_array_non_uniform_indexing: Bool32
    var descriptor_binding_uniform_buffer_update_after_bind: Bool32
    var descriptor_binding_sampled_image_update_after_bind: Bool32
    var descriptor_binding_storage_image_update_after_bind: Bool32
    var descriptor_binding_storage_buffer_update_after_bind: Bool32
    var descriptor_binding_uniform_texel_buffer_update_after_bind: Bool32
    var descriptor_binding_storage_texel_buffer_update_after_bind: Bool32
    var descriptor_binding_update_unused_while_pending: Bool32
    var descriptor_binding_partially_bound: Bool32
    var descriptor_binding_variable_descriptor_count: Bool32
    var runtime_descriptor_array: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_input_attachment_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_uniform_texel_buffer_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_texel_buffer_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_uniform_buffer_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_sampled_image_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_buffer_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_image_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_input_attachment_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_uniform_texel_buffer_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_texel_buffer_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        descriptor_binding_uniform_buffer_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_sampled_image_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_storage_image_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_storage_buffer_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_uniform_texel_buffer_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_storage_texel_buffer_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_update_unused_while_pending: Bool32 = zero_init[Bool32](),
        descriptor_binding_partially_bound: Bool32 = zero_init[Bool32](),
        descriptor_binding_variable_descriptor_count: Bool32 = zero_init[Bool32](),
        runtime_descriptor_array: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES
        self.p_next = p_next
        self.shader_input_attachment_array_dynamic_indexing = shader_input_attachment_array_dynamic_indexing
        self.shader_uniform_texel_buffer_array_dynamic_indexing = shader_uniform_texel_buffer_array_dynamic_indexing
        self.shader_storage_texel_buffer_array_dynamic_indexing = shader_storage_texel_buffer_array_dynamic_indexing
        self.shader_uniform_buffer_array_non_uniform_indexing = shader_uniform_buffer_array_non_uniform_indexing
        self.shader_sampled_image_array_non_uniform_indexing = shader_sampled_image_array_non_uniform_indexing
        self.shader_storage_buffer_array_non_uniform_indexing = shader_storage_buffer_array_non_uniform_indexing
        self.shader_storage_image_array_non_uniform_indexing = shader_storage_image_array_non_uniform_indexing
        self.shader_input_attachment_array_non_uniform_indexing = shader_input_attachment_array_non_uniform_indexing
        self.shader_uniform_texel_buffer_array_non_uniform_indexing = shader_uniform_texel_buffer_array_non_uniform_indexing
        self.shader_storage_texel_buffer_array_non_uniform_indexing = shader_storage_texel_buffer_array_non_uniform_indexing
        self.descriptor_binding_uniform_buffer_update_after_bind = descriptor_binding_uniform_buffer_update_after_bind
        self.descriptor_binding_sampled_image_update_after_bind = descriptor_binding_sampled_image_update_after_bind
        self.descriptor_binding_storage_image_update_after_bind = descriptor_binding_storage_image_update_after_bind
        self.descriptor_binding_storage_buffer_update_after_bind = descriptor_binding_storage_buffer_update_after_bind
        self.descriptor_binding_uniform_texel_buffer_update_after_bind = descriptor_binding_uniform_texel_buffer_update_after_bind
        self.descriptor_binding_storage_texel_buffer_update_after_bind = descriptor_binding_storage_texel_buffer_update_after_bind
        self.descriptor_binding_update_unused_while_pending = descriptor_binding_update_unused_while_pending
        self.descriptor_binding_partially_bound = descriptor_binding_partially_bound
        self.descriptor_binding_variable_descriptor_count = descriptor_binding_variable_descriptor_count
        self.runtime_descriptor_array = runtime_descriptor_array


struct PhysicalDeviceDescriptorIndexingProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_update_after_bind_descriptors_in_all_pools: UInt32
    var shader_uniform_buffer_array_non_uniform_indexing_native: Bool32
    var shader_sampled_image_array_non_uniform_indexing_native: Bool32
    var shader_storage_buffer_array_non_uniform_indexing_native: Bool32
    var shader_storage_image_array_non_uniform_indexing_native: Bool32
    var shader_input_attachment_array_non_uniform_indexing_native: Bool32
    var robust_buffer_access_update_after_bind: Bool32
    var quad_divergent_implicit_lod: Bool32
    var max_per_stage_descriptor_update_after_bind_samplers: UInt32
    var max_per_stage_descriptor_update_after_bind_uniform_buffers: UInt32
    var max_per_stage_descriptor_update_after_bind_storage_buffers: UInt32
    var max_per_stage_descriptor_update_after_bind_sampled_images: UInt32
    var max_per_stage_descriptor_update_after_bind_storage_images: UInt32
    var max_per_stage_descriptor_update_after_bind_input_attachments: UInt32
    var max_per_stage_update_after_bind_resources: UInt32
    var max_descriptor_set_update_after_bind_samplers: UInt32
    var max_descriptor_set_update_after_bind_uniform_buffers: UInt32
    var max_descriptor_set_update_after_bind_uniform_buffers_dynamic: UInt32
    var max_descriptor_set_update_after_bind_storage_buffers: UInt32
    var max_descriptor_set_update_after_bind_storage_buffers_dynamic: UInt32
    var max_descriptor_set_update_after_bind_sampled_images: UInt32
    var max_descriptor_set_update_after_bind_storage_images: UInt32
    var max_descriptor_set_update_after_bind_input_attachments: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_update_after_bind_descriptors_in_all_pools: UInt32 = zero_init[UInt32](),
        shader_uniform_buffer_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        shader_sampled_image_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        shader_storage_buffer_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        shader_storage_image_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        shader_input_attachment_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        robust_buffer_access_update_after_bind: Bool32 = zero_init[Bool32](),
        quad_divergent_implicit_lod: Bool32 = zero_init[Bool32](),
        max_per_stage_descriptor_update_after_bind_samplers: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_uniform_buffers: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_storage_buffers: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_sampled_images: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_storage_images: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_input_attachments: UInt32 = zero_init[UInt32](),
        max_per_stage_update_after_bind_resources: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_samplers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_uniform_buffers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_uniform_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_storage_buffers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_storage_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_sampled_images: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_storage_images: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_input_attachments: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES
        self.p_next = p_next
        self.max_update_after_bind_descriptors_in_all_pools = max_update_after_bind_descriptors_in_all_pools
        self.shader_uniform_buffer_array_non_uniform_indexing_native = shader_uniform_buffer_array_non_uniform_indexing_native
        self.shader_sampled_image_array_non_uniform_indexing_native = shader_sampled_image_array_non_uniform_indexing_native
        self.shader_storage_buffer_array_non_uniform_indexing_native = shader_storage_buffer_array_non_uniform_indexing_native
        self.shader_storage_image_array_non_uniform_indexing_native = shader_storage_image_array_non_uniform_indexing_native
        self.shader_input_attachment_array_non_uniform_indexing_native = shader_input_attachment_array_non_uniform_indexing_native
        self.robust_buffer_access_update_after_bind = robust_buffer_access_update_after_bind
        self.quad_divergent_implicit_lod = quad_divergent_implicit_lod
        self.max_per_stage_descriptor_update_after_bind_samplers = max_per_stage_descriptor_update_after_bind_samplers
        self.max_per_stage_descriptor_update_after_bind_uniform_buffers = max_per_stage_descriptor_update_after_bind_uniform_buffers
        self.max_per_stage_descriptor_update_after_bind_storage_buffers = max_per_stage_descriptor_update_after_bind_storage_buffers
        self.max_per_stage_descriptor_update_after_bind_sampled_images = max_per_stage_descriptor_update_after_bind_sampled_images
        self.max_per_stage_descriptor_update_after_bind_storage_images = max_per_stage_descriptor_update_after_bind_storage_images
        self.max_per_stage_descriptor_update_after_bind_input_attachments = max_per_stage_descriptor_update_after_bind_input_attachments
        self.max_per_stage_update_after_bind_resources = max_per_stage_update_after_bind_resources
        self.max_descriptor_set_update_after_bind_samplers = max_descriptor_set_update_after_bind_samplers
        self.max_descriptor_set_update_after_bind_uniform_buffers = max_descriptor_set_update_after_bind_uniform_buffers
        self.max_descriptor_set_update_after_bind_uniform_buffers_dynamic = max_descriptor_set_update_after_bind_uniform_buffers_dynamic
        self.max_descriptor_set_update_after_bind_storage_buffers = max_descriptor_set_update_after_bind_storage_buffers
        self.max_descriptor_set_update_after_bind_storage_buffers_dynamic = max_descriptor_set_update_after_bind_storage_buffers_dynamic
        self.max_descriptor_set_update_after_bind_sampled_images = max_descriptor_set_update_after_bind_sampled_images
        self.max_descriptor_set_update_after_bind_storage_images = max_descriptor_set_update_after_bind_storage_images
        self.max_descriptor_set_update_after_bind_input_attachments = max_descriptor_set_update_after_bind_input_attachments


struct DescriptorSetLayoutBindingFlagsCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var binding_count: UInt32
    var p_binding_flags: Ptr[DescriptorBindingFlags]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        binding_count: UInt32 = zero_init[UInt32](),
        p_binding_flags: Ptr[DescriptorBindingFlags] = zero_init[Ptr[DescriptorBindingFlags]](),
    ):
        self.s_type = StructureType.DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO
        self.p_next = p_next
        self.binding_count = binding_count
        self.p_binding_flags = p_binding_flags


struct DescriptorSetVariableDescriptorCountAllocateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_set_count: UInt32
    var p_descriptor_counts: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_set_count: UInt32 = zero_init[UInt32](),
        p_descriptor_counts: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO
        self.p_next = p_next
        self.descriptor_set_count = descriptor_set_count
        self.p_descriptor_counts = p_descriptor_counts


struct DescriptorSetVariableDescriptorCountLayoutSupport(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_variable_descriptor_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_variable_descriptor_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT
        self.p_next = p_next
        self.max_variable_descriptor_count = max_variable_descriptor_count


struct AttachmentDescription2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: AttachmentDescriptionFlags
    var format: Format
    var samples: SampleCountFlagBits
    var load_op: AttachmentLoadOp
    var store_op: AttachmentStoreOp
    var stencil_load_op: AttachmentLoadOp
    var stencil_store_op: AttachmentStoreOp
    var initial_layout: ImageLayout
    var final_layout: ImageLayout

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: AttachmentDescriptionFlags = zero_init[AttachmentDescriptionFlags](),
        format: Format = zero_init[Format](),
        samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
        load_op: AttachmentLoadOp = zero_init[AttachmentLoadOp](),
        store_op: AttachmentStoreOp = zero_init[AttachmentStoreOp](),
        stencil_load_op: AttachmentLoadOp = zero_init[AttachmentLoadOp](),
        stencil_store_op: AttachmentStoreOp = zero_init[AttachmentStoreOp](),
        initial_layout: ImageLayout = zero_init[ImageLayout](),
        final_layout: ImageLayout = zero_init[ImageLayout](),
    ):
        self.s_type = StructureType.ATTACHMENT_DESCRIPTION_2
        self.p_next = p_next
        self.flags = flags
        self.format = format
        self.samples = samples
        self.load_op = load_op
        self.store_op = store_op
        self.stencil_load_op = stencil_load_op
        self.stencil_store_op = stencil_store_op
        self.initial_layout = initial_layout
        self.final_layout = final_layout


struct AttachmentReference2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var attachment: UInt32
    var layout: ImageLayout
    var aspect_mask: ImageAspectFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        attachment: UInt32 = zero_init[UInt32](),
        layout: ImageLayout = zero_init[ImageLayout](),
        aspect_mask: ImageAspectFlags = zero_init[ImageAspectFlags](),
    ):
        self.s_type = StructureType.ATTACHMENT_REFERENCE_2
        self.p_next = p_next
        self.attachment = attachment
        self.layout = layout
        self.aspect_mask = aspect_mask


struct SubpassDescription2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: SubpassDescriptionFlags
    var pipeline_bind_point: PipelineBindPoint
    var view_mask: UInt32
    var input_attachment_count: UInt32
    var p_input_attachments: Ptr[AttachmentReference2]
    var color_attachment_count: UInt32
    var p_color_attachments: Ptr[AttachmentReference2]
    var p_resolve_attachments: Ptr[AttachmentReference2]
    var p_depth_stencil_attachment: Ptr[AttachmentReference2]
    var preserve_attachment_count: UInt32
    var p_preserve_attachments: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: SubpassDescriptionFlags = zero_init[SubpassDescriptionFlags](),
        pipeline_bind_point: PipelineBindPoint = zero_init[PipelineBindPoint](),
        view_mask: UInt32 = zero_init[UInt32](),
        input_attachment_count: UInt32 = zero_init[UInt32](),
        p_input_attachments: Ptr[AttachmentReference2] = zero_init[Ptr[AttachmentReference2]](),
        color_attachment_count: UInt32 = zero_init[UInt32](),
        p_color_attachments: Ptr[AttachmentReference2] = zero_init[Ptr[AttachmentReference2]](),
        p_resolve_attachments: Ptr[AttachmentReference2] = zero_init[Ptr[AttachmentReference2]](),
        p_depth_stencil_attachment: Ptr[AttachmentReference2] = zero_init[Ptr[AttachmentReference2]](),
        preserve_attachment_count: UInt32 = zero_init[UInt32](),
        p_preserve_attachments: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.SUBPASS_DESCRIPTION_2
        self.p_next = p_next
        self.flags = flags
        self.pipeline_bind_point = pipeline_bind_point
        self.view_mask = view_mask
        self.input_attachment_count = input_attachment_count
        self.p_input_attachments = p_input_attachments
        self.color_attachment_count = color_attachment_count
        self.p_color_attachments = p_color_attachments
        self.p_resolve_attachments = p_resolve_attachments
        self.p_depth_stencil_attachment = p_depth_stencil_attachment
        self.preserve_attachment_count = preserve_attachment_count
        self.p_preserve_attachments = p_preserve_attachments


struct SubpassDependency2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_subpass: UInt32
    var dst_subpass: UInt32
    var src_stage_mask: PipelineStageFlags
    var dst_stage_mask: PipelineStageFlags
    var src_access_mask: AccessFlags
    var dst_access_mask: AccessFlags
    var dependency_flags: DependencyFlags
    var view_offset: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_subpass: UInt32 = zero_init[UInt32](),
        dst_subpass: UInt32 = zero_init[UInt32](),
        src_stage_mask: PipelineStageFlags = zero_init[PipelineStageFlags](),
        dst_stage_mask: PipelineStageFlags = zero_init[PipelineStageFlags](),
        src_access_mask: AccessFlags = zero_init[AccessFlags](),
        dst_access_mask: AccessFlags = zero_init[AccessFlags](),
        dependency_flags: DependencyFlags = zero_init[DependencyFlags](),
        view_offset: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.SUBPASS_DEPENDENCY_2
        self.p_next = p_next
        self.src_subpass = src_subpass
        self.dst_subpass = dst_subpass
        self.src_stage_mask = src_stage_mask
        self.dst_stage_mask = dst_stage_mask
        self.src_access_mask = src_access_mask
        self.dst_access_mask = dst_access_mask
        self.dependency_flags = dependency_flags
        self.view_offset = view_offset


struct RenderPassCreateInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: RenderPassCreateFlags
    var attachment_count: UInt32
    var p_attachments: Ptr[AttachmentDescription2]
    var subpass_count: UInt32
    var p_subpasses: Ptr[SubpassDescription2]
    var dependency_count: UInt32
    var p_dependencies: Ptr[SubpassDependency2]
    var correlated_view_mask_count: UInt32
    var p_correlated_view_masks: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: RenderPassCreateFlags = zero_init[RenderPassCreateFlags](),
        attachment_count: UInt32 = zero_init[UInt32](),
        p_attachments: Ptr[AttachmentDescription2] = zero_init[Ptr[AttachmentDescription2]](),
        subpass_count: UInt32 = zero_init[UInt32](),
        p_subpasses: Ptr[SubpassDescription2] = zero_init[Ptr[SubpassDescription2]](),
        dependency_count: UInt32 = zero_init[UInt32](),
        p_dependencies: Ptr[SubpassDependency2] = zero_init[Ptr[SubpassDependency2]](),
        correlated_view_mask_count: UInt32 = zero_init[UInt32](),
        p_correlated_view_masks: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.RENDER_PASS_CREATE_INFO_2
        self.p_next = p_next
        self.flags = flags
        self.attachment_count = attachment_count
        self.p_attachments = p_attachments
        self.subpass_count = subpass_count
        self.p_subpasses = p_subpasses
        self.dependency_count = dependency_count
        self.p_dependencies = p_dependencies
        self.correlated_view_mask_count = correlated_view_mask_count
        self.p_correlated_view_masks = p_correlated_view_masks


struct SubpassBeginInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var contents: SubpassContents

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        contents: SubpassContents = zero_init[SubpassContents](),
    ):
        self.s_type = StructureType.SUBPASS_BEGIN_INFO
        self.p_next = p_next
        self.contents = contents


struct SubpassEndInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.SUBPASS_END_INFO
        self.p_next = p_next


struct PhysicalDeviceTimelineSemaphoreFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var timeline_semaphore: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        timeline_semaphore: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES
        self.p_next = p_next
        self.timeline_semaphore = timeline_semaphore


struct PhysicalDeviceTimelineSemaphoreProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_timeline_semaphore_value_difference: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_timeline_semaphore_value_difference: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES
        self.p_next = p_next
        self.max_timeline_semaphore_value_difference = max_timeline_semaphore_value_difference


struct SemaphoreTypeCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore_type: SemaphoreType
    var initial_value: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore_type: SemaphoreType = zero_init[SemaphoreType](),
        initial_value: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.SEMAPHORE_TYPE_CREATE_INFO
        self.p_next = p_next
        self.semaphore_type = semaphore_type
        self.initial_value = initial_value


struct TimelineSemaphoreSubmitInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var wait_semaphore_value_count: UInt32
    var p_wait_semaphore_values: Ptr[UInt64]
    var signal_semaphore_value_count: UInt32
    var p_signal_semaphore_values: Ptr[UInt64]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        wait_semaphore_value_count: UInt32 = zero_init[UInt32](),
        p_wait_semaphore_values: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
        signal_semaphore_value_count: UInt32 = zero_init[UInt32](),
        p_signal_semaphore_values: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
    ):
        self.s_type = StructureType.TIMELINE_SEMAPHORE_SUBMIT_INFO
        self.p_next = p_next
        self.wait_semaphore_value_count = wait_semaphore_value_count
        self.p_wait_semaphore_values = p_wait_semaphore_values
        self.signal_semaphore_value_count = signal_semaphore_value_count
        self.p_signal_semaphore_values = p_signal_semaphore_values


struct SemaphoreWaitInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: SemaphoreWaitFlags
    var semaphore_count: UInt32
    var p_semaphores: Ptr[Semaphore]
    var p_values: Ptr[UInt64]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: SemaphoreWaitFlags = zero_init[SemaphoreWaitFlags](),
        semaphore_count: UInt32 = zero_init[UInt32](),
        p_semaphores: Ptr[Semaphore] = zero_init[Ptr[Semaphore]](),
        p_values: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
    ):
        self.s_type = StructureType.SEMAPHORE_WAIT_INFO
        self.p_next = p_next
        self.flags = flags
        self.semaphore_count = semaphore_count
        self.p_semaphores = p_semaphores
        self.p_values = p_values


struct SemaphoreSignalInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var value: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        value: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.SEMAPHORE_SIGNAL_INFO
        self.p_next = p_next
        self.semaphore = semaphore
        self.value = value


struct VertexInputBindingDivisorDescription(ImplicitlyCopyable, Movable):
    var binding: UInt32
    var divisor: UInt32

    fn __init__(
        out self,
        binding: UInt32 = zero_init[UInt32](),
        divisor: UInt32 = zero_init[UInt32](),
    ):
        self.binding = binding
        self.divisor = divisor


struct PipelineVertexInputDivisorStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_binding_divisor_count: UInt32
    var p_vertex_binding_divisors: Ptr[VertexInputBindingDivisorDescription]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_binding_divisor_count: UInt32 = zero_init[UInt32](),
        p_vertex_binding_divisors: Ptr[VertexInputBindingDivisorDescription] = zero_init[Ptr[VertexInputBindingDivisorDescription]](),
    ):
        self.s_type = StructureType.PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO
        self.p_next = p_next
        self.vertex_binding_divisor_count = vertex_binding_divisor_count
        self.p_vertex_binding_divisors = p_vertex_binding_divisors


struct PhysicalDeviceVertexAttributeDivisorPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_vertex_attrib_divisor: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_vertex_attrib_divisor: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT
        self.p_next = p_next
        self.max_vertex_attrib_divisor = max_vertex_attrib_divisor


struct PhysicalDeviceVertexAttributeDivisorProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_vertex_attrib_divisor: UInt32
    var supports_non_zero_first_instance: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_vertex_attrib_divisor: UInt32 = zero_init[UInt32](),
        supports_non_zero_first_instance: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES
        self.p_next = p_next
        self.max_vertex_attrib_divisor = max_vertex_attrib_divisor
        self.supports_non_zero_first_instance = supports_non_zero_first_instance


struct PhysicalDevicePCIBusInfoPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pci_domain: UInt32
    var pci_bus: UInt32
    var pci_device: UInt32
    var pci_function: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pci_domain: UInt32 = zero_init[UInt32](),
        pci_bus: UInt32 = zero_init[UInt32](),
        pci_device: UInt32 = zero_init[UInt32](),
        pci_function: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT
        self.p_next = p_next
        self.pci_domain = pci_domain
        self.pci_bus = pci_bus
        self.pci_device = pci_device
        self.pci_function = pci_function


struct ImportAndroidHardwareBufferInfoANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer: Ptr[AHardwareBuffer]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer: Ptr[AHardwareBuffer] = zero_init[Ptr[AHardwareBuffer]](),
    ):
        self.s_type = StructureType.IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
        self.p_next = p_next
        self.buffer = buffer


struct AndroidHardwareBufferUsageANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var android_hardware_buffer_usage: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        android_hardware_buffer_usage: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.ANDROID_HARDWARE_BUFFER_USAGE_ANDROID
        self.p_next = p_next
        self.android_hardware_buffer_usage = android_hardware_buffer_usage


struct AndroidHardwareBufferPropertiesANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var allocation_size: DeviceSize
    var memory_type_bits: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        allocation_size: DeviceSize = zero_init[DeviceSize](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID
        self.p_next = p_next
        self.allocation_size = allocation_size
        self.memory_type_bits = memory_type_bits


struct MemoryGetAndroidHardwareBufferInfoANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
    ):
        self.s_type = StructureType.MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID
        self.p_next = p_next
        self.memory = memory


struct AndroidHardwareBufferFormatPropertiesANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format: Format
    var external_format: UInt64
    var format_features: FormatFeatureFlags
    var sampler_ycbcr_conversion_components: ComponentMapping
    var suggested_ycbcr_model: SamplerYcbcrModelConversion
    var suggested_ycbcr_range: SamplerYcbcrRange
    var suggested_x_chroma_offset: ChromaLocation
    var suggested_y_chroma_offset: ChromaLocation

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format: Format = zero_init[Format](),
        external_format: UInt64 = zero_init[UInt64](),
        format_features: FormatFeatureFlags = zero_init[FormatFeatureFlags](),
        sampler_ycbcr_conversion_components: ComponentMapping = zero_init[ComponentMapping](),
        suggested_ycbcr_model: SamplerYcbcrModelConversion = zero_init[SamplerYcbcrModelConversion](),
        suggested_ycbcr_range: SamplerYcbcrRange = zero_init[SamplerYcbcrRange](),
        suggested_x_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
        suggested_y_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
    ):
        self.s_type = StructureType.ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID
        self.p_next = p_next
        self.format = format
        self.external_format = external_format
        self.format_features = format_features
        self.sampler_ycbcr_conversion_components = sampler_ycbcr_conversion_components
        self.suggested_ycbcr_model = suggested_ycbcr_model
        self.suggested_ycbcr_range = suggested_ycbcr_range
        self.suggested_x_chroma_offset = suggested_x_chroma_offset
        self.suggested_y_chroma_offset = suggested_y_chroma_offset


struct CommandBufferInheritanceConditionalRenderingInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var conditional_rendering_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        conditional_rendering_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT
        self.p_next = p_next
        self.conditional_rendering_enable = conditional_rendering_enable


struct ExternalFormatANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var external_format: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        external_format: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.EXTERNAL_FORMAT_ANDROID
        self.p_next = p_next
        self.external_format = external_format


struct PhysicalDevice8BitStorageFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var storage_buffer_8_bit_access: Bool32
    var uniform_and_storage_buffer_8_bit_access: Bool32
    var storage_push_constant_8: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        storage_buffer_8_bit_access: Bool32 = zero_init[Bool32](),
        uniform_and_storage_buffer_8_bit_access: Bool32 = zero_init[Bool32](),
        storage_push_constant_8: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES
        self.p_next = p_next
        self.storage_buffer_8_bit_access = storage_buffer_8_bit_access
        self.uniform_and_storage_buffer_8_bit_access = uniform_and_storage_buffer_8_bit_access
        self.storage_push_constant_8 = storage_push_constant_8


struct PhysicalDeviceConditionalRenderingFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var conditional_rendering: Bool32
    var inherited_conditional_rendering: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        conditional_rendering: Bool32 = zero_init[Bool32](),
        inherited_conditional_rendering: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT
        self.p_next = p_next
        self.conditional_rendering = conditional_rendering
        self.inherited_conditional_rendering = inherited_conditional_rendering


struct PhysicalDeviceVulkanMemoryModelFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vulkan_memory_model: Bool32
    var vulkan_memory_model_device_scope: Bool32
    var vulkan_memory_model_availability_visibility_chains: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vulkan_memory_model: Bool32 = zero_init[Bool32](),
        vulkan_memory_model_device_scope: Bool32 = zero_init[Bool32](),
        vulkan_memory_model_availability_visibility_chains: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES
        self.p_next = p_next
        self.vulkan_memory_model = vulkan_memory_model
        self.vulkan_memory_model_device_scope = vulkan_memory_model_device_scope
        self.vulkan_memory_model_availability_visibility_chains = vulkan_memory_model_availability_visibility_chains


struct PhysicalDeviceShaderAtomicInt64Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_buffer_int_64_atomics: Bool32
    var shader_shared_int_64_atomics: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_buffer_int_64_atomics: Bool32 = zero_init[Bool32](),
        shader_shared_int_64_atomics: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES
        self.p_next = p_next
        self.shader_buffer_int_64_atomics = shader_buffer_int_64_atomics
        self.shader_shared_int_64_atomics = shader_shared_int_64_atomics


struct PhysicalDeviceShaderAtomicFloatFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_buffer_float_32_atomics: Bool32
    var shader_buffer_float_32_atomic_add: Bool32
    var shader_buffer_float_64_atomics: Bool32
    var shader_buffer_float_64_atomic_add: Bool32
    var shader_shared_float_32_atomics: Bool32
    var shader_shared_float_32_atomic_add: Bool32
    var shader_shared_float_64_atomics: Bool32
    var shader_shared_float_64_atomic_add: Bool32
    var shader_image_float_32_atomics: Bool32
    var shader_image_float_32_atomic_add: Bool32
    var sparse_image_float_32_atomics: Bool32
    var sparse_image_float_32_atomic_add: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_buffer_float_32_atomics: Bool32 = zero_init[Bool32](),
        shader_buffer_float_32_atomic_add: Bool32 = zero_init[Bool32](),
        shader_buffer_float_64_atomics: Bool32 = zero_init[Bool32](),
        shader_buffer_float_64_atomic_add: Bool32 = zero_init[Bool32](),
        shader_shared_float_32_atomics: Bool32 = zero_init[Bool32](),
        shader_shared_float_32_atomic_add: Bool32 = zero_init[Bool32](),
        shader_shared_float_64_atomics: Bool32 = zero_init[Bool32](),
        shader_shared_float_64_atomic_add: Bool32 = zero_init[Bool32](),
        shader_image_float_32_atomics: Bool32 = zero_init[Bool32](),
        shader_image_float_32_atomic_add: Bool32 = zero_init[Bool32](),
        sparse_image_float_32_atomics: Bool32 = zero_init[Bool32](),
        sparse_image_float_32_atomic_add: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT
        self.p_next = p_next
        self.shader_buffer_float_32_atomics = shader_buffer_float_32_atomics
        self.shader_buffer_float_32_atomic_add = shader_buffer_float_32_atomic_add
        self.shader_buffer_float_64_atomics = shader_buffer_float_64_atomics
        self.shader_buffer_float_64_atomic_add = shader_buffer_float_64_atomic_add
        self.shader_shared_float_32_atomics = shader_shared_float_32_atomics
        self.shader_shared_float_32_atomic_add = shader_shared_float_32_atomic_add
        self.shader_shared_float_64_atomics = shader_shared_float_64_atomics
        self.shader_shared_float_64_atomic_add = shader_shared_float_64_atomic_add
        self.shader_image_float_32_atomics = shader_image_float_32_atomics
        self.shader_image_float_32_atomic_add = shader_image_float_32_atomic_add
        self.sparse_image_float_32_atomics = sparse_image_float_32_atomics
        self.sparse_image_float_32_atomic_add = sparse_image_float_32_atomic_add


struct PhysicalDeviceShaderAtomicFloat2FeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_buffer_float_16_atomics: Bool32
    var shader_buffer_float_16_atomic_add: Bool32
    var shader_buffer_float_16_atomic_min_max: Bool32
    var shader_buffer_float_32_atomic_min_max: Bool32
    var shader_buffer_float_64_atomic_min_max: Bool32
    var shader_shared_float_16_atomics: Bool32
    var shader_shared_float_16_atomic_add: Bool32
    var shader_shared_float_16_atomic_min_max: Bool32
    var shader_shared_float_32_atomic_min_max: Bool32
    var shader_shared_float_64_atomic_min_max: Bool32
    var shader_image_float_32_atomic_min_max: Bool32
    var sparse_image_float_32_atomic_min_max: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_buffer_float_16_atomics: Bool32 = zero_init[Bool32](),
        shader_buffer_float_16_atomic_add: Bool32 = zero_init[Bool32](),
        shader_buffer_float_16_atomic_min_max: Bool32 = zero_init[Bool32](),
        shader_buffer_float_32_atomic_min_max: Bool32 = zero_init[Bool32](),
        shader_buffer_float_64_atomic_min_max: Bool32 = zero_init[Bool32](),
        shader_shared_float_16_atomics: Bool32 = zero_init[Bool32](),
        shader_shared_float_16_atomic_add: Bool32 = zero_init[Bool32](),
        shader_shared_float_16_atomic_min_max: Bool32 = zero_init[Bool32](),
        shader_shared_float_32_atomic_min_max: Bool32 = zero_init[Bool32](),
        shader_shared_float_64_atomic_min_max: Bool32 = zero_init[Bool32](),
        shader_image_float_32_atomic_min_max: Bool32 = zero_init[Bool32](),
        sparse_image_float_32_atomic_min_max: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT
        self.p_next = p_next
        self.shader_buffer_float_16_atomics = shader_buffer_float_16_atomics
        self.shader_buffer_float_16_atomic_add = shader_buffer_float_16_atomic_add
        self.shader_buffer_float_16_atomic_min_max = shader_buffer_float_16_atomic_min_max
        self.shader_buffer_float_32_atomic_min_max = shader_buffer_float_32_atomic_min_max
        self.shader_buffer_float_64_atomic_min_max = shader_buffer_float_64_atomic_min_max
        self.shader_shared_float_16_atomics = shader_shared_float_16_atomics
        self.shader_shared_float_16_atomic_add = shader_shared_float_16_atomic_add
        self.shader_shared_float_16_atomic_min_max = shader_shared_float_16_atomic_min_max
        self.shader_shared_float_32_atomic_min_max = shader_shared_float_32_atomic_min_max
        self.shader_shared_float_64_atomic_min_max = shader_shared_float_64_atomic_min_max
        self.shader_image_float_32_atomic_min_max = shader_image_float_32_atomic_min_max
        self.sparse_image_float_32_atomic_min_max = sparse_image_float_32_atomic_min_max


struct PhysicalDeviceVertexAttributeDivisorFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_attribute_instance_rate_divisor: Bool32
    var vertex_attribute_instance_rate_zero_divisor: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_attribute_instance_rate_divisor: Bool32 = zero_init[Bool32](),
        vertex_attribute_instance_rate_zero_divisor: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES
        self.p_next = p_next
        self.vertex_attribute_instance_rate_divisor = vertex_attribute_instance_rate_divisor
        self.vertex_attribute_instance_rate_zero_divisor = vertex_attribute_instance_rate_zero_divisor


struct QueueFamilyCheckpointPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var checkpoint_execution_stage_mask: PipelineStageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        checkpoint_execution_stage_mask: PipelineStageFlags = zero_init[PipelineStageFlags](),
    ):
        self.s_type = StructureType.QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV
        self.p_next = p_next
        self.checkpoint_execution_stage_mask = checkpoint_execution_stage_mask


struct CheckpointDataNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stage: PipelineStageFlagBits
    var p_checkpoint_marker: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stage: PipelineStageFlagBits = zero_init[PipelineStageFlagBits](),
        p_checkpoint_marker: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.CHECKPOINT_DATA_NV
        self.p_next = p_next
        self.stage = stage
        self.p_checkpoint_marker = p_checkpoint_marker


struct PhysicalDeviceDepthStencilResolveProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var supported_depth_resolve_modes: ResolveModeFlags
    var supported_stencil_resolve_modes: ResolveModeFlags
    var independent_resolve_none: Bool32
    var independent_resolve: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        supported_depth_resolve_modes: ResolveModeFlags = zero_init[ResolveModeFlags](),
        supported_stencil_resolve_modes: ResolveModeFlags = zero_init[ResolveModeFlags](),
        independent_resolve_none: Bool32 = zero_init[Bool32](),
        independent_resolve: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES
        self.p_next = p_next
        self.supported_depth_resolve_modes = supported_depth_resolve_modes
        self.supported_stencil_resolve_modes = supported_stencil_resolve_modes
        self.independent_resolve_none = independent_resolve_none
        self.independent_resolve = independent_resolve


struct SubpassDescriptionDepthStencilResolve(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var depth_resolve_mode: ResolveModeFlagBits
    var stencil_resolve_mode: ResolveModeFlagBits
    var p_depth_stencil_resolve_attachment: Ptr[AttachmentReference2]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        depth_resolve_mode: ResolveModeFlagBits = zero_init[ResolveModeFlagBits](),
        stencil_resolve_mode: ResolveModeFlagBits = zero_init[ResolveModeFlagBits](),
        p_depth_stencil_resolve_attachment: Ptr[AttachmentReference2] = zero_init[Ptr[AttachmentReference2]](),
    ):
        self.s_type = StructureType.SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE
        self.p_next = p_next
        self.depth_resolve_mode = depth_resolve_mode
        self.stencil_resolve_mode = stencil_resolve_mode
        self.p_depth_stencil_resolve_attachment = p_depth_stencil_resolve_attachment


struct ImageViewASTCDecodeModeEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var decode_mode: Format

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        decode_mode: Format = zero_init[Format](),
    ):
        self.s_type = StructureType.IMAGE_VIEW_ASTC_DECODE_MODE_EXT
        self.p_next = p_next
        self.decode_mode = decode_mode


struct PhysicalDeviceASTCDecodeFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var decode_mode_shared_exponent: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        decode_mode_shared_exponent: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT
        self.p_next = p_next
        self.decode_mode_shared_exponent = decode_mode_shared_exponent


struct PhysicalDeviceTransformFeedbackFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var transform_feedback: Bool32
    var geometry_streams: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        transform_feedback: Bool32 = zero_init[Bool32](),
        geometry_streams: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT
        self.p_next = p_next
        self.transform_feedback = transform_feedback
        self.geometry_streams = geometry_streams


struct PhysicalDeviceTransformFeedbackPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_transform_feedback_streams: UInt32
    var max_transform_feedback_buffers: UInt32
    var max_transform_feedback_buffer_size: DeviceSize
    var max_transform_feedback_stream_data_size: UInt32
    var max_transform_feedback_buffer_data_size: UInt32
    var max_transform_feedback_buffer_data_stride: UInt32
    var transform_feedback_queries: Bool32
    var transform_feedback_streams_lines_triangles: Bool32
    var transform_feedback_rasterization_stream_select: Bool32
    var transform_feedback_draw: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_transform_feedback_streams: UInt32 = zero_init[UInt32](),
        max_transform_feedback_buffers: UInt32 = zero_init[UInt32](),
        max_transform_feedback_buffer_size: DeviceSize = zero_init[DeviceSize](),
        max_transform_feedback_stream_data_size: UInt32 = zero_init[UInt32](),
        max_transform_feedback_buffer_data_size: UInt32 = zero_init[UInt32](),
        max_transform_feedback_buffer_data_stride: UInt32 = zero_init[UInt32](),
        transform_feedback_queries: Bool32 = zero_init[Bool32](),
        transform_feedback_streams_lines_triangles: Bool32 = zero_init[Bool32](),
        transform_feedback_rasterization_stream_select: Bool32 = zero_init[Bool32](),
        transform_feedback_draw: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT
        self.p_next = p_next
        self.max_transform_feedback_streams = max_transform_feedback_streams
        self.max_transform_feedback_buffers = max_transform_feedback_buffers
        self.max_transform_feedback_buffer_size = max_transform_feedback_buffer_size
        self.max_transform_feedback_stream_data_size = max_transform_feedback_stream_data_size
        self.max_transform_feedback_buffer_data_size = max_transform_feedback_buffer_data_size
        self.max_transform_feedback_buffer_data_stride = max_transform_feedback_buffer_data_stride
        self.transform_feedback_queries = transform_feedback_queries
        self.transform_feedback_streams_lines_triangles = transform_feedback_streams_lines_triangles
        self.transform_feedback_rasterization_stream_select = transform_feedback_rasterization_stream_select
        self.transform_feedback_draw = transform_feedback_draw


struct PipelineRasterizationStateStreamCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineRasterizationStateStreamCreateFlagsEXT
    var rasterization_stream: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineRasterizationStateStreamCreateFlagsEXT = zero_init[PipelineRasterizationStateStreamCreateFlagsEXT](),
        rasterization_stream: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.rasterization_stream = rasterization_stream


struct PhysicalDeviceRepresentativeFragmentTestFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var representative_fragment_test: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        representative_fragment_test: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV
        self.p_next = p_next
        self.representative_fragment_test = representative_fragment_test


struct PipelineRepresentativeFragmentTestStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var representative_fragment_test_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        representative_fragment_test_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.representative_fragment_test_enable = representative_fragment_test_enable


struct PhysicalDeviceExclusiveScissorFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var exclusive_scissor: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        exclusive_scissor: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV
        self.p_next = p_next
        self.exclusive_scissor = exclusive_scissor


struct PipelineViewportExclusiveScissorStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var exclusive_scissor_count: UInt32
    var p_exclusive_scissors: Ptr[Rect2D]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        exclusive_scissor_count: UInt32 = zero_init[UInt32](),
        p_exclusive_scissors: Ptr[Rect2D] = zero_init[Ptr[Rect2D]](),
    ):
        self.s_type = StructureType.PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.exclusive_scissor_count = exclusive_scissor_count
        self.p_exclusive_scissors = p_exclusive_scissors


struct PhysicalDeviceCornerSampledImageFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var corner_sampled_image: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        corner_sampled_image: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV
        self.p_next = p_next
        self.corner_sampled_image = corner_sampled_image


struct PhysicalDeviceComputeShaderDerivativesFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var compute_derivative_group_quads: Bool32
    var compute_derivative_group_linear: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        compute_derivative_group_quads: Bool32 = zero_init[Bool32](),
        compute_derivative_group_linear: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR
        self.p_next = p_next
        self.compute_derivative_group_quads = compute_derivative_group_quads
        self.compute_derivative_group_linear = compute_derivative_group_linear


struct PhysicalDeviceComputeShaderDerivativesPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var mesh_and_task_shader_derivatives: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        mesh_and_task_shader_derivatives: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_PROPERTIES_KHR
        self.p_next = p_next
        self.mesh_and_task_shader_derivatives = mesh_and_task_shader_derivatives


struct PhysicalDeviceShaderImageFootprintFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_footprint: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_footprint: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV
        self.p_next = p_next
        self.image_footprint = image_footprint


struct PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dedicated_allocation_image_aliasing: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dedicated_allocation_image_aliasing: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV
        self.p_next = p_next
        self.dedicated_allocation_image_aliasing = dedicated_allocation_image_aliasing


struct PhysicalDeviceCopyMemoryIndirectFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var indirect_copy: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        indirect_copy: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV
        self.p_next = p_next
        self.indirect_copy = indirect_copy


struct PhysicalDeviceCopyMemoryIndirectPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var supported_queues: QueueFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        supported_queues: QueueFlags = zero_init[QueueFlags](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_PROPERTIES_NV
        self.p_next = p_next
        self.supported_queues = supported_queues


struct PhysicalDeviceMemoryDecompressionFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_decompression: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_decompression: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV
        self.p_next = p_next
        self.memory_decompression = memory_decompression


struct PhysicalDeviceMemoryDecompressionPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var decompression_methods: MemoryDecompressionMethodFlagsNV
    var max_decompression_indirect_count: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        decompression_methods: MemoryDecompressionMethodFlagsNV = zero_init[MemoryDecompressionMethodFlagsNV](),
        max_decompression_indirect_count: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_PROPERTIES_NV
        self.p_next = p_next
        self.decompression_methods = decompression_methods
        self.max_decompression_indirect_count = max_decompression_indirect_count


struct ShadingRatePaletteNV(ImplicitlyCopyable, Movable):
    var shading_rate_palette_entry_count: UInt32
    var p_shading_rate_palette_entries: Ptr[ShadingRatePaletteEntryNV]

    fn __init__(
        out self,
        shading_rate_palette_entry_count: UInt32 = zero_init[UInt32](),
        p_shading_rate_palette_entries: Ptr[ShadingRatePaletteEntryNV] = zero_init[Ptr[ShadingRatePaletteEntryNV]](),
    ):
        self.shading_rate_palette_entry_count = shading_rate_palette_entry_count
        self.p_shading_rate_palette_entries = p_shading_rate_palette_entries


struct PipelineViewportShadingRateImageStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shading_rate_image_enable: Bool32
    var viewport_count: UInt32
    var p_shading_rate_palettes: Ptr[ShadingRatePaletteNV]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shading_rate_image_enable: Bool32 = zero_init[Bool32](),
        viewport_count: UInt32 = zero_init[UInt32](),
        p_shading_rate_palettes: Ptr[ShadingRatePaletteNV] = zero_init[Ptr[ShadingRatePaletteNV]](),
    ):
        self.s_type = StructureType.PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.shading_rate_image_enable = shading_rate_image_enable
        self.viewport_count = viewport_count
        self.p_shading_rate_palettes = p_shading_rate_palettes


struct PhysicalDeviceShadingRateImageFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shading_rate_image: Bool32
    var shading_rate_coarse_sample_order: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shading_rate_image: Bool32 = zero_init[Bool32](),
        shading_rate_coarse_sample_order: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV
        self.p_next = p_next
        self.shading_rate_image = shading_rate_image
        self.shading_rate_coarse_sample_order = shading_rate_coarse_sample_order


struct PhysicalDeviceShadingRateImagePropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shading_rate_texel_size: Extent2D
    var shading_rate_palette_size: UInt32
    var shading_rate_max_coarse_samples: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shading_rate_texel_size: Extent2D = zero_init[Extent2D](),
        shading_rate_palette_size: UInt32 = zero_init[UInt32](),
        shading_rate_max_coarse_samples: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV
        self.p_next = p_next
        self.shading_rate_texel_size = shading_rate_texel_size
        self.shading_rate_palette_size = shading_rate_palette_size
        self.shading_rate_max_coarse_samples = shading_rate_max_coarse_samples


struct PhysicalDeviceInvocationMaskFeaturesHUAWEI(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var invocation_mask: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        invocation_mask: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI
        self.p_next = p_next
        self.invocation_mask = invocation_mask


struct CoarseSampleLocationNV(ImplicitlyCopyable, Movable):
    var pixel_x: UInt32
    var pixel_y: UInt32
    var sample: UInt32

    fn __init__(
        out self,
        pixel_x: UInt32 = zero_init[UInt32](),
        pixel_y: UInt32 = zero_init[UInt32](),
        sample: UInt32 = zero_init[UInt32](),
    ):
        self.pixel_x = pixel_x
        self.pixel_y = pixel_y
        self.sample = sample


struct CoarseSampleOrderCustomNV(ImplicitlyCopyable, Movable):
    var shading_rate: ShadingRatePaletteEntryNV
    var sample_count: UInt32
    var sample_location_count: UInt32
    var p_sample_locations: Ptr[CoarseSampleLocationNV]

    fn __init__(
        out self,
        shading_rate: ShadingRatePaletteEntryNV = zero_init[ShadingRatePaletteEntryNV](),
        sample_count: UInt32 = zero_init[UInt32](),
        sample_location_count: UInt32 = zero_init[UInt32](),
        p_sample_locations: Ptr[CoarseSampleLocationNV] = zero_init[Ptr[CoarseSampleLocationNV]](),
    ):
        self.shading_rate = shading_rate
        self.sample_count = sample_count
        self.sample_location_count = sample_location_count
        self.p_sample_locations = p_sample_locations


struct PipelineViewportCoarseSampleOrderStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sample_order_type: CoarseSampleOrderTypeNV
    var custom_sample_order_count: UInt32
    var p_custom_sample_orders: Ptr[CoarseSampleOrderCustomNV]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sample_order_type: CoarseSampleOrderTypeNV = zero_init[CoarseSampleOrderTypeNV](),
        custom_sample_order_count: UInt32 = zero_init[UInt32](),
        p_custom_sample_orders: Ptr[CoarseSampleOrderCustomNV] = zero_init[Ptr[CoarseSampleOrderCustomNV]](),
    ):
        self.s_type = StructureType.PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.sample_order_type = sample_order_type
        self.custom_sample_order_count = custom_sample_order_count
        self.p_custom_sample_orders = p_custom_sample_orders


struct PhysicalDeviceMeshShaderFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var task_shader: Bool32
    var mesh_shader: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        task_shader: Bool32 = zero_init[Bool32](),
        mesh_shader: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV
        self.p_next = p_next
        self.task_shader = task_shader
        self.mesh_shader = mesh_shader


struct PhysicalDeviceMeshShaderPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_draw_mesh_tasks_count: UInt32
    var max_task_work_group_invocations: UInt32
    var max_task_work_group_size: InlineArray[UInt32, Int(3)]
    var max_task_total_memory_size: UInt32
    var max_task_output_count: UInt32
    var max_mesh_work_group_invocations: UInt32
    var max_mesh_work_group_size: InlineArray[UInt32, Int(3)]
    var max_mesh_total_memory_size: UInt32
    var max_mesh_output_vertices: UInt32
    var max_mesh_output_primitives: UInt32
    var max_mesh_multiview_view_count: UInt32
    var mesh_output_per_vertex_granularity: UInt32
    var mesh_output_per_primitive_granularity: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_draw_mesh_tasks_count: UInt32 = zero_init[UInt32](),
        max_task_work_group_invocations: UInt32 = zero_init[UInt32](),
        max_task_work_group_size: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_task_total_memory_size: UInt32 = zero_init[UInt32](),
        max_task_output_count: UInt32 = zero_init[UInt32](),
        max_mesh_work_group_invocations: UInt32 = zero_init[UInt32](),
        max_mesh_work_group_size: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_mesh_total_memory_size: UInt32 = zero_init[UInt32](),
        max_mesh_output_vertices: UInt32 = zero_init[UInt32](),
        max_mesh_output_primitives: UInt32 = zero_init[UInt32](),
        max_mesh_multiview_view_count: UInt32 = zero_init[UInt32](),
        mesh_output_per_vertex_granularity: UInt32 = zero_init[UInt32](),
        mesh_output_per_primitive_granularity: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV
        self.p_next = p_next
        self.max_draw_mesh_tasks_count = max_draw_mesh_tasks_count
        self.max_task_work_group_invocations = max_task_work_group_invocations
        self.max_task_work_group_size = max_task_work_group_size
        self.max_task_total_memory_size = max_task_total_memory_size
        self.max_task_output_count = max_task_output_count
        self.max_mesh_work_group_invocations = max_mesh_work_group_invocations
        self.max_mesh_work_group_size = max_mesh_work_group_size
        self.max_mesh_total_memory_size = max_mesh_total_memory_size
        self.max_mesh_output_vertices = max_mesh_output_vertices
        self.max_mesh_output_primitives = max_mesh_output_primitives
        self.max_mesh_multiview_view_count = max_mesh_multiview_view_count
        self.mesh_output_per_vertex_granularity = mesh_output_per_vertex_granularity
        self.mesh_output_per_primitive_granularity = mesh_output_per_primitive_granularity


struct DrawMeshTasksIndirectCommandNV(ImplicitlyCopyable, Movable):
    var task_count: UInt32
    var first_task: UInt32

    fn __init__(
        out self,
        task_count: UInt32 = zero_init[UInt32](),
        first_task: UInt32 = zero_init[UInt32](),
    ):
        self.task_count = task_count
        self.first_task = first_task


struct PhysicalDeviceMeshShaderFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var task_shader: Bool32
    var mesh_shader: Bool32
    var multiview_mesh_shader: Bool32
    var primitive_fragment_shading_rate_mesh_shader: Bool32
    var mesh_shader_queries: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        task_shader: Bool32 = zero_init[Bool32](),
        mesh_shader: Bool32 = zero_init[Bool32](),
        multiview_mesh_shader: Bool32 = zero_init[Bool32](),
        primitive_fragment_shading_rate_mesh_shader: Bool32 = zero_init[Bool32](),
        mesh_shader_queries: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT
        self.p_next = p_next
        self.task_shader = task_shader
        self.mesh_shader = mesh_shader
        self.multiview_mesh_shader = multiview_mesh_shader
        self.primitive_fragment_shading_rate_mesh_shader = primitive_fragment_shading_rate_mesh_shader
        self.mesh_shader_queries = mesh_shader_queries


struct PhysicalDeviceMeshShaderPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_task_work_group_total_count: UInt32
    var max_task_work_group_count: InlineArray[UInt32, Int(3)]
    var max_task_work_group_invocations: UInt32
    var max_task_work_group_size: InlineArray[UInt32, Int(3)]
    var max_task_payload_size: UInt32
    var max_task_shared_memory_size: UInt32
    var max_task_payload_and_shared_memory_size: UInt32
    var max_mesh_work_group_total_count: UInt32
    var max_mesh_work_group_count: InlineArray[UInt32, Int(3)]
    var max_mesh_work_group_invocations: UInt32
    var max_mesh_work_group_size: InlineArray[UInt32, Int(3)]
    var max_mesh_shared_memory_size: UInt32
    var max_mesh_payload_and_shared_memory_size: UInt32
    var max_mesh_output_memory_size: UInt32
    var max_mesh_payload_and_output_memory_size: UInt32
    var max_mesh_output_components: UInt32
    var max_mesh_output_vertices: UInt32
    var max_mesh_output_primitives: UInt32
    var max_mesh_output_layers: UInt32
    var max_mesh_multiview_view_count: UInt32
    var mesh_output_per_vertex_granularity: UInt32
    var mesh_output_per_primitive_granularity: UInt32
    var max_preferred_task_work_group_invocations: UInt32
    var max_preferred_mesh_work_group_invocations: UInt32
    var prefers_local_invocation_vertex_output: Bool32
    var prefers_local_invocation_primitive_output: Bool32
    var prefers_compact_vertex_output: Bool32
    var prefers_compact_primitive_output: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_task_work_group_total_count: UInt32 = zero_init[UInt32](),
        max_task_work_group_count: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_task_work_group_invocations: UInt32 = zero_init[UInt32](),
        max_task_work_group_size: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_task_payload_size: UInt32 = zero_init[UInt32](),
        max_task_shared_memory_size: UInt32 = zero_init[UInt32](),
        max_task_payload_and_shared_memory_size: UInt32 = zero_init[UInt32](),
        max_mesh_work_group_total_count: UInt32 = zero_init[UInt32](),
        max_mesh_work_group_count: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_mesh_work_group_invocations: UInt32 = zero_init[UInt32](),
        max_mesh_work_group_size: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_mesh_shared_memory_size: UInt32 = zero_init[UInt32](),
        max_mesh_payload_and_shared_memory_size: UInt32 = zero_init[UInt32](),
        max_mesh_output_memory_size: UInt32 = zero_init[UInt32](),
        max_mesh_payload_and_output_memory_size: UInt32 = zero_init[UInt32](),
        max_mesh_output_components: UInt32 = zero_init[UInt32](),
        max_mesh_output_vertices: UInt32 = zero_init[UInt32](),
        max_mesh_output_primitives: UInt32 = zero_init[UInt32](),
        max_mesh_output_layers: UInt32 = zero_init[UInt32](),
        max_mesh_multiview_view_count: UInt32 = zero_init[UInt32](),
        mesh_output_per_vertex_granularity: UInt32 = zero_init[UInt32](),
        mesh_output_per_primitive_granularity: UInt32 = zero_init[UInt32](),
        max_preferred_task_work_group_invocations: UInt32 = zero_init[UInt32](),
        max_preferred_mesh_work_group_invocations: UInt32 = zero_init[UInt32](),
        prefers_local_invocation_vertex_output: Bool32 = zero_init[Bool32](),
        prefers_local_invocation_primitive_output: Bool32 = zero_init[Bool32](),
        prefers_compact_vertex_output: Bool32 = zero_init[Bool32](),
        prefers_compact_primitive_output: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_EXT
        self.p_next = p_next
        self.max_task_work_group_total_count = max_task_work_group_total_count
        self.max_task_work_group_count = max_task_work_group_count
        self.max_task_work_group_invocations = max_task_work_group_invocations
        self.max_task_work_group_size = max_task_work_group_size
        self.max_task_payload_size = max_task_payload_size
        self.max_task_shared_memory_size = max_task_shared_memory_size
        self.max_task_payload_and_shared_memory_size = max_task_payload_and_shared_memory_size
        self.max_mesh_work_group_total_count = max_mesh_work_group_total_count
        self.max_mesh_work_group_count = max_mesh_work_group_count
        self.max_mesh_work_group_invocations = max_mesh_work_group_invocations
        self.max_mesh_work_group_size = max_mesh_work_group_size
        self.max_mesh_shared_memory_size = max_mesh_shared_memory_size
        self.max_mesh_payload_and_shared_memory_size = max_mesh_payload_and_shared_memory_size
        self.max_mesh_output_memory_size = max_mesh_output_memory_size
        self.max_mesh_payload_and_output_memory_size = max_mesh_payload_and_output_memory_size
        self.max_mesh_output_components = max_mesh_output_components
        self.max_mesh_output_vertices = max_mesh_output_vertices
        self.max_mesh_output_primitives = max_mesh_output_primitives
        self.max_mesh_output_layers = max_mesh_output_layers
        self.max_mesh_multiview_view_count = max_mesh_multiview_view_count
        self.mesh_output_per_vertex_granularity = mesh_output_per_vertex_granularity
        self.mesh_output_per_primitive_granularity = mesh_output_per_primitive_granularity
        self.max_preferred_task_work_group_invocations = max_preferred_task_work_group_invocations
        self.max_preferred_mesh_work_group_invocations = max_preferred_mesh_work_group_invocations
        self.prefers_local_invocation_vertex_output = prefers_local_invocation_vertex_output
        self.prefers_local_invocation_primitive_output = prefers_local_invocation_primitive_output
        self.prefers_compact_vertex_output = prefers_compact_vertex_output
        self.prefers_compact_primitive_output = prefers_compact_primitive_output


struct DrawMeshTasksIndirectCommandEXT(ImplicitlyCopyable, Movable):
    var group_count_x: UInt32
    var group_count_y: UInt32
    var group_count_z: UInt32

    fn __init__(
        out self,
        group_count_x: UInt32 = zero_init[UInt32](),
        group_count_y: UInt32 = zero_init[UInt32](),
        group_count_z: UInt32 = zero_init[UInt32](),
    ):
        self.group_count_x = group_count_x
        self.group_count_y = group_count_y
        self.group_count_z = group_count_z


struct RayTracingShaderGroupCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: RayTracingShaderGroupTypeKHR
    var general_shader: UInt32
    var closest_hit_shader: UInt32
    var any_hit_shader: UInt32
    var intersection_shader: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: RayTracingShaderGroupTypeKHR = zero_init[RayTracingShaderGroupTypeKHR](),
        general_shader: UInt32 = zero_init[UInt32](),
        closest_hit_shader: UInt32 = zero_init[UInt32](),
        any_hit_shader: UInt32 = zero_init[UInt32](),
        intersection_shader: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV
        self.p_next = p_next
        self.type = type
        self.general_shader = general_shader
        self.closest_hit_shader = closest_hit_shader
        self.any_hit_shader = any_hit_shader
        self.intersection_shader = intersection_shader


struct RayTracingShaderGroupCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: RayTracingShaderGroupTypeKHR
    var general_shader: UInt32
    var closest_hit_shader: UInt32
    var any_hit_shader: UInt32
    var intersection_shader: UInt32
    var p_shader_group_capture_replay_handle: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: RayTracingShaderGroupTypeKHR = zero_init[RayTracingShaderGroupTypeKHR](),
        general_shader: UInt32 = zero_init[UInt32](),
        closest_hit_shader: UInt32 = zero_init[UInt32](),
        any_hit_shader: UInt32 = zero_init[UInt32](),
        intersection_shader: UInt32 = zero_init[UInt32](),
        p_shader_group_capture_replay_handle: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR
        self.p_next = p_next
        self.type = type
        self.general_shader = general_shader
        self.closest_hit_shader = closest_hit_shader
        self.any_hit_shader = any_hit_shader
        self.intersection_shader = intersection_shader
        self.p_shader_group_capture_replay_handle = p_shader_group_capture_replay_handle


struct RayTracingPipelineCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCreateFlags
    var stage_count: UInt32
    var p_stages: Ptr[PipelineShaderStageCreateInfo]
    var group_count: UInt32
    var p_groups: Ptr[RayTracingShaderGroupCreateInfoNV]
    var max_recursion_depth: UInt32
    var layout: PipelineLayout
    var base_pipeline_handle: Pipeline
    var base_pipeline_index: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCreateFlags = zero_init[PipelineCreateFlags](),
        stage_count: UInt32 = zero_init[UInt32](),
        p_stages: Ptr[PipelineShaderStageCreateInfo] = zero_init[Ptr[PipelineShaderStageCreateInfo]](),
        group_count: UInt32 = zero_init[UInt32](),
        p_groups: Ptr[RayTracingShaderGroupCreateInfoNV] = zero_init[Ptr[RayTracingShaderGroupCreateInfoNV]](),
        max_recursion_depth: UInt32 = zero_init[UInt32](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        base_pipeline_handle: Pipeline = zero_init[Pipeline](),
        base_pipeline_index: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.RAY_TRACING_PIPELINE_CREATE_INFO_NV
        self.p_next = p_next
        self.flags = flags
        self.stage_count = stage_count
        self.p_stages = p_stages
        self.group_count = group_count
        self.p_groups = p_groups
        self.max_recursion_depth = max_recursion_depth
        self.layout = layout
        self.base_pipeline_handle = base_pipeline_handle
        self.base_pipeline_index = base_pipeline_index


struct RayTracingPipelineCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCreateFlags
    var stage_count: UInt32
    var p_stages: Ptr[PipelineShaderStageCreateInfo]
    var group_count: UInt32
    var p_groups: Ptr[RayTracingShaderGroupCreateInfoKHR]
    var max_pipeline_ray_recursion_depth: UInt32
    var p_library_info: Ptr[PipelineLibraryCreateInfoKHR]
    var p_library_interface: Ptr[RayTracingPipelineInterfaceCreateInfoKHR]
    var p_dynamic_state: Ptr[PipelineDynamicStateCreateInfo]
    var layout: PipelineLayout
    var base_pipeline_handle: Pipeline
    var base_pipeline_index: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCreateFlags = zero_init[PipelineCreateFlags](),
        stage_count: UInt32 = zero_init[UInt32](),
        p_stages: Ptr[PipelineShaderStageCreateInfo] = zero_init[Ptr[PipelineShaderStageCreateInfo]](),
        group_count: UInt32 = zero_init[UInt32](),
        p_groups: Ptr[RayTracingShaderGroupCreateInfoKHR] = zero_init[Ptr[RayTracingShaderGroupCreateInfoKHR]](),
        max_pipeline_ray_recursion_depth: UInt32 = zero_init[UInt32](),
        p_library_info: Ptr[PipelineLibraryCreateInfoKHR] = zero_init[Ptr[PipelineLibraryCreateInfoKHR]](),
        p_library_interface: Ptr[RayTracingPipelineInterfaceCreateInfoKHR] = zero_init[Ptr[RayTracingPipelineInterfaceCreateInfoKHR]](),
        p_dynamic_state: Ptr[PipelineDynamicStateCreateInfo] = zero_init[Ptr[PipelineDynamicStateCreateInfo]](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        base_pipeline_handle: Pipeline = zero_init[Pipeline](),
        base_pipeline_index: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.RAY_TRACING_PIPELINE_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.stage_count = stage_count
        self.p_stages = p_stages
        self.group_count = group_count
        self.p_groups = p_groups
        self.max_pipeline_ray_recursion_depth = max_pipeline_ray_recursion_depth
        self.p_library_info = p_library_info
        self.p_library_interface = p_library_interface
        self.p_dynamic_state = p_dynamic_state
        self.layout = layout
        self.base_pipeline_handle = base_pipeline_handle
        self.base_pipeline_index = base_pipeline_index


struct GeometryTrianglesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_data: Buffer
    var vertex_offset: DeviceSize
    var vertex_count: UInt32
    var vertex_stride: DeviceSize
    var vertex_format: Format
    var index_data: Buffer
    var index_offset: DeviceSize
    var index_count: UInt32
    var index_type: IndexType
    var transform_data: Buffer
    var transform_offset: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_data: Buffer = zero_init[Buffer](),
        vertex_offset: DeviceSize = zero_init[DeviceSize](),
        vertex_count: UInt32 = zero_init[UInt32](),
        vertex_stride: DeviceSize = zero_init[DeviceSize](),
        vertex_format: Format = zero_init[Format](),
        index_data: Buffer = zero_init[Buffer](),
        index_offset: DeviceSize = zero_init[DeviceSize](),
        index_count: UInt32 = zero_init[UInt32](),
        index_type: IndexType = zero_init[IndexType](),
        transform_data: Buffer = zero_init[Buffer](),
        transform_offset: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.GEOMETRY_TRIANGLES_NV
        self.p_next = p_next
        self.vertex_data = vertex_data
        self.vertex_offset = vertex_offset
        self.vertex_count = vertex_count
        self.vertex_stride = vertex_stride
        self.vertex_format = vertex_format
        self.index_data = index_data
        self.index_offset = index_offset
        self.index_count = index_count
        self.index_type = index_type
        self.transform_data = transform_data
        self.transform_offset = transform_offset


struct GeometryAABBNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var aabb_data: Buffer
    var num_aab_bs: UInt32
    var stride: UInt32
    var offset: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        aabb_data: Buffer = zero_init[Buffer](),
        num_aab_bs: UInt32 = zero_init[UInt32](),
        stride: UInt32 = zero_init[UInt32](),
        offset: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.GEOMETRY_AABB_NV
        self.p_next = p_next
        self.aabb_data = aabb_data
        self.num_aab_bs = num_aab_bs
        self.stride = stride
        self.offset = offset


struct GeometryDataNV(ImplicitlyCopyable, Movable):
    var triangles: GeometryTrianglesNV
    var aabbs: GeometryAABBNV

    fn __init__(
        out self,
        triangles: GeometryTrianglesNV = zero_init[GeometryTrianglesNV](),
        aabbs: GeometryAABBNV = zero_init[GeometryAABBNV](),
    ):
        self.triangles = triangles
        self.aabbs = aabbs


struct GeometryNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var geometry_type: GeometryTypeKHR
    var geometry: GeometryDataNV
    var flags: GeometryFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        geometry_type: GeometryTypeKHR = zero_init[GeometryTypeKHR](),
        geometry: GeometryDataNV = zero_init[GeometryDataNV](),
        flags: GeometryFlagsKHR = zero_init[GeometryFlagsKHR](),
    ):
        self.s_type = StructureType.GEOMETRY_NV
        self.p_next = p_next
        self.geometry_type = geometry_type
        self.geometry = geometry
        self.flags = flags


struct AccelerationStructureInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: AccelerationStructureTypeNV
    var flags: BuildAccelerationStructureFlagsNV
    var instance_count: UInt32
    var geometry_count: UInt32
    var p_geometries: Ptr[GeometryNV]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: AccelerationStructureTypeNV = zero_init[AccelerationStructureTypeNV](),
        flags: BuildAccelerationStructureFlagsNV = zero_init[BuildAccelerationStructureFlagsNV](),
        instance_count: UInt32 = zero_init[UInt32](),
        geometry_count: UInt32 = zero_init[UInt32](),
        p_geometries: Ptr[GeometryNV] = zero_init[Ptr[GeometryNV]](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_INFO_NV
        self.p_next = p_next
        self.type = type
        self.flags = flags
        self.instance_count = instance_count
        self.geometry_count = geometry_count
        self.p_geometries = p_geometries


struct AccelerationStructureCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var compacted_size: DeviceSize
    var info: AccelerationStructureInfoNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        compacted_size: DeviceSize = zero_init[DeviceSize](),
        info: AccelerationStructureInfoNV = zero_init[AccelerationStructureInfoNV](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_CREATE_INFO_NV
        self.p_next = p_next
        self.compacted_size = compacted_size
        self.info = info


struct BindAccelerationStructureMemoryInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acceleration_structure: AccelerationStructureNV
    var memory: DeviceMemory
    var memory_offset: DeviceSize
    var device_index_count: UInt32
    var p_device_indices: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acceleration_structure: AccelerationStructureNV = zero_init[AccelerationStructureNV](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        memory_offset: DeviceSize = zero_init[DeviceSize](),
        device_index_count: UInt32 = zero_init[UInt32](),
        p_device_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV
        self.p_next = p_next
        self.acceleration_structure = acceleration_structure
        self.memory = memory
        self.memory_offset = memory_offset
        self.device_index_count = device_index_count
        self.p_device_indices = p_device_indices


struct WriteDescriptorSetAccelerationStructureKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acceleration_structure_count: UInt32
    var p_acceleration_structures: Ptr[AccelerationStructureKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acceleration_structure_count: UInt32 = zero_init[UInt32](),
        p_acceleration_structures: Ptr[AccelerationStructureKHR] = zero_init[Ptr[AccelerationStructureKHR]](),
    ):
        self.s_type = StructureType.WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR
        self.p_next = p_next
        self.acceleration_structure_count = acceleration_structure_count
        self.p_acceleration_structures = p_acceleration_structures


struct WriteDescriptorSetAccelerationStructureNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acceleration_structure_count: UInt32
    var p_acceleration_structures: Ptr[AccelerationStructureNV]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acceleration_structure_count: UInt32 = zero_init[UInt32](),
        p_acceleration_structures: Ptr[AccelerationStructureNV] = zero_init[Ptr[AccelerationStructureNV]](),
    ):
        self.s_type = StructureType.WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV
        self.p_next = p_next
        self.acceleration_structure_count = acceleration_structure_count
        self.p_acceleration_structures = p_acceleration_structures


struct AccelerationStructureMemoryRequirementsInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: AccelerationStructureMemoryRequirementsTypeNV
    var acceleration_structure: AccelerationStructureNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: AccelerationStructureMemoryRequirementsTypeNV = zero_init[AccelerationStructureMemoryRequirementsTypeNV](),
        acceleration_structure: AccelerationStructureNV = zero_init[AccelerationStructureNV](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV
        self.p_next = p_next
        self.type = type
        self.acceleration_structure = acceleration_structure


struct PhysicalDeviceAccelerationStructureFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acceleration_structure: Bool32
    var acceleration_structure_capture_replay: Bool32
    var acceleration_structure_indirect_build: Bool32
    var acceleration_structure_host_commands: Bool32
    var descriptor_binding_acceleration_structure_update_after_bind: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acceleration_structure: Bool32 = zero_init[Bool32](),
        acceleration_structure_capture_replay: Bool32 = zero_init[Bool32](),
        acceleration_structure_indirect_build: Bool32 = zero_init[Bool32](),
        acceleration_structure_host_commands: Bool32 = zero_init[Bool32](),
        descriptor_binding_acceleration_structure_update_after_bind: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR
        self.p_next = p_next
        self.acceleration_structure = acceleration_structure
        self.acceleration_structure_capture_replay = acceleration_structure_capture_replay
        self.acceleration_structure_indirect_build = acceleration_structure_indirect_build
        self.acceleration_structure_host_commands = acceleration_structure_host_commands
        self.descriptor_binding_acceleration_structure_update_after_bind = descriptor_binding_acceleration_structure_update_after_bind


struct PhysicalDeviceRayTracingPipelineFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ray_tracing_pipeline: Bool32
    var ray_tracing_pipeline_shader_group_handle_capture_replay: Bool32
    var ray_tracing_pipeline_shader_group_handle_capture_replay_mixed: Bool32
    var ray_tracing_pipeline_trace_rays_indirect: Bool32
    var ray_traversal_primitive_culling: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ray_tracing_pipeline: Bool32 = zero_init[Bool32](),
        ray_tracing_pipeline_shader_group_handle_capture_replay: Bool32 = zero_init[Bool32](),
        ray_tracing_pipeline_shader_group_handle_capture_replay_mixed: Bool32 = zero_init[Bool32](),
        ray_tracing_pipeline_trace_rays_indirect: Bool32 = zero_init[Bool32](),
        ray_traversal_primitive_culling: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR
        self.p_next = p_next
        self.ray_tracing_pipeline = ray_tracing_pipeline
        self.ray_tracing_pipeline_shader_group_handle_capture_replay = ray_tracing_pipeline_shader_group_handle_capture_replay
        self.ray_tracing_pipeline_shader_group_handle_capture_replay_mixed = ray_tracing_pipeline_shader_group_handle_capture_replay_mixed
        self.ray_tracing_pipeline_trace_rays_indirect = ray_tracing_pipeline_trace_rays_indirect
        self.ray_traversal_primitive_culling = ray_traversal_primitive_culling


struct PhysicalDeviceRayQueryFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ray_query: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ray_query: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR
        self.p_next = p_next
        self.ray_query = ray_query


struct PhysicalDeviceAccelerationStructurePropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_geometry_count: UInt64
    var max_instance_count: UInt64
    var max_primitive_count: UInt64
    var max_per_stage_descriptor_acceleration_structures: UInt32
    var max_per_stage_descriptor_update_after_bind_acceleration_structures: UInt32
    var max_descriptor_set_acceleration_structures: UInt32
    var max_descriptor_set_update_after_bind_acceleration_structures: UInt32
    var min_acceleration_structure_scratch_offset_alignment: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_geometry_count: UInt64 = zero_init[UInt64](),
        max_instance_count: UInt64 = zero_init[UInt64](),
        max_primitive_count: UInt64 = zero_init[UInt64](),
        max_per_stage_descriptor_acceleration_structures: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_acceleration_structures: UInt32 = zero_init[UInt32](),
        max_descriptor_set_acceleration_structures: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_acceleration_structures: UInt32 = zero_init[UInt32](),
        min_acceleration_structure_scratch_offset_alignment: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR
        self.p_next = p_next
        self.max_geometry_count = max_geometry_count
        self.max_instance_count = max_instance_count
        self.max_primitive_count = max_primitive_count
        self.max_per_stage_descriptor_acceleration_structures = max_per_stage_descriptor_acceleration_structures
        self.max_per_stage_descriptor_update_after_bind_acceleration_structures = max_per_stage_descriptor_update_after_bind_acceleration_structures
        self.max_descriptor_set_acceleration_structures = max_descriptor_set_acceleration_structures
        self.max_descriptor_set_update_after_bind_acceleration_structures = max_descriptor_set_update_after_bind_acceleration_structures
        self.min_acceleration_structure_scratch_offset_alignment = min_acceleration_structure_scratch_offset_alignment


struct PhysicalDeviceRayTracingPipelinePropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_group_handle_size: UInt32
    var max_ray_recursion_depth: UInt32
    var max_shader_group_stride: UInt32
    var shader_group_base_alignment: UInt32
    var shader_group_handle_capture_replay_size: UInt32
    var max_ray_dispatch_invocation_count: UInt32
    var shader_group_handle_alignment: UInt32
    var max_ray_hit_attribute_size: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_group_handle_size: UInt32 = zero_init[UInt32](),
        max_ray_recursion_depth: UInt32 = zero_init[UInt32](),
        max_shader_group_stride: UInt32 = zero_init[UInt32](),
        shader_group_base_alignment: UInt32 = zero_init[UInt32](),
        shader_group_handle_capture_replay_size: UInt32 = zero_init[UInt32](),
        max_ray_dispatch_invocation_count: UInt32 = zero_init[UInt32](),
        shader_group_handle_alignment: UInt32 = zero_init[UInt32](),
        max_ray_hit_attribute_size: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR
        self.p_next = p_next
        self.shader_group_handle_size = shader_group_handle_size
        self.max_ray_recursion_depth = max_ray_recursion_depth
        self.max_shader_group_stride = max_shader_group_stride
        self.shader_group_base_alignment = shader_group_base_alignment
        self.shader_group_handle_capture_replay_size = shader_group_handle_capture_replay_size
        self.max_ray_dispatch_invocation_count = max_ray_dispatch_invocation_count
        self.shader_group_handle_alignment = shader_group_handle_alignment
        self.max_ray_hit_attribute_size = max_ray_hit_attribute_size


struct PhysicalDeviceRayTracingPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_group_handle_size: UInt32
    var max_recursion_depth: UInt32
    var max_shader_group_stride: UInt32
    var shader_group_base_alignment: UInt32
    var max_geometry_count: UInt64
    var max_instance_count: UInt64
    var max_triangle_count: UInt64
    var max_descriptor_set_acceleration_structures: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_group_handle_size: UInt32 = zero_init[UInt32](),
        max_recursion_depth: UInt32 = zero_init[UInt32](),
        max_shader_group_stride: UInt32 = zero_init[UInt32](),
        shader_group_base_alignment: UInt32 = zero_init[UInt32](),
        max_geometry_count: UInt64 = zero_init[UInt64](),
        max_instance_count: UInt64 = zero_init[UInt64](),
        max_triangle_count: UInt64 = zero_init[UInt64](),
        max_descriptor_set_acceleration_structures: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV
        self.p_next = p_next
        self.shader_group_handle_size = shader_group_handle_size
        self.max_recursion_depth = max_recursion_depth
        self.max_shader_group_stride = max_shader_group_stride
        self.shader_group_base_alignment = shader_group_base_alignment
        self.max_geometry_count = max_geometry_count
        self.max_instance_count = max_instance_count
        self.max_triangle_count = max_triangle_count
        self.max_descriptor_set_acceleration_structures = max_descriptor_set_acceleration_structures


struct StridedDeviceAddressRegionKHR(ImplicitlyCopyable, Movable):
    var device_address: DeviceAddress
    var stride: DeviceSize
    var size: DeviceSize

    fn __init__(
        out self,
        device_address: DeviceAddress = zero_init[DeviceAddress](),
        stride: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.device_address = device_address
        self.stride = stride
        self.size = size


struct TraceRaysIndirectCommandKHR(ImplicitlyCopyable, Movable):
    var width: UInt32
    var height: UInt32
    var depth: UInt32

    fn __init__(
        out self,
        width: UInt32 = zero_init[UInt32](),
        height: UInt32 = zero_init[UInt32](),
        depth: UInt32 = zero_init[UInt32](),
    ):
        self.width = width
        self.height = height
        self.depth = depth


struct TraceRaysIndirectCommand2KHR(ImplicitlyCopyable, Movable):
    var raygen_shader_record_address: DeviceAddress
    var raygen_shader_record_size: DeviceSize
    var miss_shader_binding_table_address: DeviceAddress
    var miss_shader_binding_table_size: DeviceSize
    var miss_shader_binding_table_stride: DeviceSize
    var hit_shader_binding_table_address: DeviceAddress
    var hit_shader_binding_table_size: DeviceSize
    var hit_shader_binding_table_stride: DeviceSize
    var callable_shader_binding_table_address: DeviceAddress
    var callable_shader_binding_table_size: DeviceSize
    var callable_shader_binding_table_stride: DeviceSize
    var width: UInt32
    var height: UInt32
    var depth: UInt32

    fn __init__(
        out self,
        raygen_shader_record_address: DeviceAddress = zero_init[DeviceAddress](),
        raygen_shader_record_size: DeviceSize = zero_init[DeviceSize](),
        miss_shader_binding_table_address: DeviceAddress = zero_init[DeviceAddress](),
        miss_shader_binding_table_size: DeviceSize = zero_init[DeviceSize](),
        miss_shader_binding_table_stride: DeviceSize = zero_init[DeviceSize](),
        hit_shader_binding_table_address: DeviceAddress = zero_init[DeviceAddress](),
        hit_shader_binding_table_size: DeviceSize = zero_init[DeviceSize](),
        hit_shader_binding_table_stride: DeviceSize = zero_init[DeviceSize](),
        callable_shader_binding_table_address: DeviceAddress = zero_init[DeviceAddress](),
        callable_shader_binding_table_size: DeviceSize = zero_init[DeviceSize](),
        callable_shader_binding_table_stride: DeviceSize = zero_init[DeviceSize](),
        width: UInt32 = zero_init[UInt32](),
        height: UInt32 = zero_init[UInt32](),
        depth: UInt32 = zero_init[UInt32](),
    ):
        self.raygen_shader_record_address = raygen_shader_record_address
        self.raygen_shader_record_size = raygen_shader_record_size
        self.miss_shader_binding_table_address = miss_shader_binding_table_address
        self.miss_shader_binding_table_size = miss_shader_binding_table_size
        self.miss_shader_binding_table_stride = miss_shader_binding_table_stride
        self.hit_shader_binding_table_address = hit_shader_binding_table_address
        self.hit_shader_binding_table_size = hit_shader_binding_table_size
        self.hit_shader_binding_table_stride = hit_shader_binding_table_stride
        self.callable_shader_binding_table_address = callable_shader_binding_table_address
        self.callable_shader_binding_table_size = callable_shader_binding_table_size
        self.callable_shader_binding_table_stride = callable_shader_binding_table_stride
        self.width = width
        self.height = height
        self.depth = depth


struct PhysicalDeviceRayTracingMaintenance1FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ray_tracing_maintenance_1: Bool32
    var ray_tracing_pipeline_trace_rays_indirect_2: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ray_tracing_maintenance_1: Bool32 = zero_init[Bool32](),
        ray_tracing_pipeline_trace_rays_indirect_2: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR
        self.p_next = p_next
        self.ray_tracing_maintenance_1 = ray_tracing_maintenance_1
        self.ray_tracing_pipeline_trace_rays_indirect_2 = ray_tracing_pipeline_trace_rays_indirect_2


struct DrmFormatModifierPropertiesListEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var drm_format_modifier_count: UInt32
    var p_drm_format_modifier_properties: Ptr[DrmFormatModifierPropertiesEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        drm_format_modifier_count: UInt32 = zero_init[UInt32](),
        p_drm_format_modifier_properties: Ptr[DrmFormatModifierPropertiesEXT] = zero_init[Ptr[DrmFormatModifierPropertiesEXT]](),
    ):
        self.s_type = StructureType.DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT
        self.p_next = p_next
        self.drm_format_modifier_count = drm_format_modifier_count
        self.p_drm_format_modifier_properties = p_drm_format_modifier_properties


struct DrmFormatModifierPropertiesEXT(ImplicitlyCopyable, Movable):
    var drm_format_modifier: UInt64
    var drm_format_modifier_plane_count: UInt32
    var drm_format_modifier_tiling_features: FormatFeatureFlags

    fn __init__(
        out self,
        drm_format_modifier: UInt64 = zero_init[UInt64](),
        drm_format_modifier_plane_count: UInt32 = zero_init[UInt32](),
        drm_format_modifier_tiling_features: FormatFeatureFlags = zero_init[FormatFeatureFlags](),
    ):
        self.drm_format_modifier = drm_format_modifier
        self.drm_format_modifier_plane_count = drm_format_modifier_plane_count
        self.drm_format_modifier_tiling_features = drm_format_modifier_tiling_features


struct PhysicalDeviceImageDrmFormatModifierInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var drm_format_modifier: UInt64
    var sharing_mode: SharingMode
    var queue_family_index_count: UInt32
    var p_queue_family_indices: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        drm_format_modifier: UInt64 = zero_init[UInt64](),
        sharing_mode: SharingMode = zero_init[SharingMode](),
        queue_family_index_count: UInt32 = zero_init[UInt32](),
        p_queue_family_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT
        self.p_next = p_next
        self.drm_format_modifier = drm_format_modifier
        self.sharing_mode = sharing_mode
        self.queue_family_index_count = queue_family_index_count
        self.p_queue_family_indices = p_queue_family_indices


struct ImageDrmFormatModifierListCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var drm_format_modifier_count: UInt32
    var p_drm_format_modifiers: Ptr[UInt64]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        drm_format_modifier_count: UInt32 = zero_init[UInt32](),
        p_drm_format_modifiers: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
    ):
        self.s_type = StructureType.IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT
        self.p_next = p_next
        self.drm_format_modifier_count = drm_format_modifier_count
        self.p_drm_format_modifiers = p_drm_format_modifiers


struct ImageDrmFormatModifierExplicitCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var drm_format_modifier: UInt64
    var drm_format_modifier_plane_count: UInt32
    var p_plane_layouts: Ptr[SubresourceLayout]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        drm_format_modifier: UInt64 = zero_init[UInt64](),
        drm_format_modifier_plane_count: UInt32 = zero_init[UInt32](),
        p_plane_layouts: Ptr[SubresourceLayout] = zero_init[Ptr[SubresourceLayout]](),
    ):
        self.s_type = StructureType.IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT
        self.p_next = p_next
        self.drm_format_modifier = drm_format_modifier
        self.drm_format_modifier_plane_count = drm_format_modifier_plane_count
        self.p_plane_layouts = p_plane_layouts


struct ImageDrmFormatModifierPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var drm_format_modifier: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        drm_format_modifier: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT
        self.p_next = p_next
        self.drm_format_modifier = drm_format_modifier


struct ImageStencilUsageCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stencil_usage: ImageUsageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stencil_usage: ImageUsageFlags = zero_init[ImageUsageFlags](),
    ):
        self.s_type = StructureType.IMAGE_STENCIL_USAGE_CREATE_INFO
        self.p_next = p_next
        self.stencil_usage = stencil_usage


struct DeviceMemoryOverallocationCreateInfoAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var overallocation_behavior: MemoryOverallocationBehaviorAMD

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        overallocation_behavior: MemoryOverallocationBehaviorAMD = zero_init[MemoryOverallocationBehaviorAMD](),
    ):
        self.s_type = StructureType.DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD
        self.p_next = p_next
        self.overallocation_behavior = overallocation_behavior


struct PhysicalDeviceFragmentDensityMapFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_density_map: Bool32
    var fragment_density_map_dynamic: Bool32
    var fragment_density_map_non_subsampled_images: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_density_map: Bool32 = zero_init[Bool32](),
        fragment_density_map_dynamic: Bool32 = zero_init[Bool32](),
        fragment_density_map_non_subsampled_images: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT
        self.p_next = p_next
        self.fragment_density_map = fragment_density_map
        self.fragment_density_map_dynamic = fragment_density_map_dynamic
        self.fragment_density_map_non_subsampled_images = fragment_density_map_non_subsampled_images


struct PhysicalDeviceFragmentDensityMap2FeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_density_map_deferred: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_density_map_deferred: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT
        self.p_next = p_next
        self.fragment_density_map_deferred = fragment_density_map_deferred


struct PhysicalDeviceFragmentDensityMapOffsetFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_density_map_offset: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_density_map_offset: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_EXT
        self.p_next = p_next
        self.fragment_density_map_offset = fragment_density_map_offset


struct PhysicalDeviceFragmentDensityMapPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_fragment_density_texel_size: Extent2D
    var max_fragment_density_texel_size: Extent2D
    var fragment_density_invocations: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_fragment_density_texel_size: Extent2D = zero_init[Extent2D](),
        max_fragment_density_texel_size: Extent2D = zero_init[Extent2D](),
        fragment_density_invocations: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT
        self.p_next = p_next
        self.min_fragment_density_texel_size = min_fragment_density_texel_size
        self.max_fragment_density_texel_size = max_fragment_density_texel_size
        self.fragment_density_invocations = fragment_density_invocations


struct PhysicalDeviceFragmentDensityMap2PropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var subsampled_loads: Bool32
    var subsampled_coarse_reconstruction_early_access: Bool32
    var max_subsampled_array_layers: UInt32
    var max_descriptor_set_subsampled_samplers: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        subsampled_loads: Bool32 = zero_init[Bool32](),
        subsampled_coarse_reconstruction_early_access: Bool32 = zero_init[Bool32](),
        max_subsampled_array_layers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_subsampled_samplers: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT
        self.p_next = p_next
        self.subsampled_loads = subsampled_loads
        self.subsampled_coarse_reconstruction_early_access = subsampled_coarse_reconstruction_early_access
        self.max_subsampled_array_layers = max_subsampled_array_layers
        self.max_descriptor_set_subsampled_samplers = max_descriptor_set_subsampled_samplers


struct PhysicalDeviceFragmentDensityMapOffsetPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_density_offset_granularity: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_density_offset_granularity: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_EXT
        self.p_next = p_next
        self.fragment_density_offset_granularity = fragment_density_offset_granularity


struct RenderPassFragmentDensityMapCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_density_map_attachment: AttachmentReference

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_density_map_attachment: AttachmentReference = zero_init[AttachmentReference](),
    ):
        self.s_type = StructureType.RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT
        self.p_next = p_next
        self.fragment_density_map_attachment = fragment_density_map_attachment


struct RenderPassFragmentDensityMapOffsetEndInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_density_offset_count: UInt32
    var p_fragment_density_offsets: Ptr[Offset2D]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_density_offset_count: UInt32 = zero_init[UInt32](),
        p_fragment_density_offsets: Ptr[Offset2D] = zero_init[Ptr[Offset2D]](),
    ):
        self.s_type = StructureType.RENDER_PASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_EXT
        self.p_next = p_next
        self.fragment_density_offset_count = fragment_density_offset_count
        self.p_fragment_density_offsets = p_fragment_density_offsets


struct PhysicalDeviceScalarBlockLayoutFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var scalar_block_layout: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        scalar_block_layout: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES
        self.p_next = p_next
        self.scalar_block_layout = scalar_block_layout


struct SurfaceProtectedCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var supports_protected: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        supports_protected: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SURFACE_PROTECTED_CAPABILITIES_KHR
        self.p_next = p_next
        self.supports_protected = supports_protected


struct PhysicalDeviceUniformBufferStandardLayoutFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var uniform_buffer_standard_layout: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        uniform_buffer_standard_layout: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES
        self.p_next = p_next
        self.uniform_buffer_standard_layout = uniform_buffer_standard_layout


struct PhysicalDeviceDepthClipEnableFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var depth_clip_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        depth_clip_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT
        self.p_next = p_next
        self.depth_clip_enable = depth_clip_enable


struct PipelineRasterizationDepthClipStateCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineRasterizationDepthClipStateCreateFlagsEXT
    var depth_clip_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineRasterizationDepthClipStateCreateFlagsEXT = zero_init[PipelineRasterizationDepthClipStateCreateFlagsEXT](),
        depth_clip_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.depth_clip_enable = depth_clip_enable


struct PhysicalDeviceMemoryBudgetPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var heap_budget: InlineArray[DeviceSize, Int(MAX_MEMORY_HEAPS)]
    var heap_usage: InlineArray[DeviceSize, Int(MAX_MEMORY_HEAPS)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        heap_budget: InlineArray[DeviceSize, Int(MAX_MEMORY_HEAPS)] = zero_init[InlineArray[DeviceSize, Int(MAX_MEMORY_HEAPS)]](),
        heap_usage: InlineArray[DeviceSize, Int(MAX_MEMORY_HEAPS)] = zero_init[InlineArray[DeviceSize, Int(MAX_MEMORY_HEAPS)]](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT
        self.p_next = p_next
        self.heap_budget = heap_budget
        self.heap_usage = heap_usage


struct PhysicalDeviceMemoryPriorityFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_priority: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_priority: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT
        self.p_next = p_next
        self.memory_priority = memory_priority


struct MemoryPriorityAllocateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var priority: Float32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        priority: Float32 = zero_init[Float32](),
    ):
        self.s_type = StructureType.MEMORY_PRIORITY_ALLOCATE_INFO_EXT
        self.p_next = p_next
        self.priority = priority


struct PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pageable_device_local_memory: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pageable_device_local_memory: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT
        self.p_next = p_next
        self.pageable_device_local_memory = pageable_device_local_memory


struct PhysicalDeviceBufferDeviceAddressFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer_device_address: Bool32
    var buffer_device_address_capture_replay: Bool32
    var buffer_device_address_multi_device: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer_device_address: Bool32 = zero_init[Bool32](),
        buffer_device_address_capture_replay: Bool32 = zero_init[Bool32](),
        buffer_device_address_multi_device: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES
        self.p_next = p_next
        self.buffer_device_address = buffer_device_address
        self.buffer_device_address_capture_replay = buffer_device_address_capture_replay
        self.buffer_device_address_multi_device = buffer_device_address_multi_device


struct PhysicalDeviceBufferDeviceAddressFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer_device_address: Bool32
    var buffer_device_address_capture_replay: Bool32
    var buffer_device_address_multi_device: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer_device_address: Bool32 = zero_init[Bool32](),
        buffer_device_address_capture_replay: Bool32 = zero_init[Bool32](),
        buffer_device_address_multi_device: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT
        self.p_next = p_next
        self.buffer_device_address = buffer_device_address
        self.buffer_device_address_capture_replay = buffer_device_address_capture_replay
        self.buffer_device_address_multi_device = buffer_device_address_multi_device


struct BufferDeviceAddressInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer: Buffer

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer: Buffer = zero_init[Buffer](),
    ):
        self.s_type = StructureType.BUFFER_DEVICE_ADDRESS_INFO
        self.p_next = p_next
        self.buffer = buffer


struct BufferOpaqueCaptureAddressCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var opaque_capture_address: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        opaque_capture_address: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO
        self.p_next = p_next
        self.opaque_capture_address = opaque_capture_address


struct BufferDeviceAddressCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_address: DeviceAddress

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_address: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.s_type = StructureType.BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT
        self.p_next = p_next
        self.device_address = device_address


struct PhysicalDeviceImageViewImageFormatInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_view_type: ImageViewType

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_view_type: ImageViewType = zero_init[ImageViewType](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT
        self.p_next = p_next
        self.image_view_type = image_view_type


struct FilterCubicImageViewImageFormatPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var filter_cubic: Bool32
    var filter_cubic_minmax: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        filter_cubic: Bool32 = zero_init[Bool32](),
        filter_cubic_minmax: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT
        self.p_next = p_next
        self.filter_cubic = filter_cubic
        self.filter_cubic_minmax = filter_cubic_minmax


struct PhysicalDeviceImagelessFramebufferFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var imageless_framebuffer: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        imageless_framebuffer: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES
        self.p_next = p_next
        self.imageless_framebuffer = imageless_framebuffer


struct FramebufferAttachmentsCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var attachment_image_info_count: UInt32
    var p_attachment_image_infos: Ptr[FramebufferAttachmentImageInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        attachment_image_info_count: UInt32 = zero_init[UInt32](),
        p_attachment_image_infos: Ptr[FramebufferAttachmentImageInfo] = zero_init[Ptr[FramebufferAttachmentImageInfo]](),
    ):
        self.s_type = StructureType.FRAMEBUFFER_ATTACHMENTS_CREATE_INFO
        self.p_next = p_next
        self.attachment_image_info_count = attachment_image_info_count
        self.p_attachment_image_infos = p_attachment_image_infos


struct FramebufferAttachmentImageInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ImageCreateFlags
    var usage: ImageUsageFlags
    var width: UInt32
    var height: UInt32
    var layer_count: UInt32
    var view_format_count: UInt32
    var p_view_formats: Ptr[Format]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ImageCreateFlags = zero_init[ImageCreateFlags](),
        usage: ImageUsageFlags = zero_init[ImageUsageFlags](),
        width: UInt32 = zero_init[UInt32](),
        height: UInt32 = zero_init[UInt32](),
        layer_count: UInt32 = zero_init[UInt32](),
        view_format_count: UInt32 = zero_init[UInt32](),
        p_view_formats: Ptr[Format] = zero_init[Ptr[Format]](),
    ):
        self.s_type = StructureType.FRAMEBUFFER_ATTACHMENT_IMAGE_INFO
        self.p_next = p_next
        self.flags = flags
        self.usage = usage
        self.width = width
        self.height = height
        self.layer_count = layer_count
        self.view_format_count = view_format_count
        self.p_view_formats = p_view_formats


struct RenderPassAttachmentBeginInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var attachment_count: UInt32
    var p_attachments: Ptr[ImageView]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        attachment_count: UInt32 = zero_init[UInt32](),
        p_attachments: Ptr[ImageView] = zero_init[Ptr[ImageView]](),
    ):
        self.s_type = StructureType.RENDER_PASS_ATTACHMENT_BEGIN_INFO
        self.p_next = p_next
        self.attachment_count = attachment_count
        self.p_attachments = p_attachments


struct PhysicalDeviceTextureCompressionASTCHDRFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var texture_compression_astc_hdr: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        texture_compression_astc_hdr: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES
        self.p_next = p_next
        self.texture_compression_astc_hdr = texture_compression_astc_hdr


struct PhysicalDeviceCooperativeMatrixFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cooperative_matrix: Bool32
    var cooperative_matrix_robust_buffer_access: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cooperative_matrix: Bool32 = zero_init[Bool32](),
        cooperative_matrix_robust_buffer_access: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV
        self.p_next = p_next
        self.cooperative_matrix = cooperative_matrix
        self.cooperative_matrix_robust_buffer_access = cooperative_matrix_robust_buffer_access


struct PhysicalDeviceCooperativeMatrixPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cooperative_matrix_supported_stages: ShaderStageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cooperative_matrix_supported_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV
        self.p_next = p_next
        self.cooperative_matrix_supported_stages = cooperative_matrix_supported_stages


struct CooperativeMatrixPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var m_size: UInt32
    var n_size: UInt32
    var k_size: UInt32
    var a_type: ComponentTypeNV
    var b_type: ComponentTypeNV
    var c_type: ComponentTypeNV
    var d_type: ComponentTypeNV
    var scope: ScopeNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        m_size: UInt32 = zero_init[UInt32](),
        n_size: UInt32 = zero_init[UInt32](),
        k_size: UInt32 = zero_init[UInt32](),
        a_type: ComponentTypeNV = zero_init[ComponentTypeNV](),
        b_type: ComponentTypeNV = zero_init[ComponentTypeNV](),
        c_type: ComponentTypeNV = zero_init[ComponentTypeNV](),
        d_type: ComponentTypeNV = zero_init[ComponentTypeNV](),
        scope: ScopeNV = zero_init[ScopeNV](),
    ):
        self.s_type = StructureType.COOPERATIVE_MATRIX_PROPERTIES_NV
        self.p_next = p_next
        self.m_size = m_size
        self.n_size = n_size
        self.k_size = k_size
        self.a_type = a_type
        self.b_type = b_type
        self.c_type = c_type
        self.d_type = d_type
        self.scope = scope


struct PhysicalDeviceYcbcrImageArraysFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ycbcr_image_arrays: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ycbcr_image_arrays: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT
        self.p_next = p_next
        self.ycbcr_image_arrays = ycbcr_image_arrays


struct ImageViewHandleInfoNVX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_view: ImageView
    var descriptor_type: DescriptorType
    var sampler: Sampler

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_view: ImageView = zero_init[ImageView](),
        descriptor_type: DescriptorType = zero_init[DescriptorType](),
        sampler: Sampler = zero_init[Sampler](),
    ):
        self.s_type = StructureType.IMAGE_VIEW_HANDLE_INFO_NVX
        self.p_next = p_next
        self.image_view = image_view
        self.descriptor_type = descriptor_type
        self.sampler = sampler


struct ImageViewAddressPropertiesNVX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_address: DeviceAddress
    var size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_address: DeviceAddress = zero_init[DeviceAddress](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.IMAGE_VIEW_ADDRESS_PROPERTIES_NVX
        self.p_next = p_next
        self.device_address = device_address
        self.size = size


struct PresentFrameTokenGGP(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var frame_token: GgpFrameToken

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        frame_token: GgpFrameToken = zero_init[GgpFrameToken](),
    ):
        self.s_type = StructureType.PRESENT_FRAME_TOKEN_GGP
        self.p_next = p_next
        self.frame_token = frame_token


struct PipelineCreationFeedback(ImplicitlyCopyable, Movable):
    var flags: PipelineCreationFeedbackFlags
    var duration: UInt64

    fn __init__(
        out self,
        flags: PipelineCreationFeedbackFlags = zero_init[PipelineCreationFeedbackFlags](),
        duration: UInt64 = zero_init[UInt64](),
    ):
        self.flags = flags
        self.duration = duration


struct PipelineCreationFeedbackCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_pipeline_creation_feedback: Ptr[PipelineCreationFeedback]
    var pipeline_stage_creation_feedback_count: UInt32
    var p_pipeline_stage_creation_feedbacks: Ptr[PipelineCreationFeedback]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_pipeline_creation_feedback: Ptr[PipelineCreationFeedback] = zero_init[Ptr[PipelineCreationFeedback]](),
        pipeline_stage_creation_feedback_count: UInt32 = zero_init[UInt32](),
        p_pipeline_stage_creation_feedbacks: Ptr[PipelineCreationFeedback] = zero_init[Ptr[PipelineCreationFeedback]](),
    ):
        self.s_type = StructureType.PIPELINE_CREATION_FEEDBACK_CREATE_INFO
        self.p_next = p_next
        self.p_pipeline_creation_feedback = p_pipeline_creation_feedback
        self.pipeline_stage_creation_feedback_count = pipeline_stage_creation_feedback_count
        self.p_pipeline_stage_creation_feedbacks = p_pipeline_stage_creation_feedbacks


struct SurfaceFullScreenExclusiveInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var full_screen_exclusive: FullScreenExclusiveEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        full_screen_exclusive: FullScreenExclusiveEXT = zero_init[FullScreenExclusiveEXT](),
    ):
        self.s_type = StructureType.SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT
        self.p_next = p_next
        self.full_screen_exclusive = full_screen_exclusive


struct SurfaceFullScreenExclusiveWin32InfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var hmonitor: HMONITOR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        hmonitor: HMONITOR = zero_init[HMONITOR](),
    ):
        self.s_type = StructureType.SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT
        self.p_next = p_next
        self.hmonitor = hmonitor


struct SurfaceCapabilitiesFullScreenExclusiveEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var full_screen_exclusive_supported: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        full_screen_exclusive_supported: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT
        self.p_next = p_next
        self.full_screen_exclusive_supported = full_screen_exclusive_supported


struct PhysicalDevicePresentBarrierFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_barrier: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_barrier: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV
        self.p_next = p_next
        self.present_barrier = present_barrier


struct SurfaceCapabilitiesPresentBarrierNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_barrier_supported: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_barrier_supported: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SURFACE_CAPABILITIES_PRESENT_BARRIER_NV
        self.p_next = p_next
        self.present_barrier_supported = present_barrier_supported


struct SwapchainPresentBarrierCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_barrier_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_barrier_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SWAPCHAIN_PRESENT_BARRIER_CREATE_INFO_NV
        self.p_next = p_next
        self.present_barrier_enable = present_barrier_enable


struct PhysicalDevicePerformanceQueryFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var performance_counter_query_pools: Bool32
    var performance_counter_multiple_query_pools: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        performance_counter_query_pools: Bool32 = zero_init[Bool32](),
        performance_counter_multiple_query_pools: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR
        self.p_next = p_next
        self.performance_counter_query_pools = performance_counter_query_pools
        self.performance_counter_multiple_query_pools = performance_counter_multiple_query_pools


struct PhysicalDevicePerformanceQueryPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var allow_command_buffer_query_copies: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        allow_command_buffer_query_copies: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR
        self.p_next = p_next
        self.allow_command_buffer_query_copies = allow_command_buffer_query_copies


struct PerformanceCounterKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var unit: PerformanceCounterUnitKHR
    var scope: PerformanceCounterScopeKHR
    var storage: PerformanceCounterStorageKHR
    var uuid: InlineArray[UInt8, Int(UUID_SIZE)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        unit: PerformanceCounterUnitKHR = zero_init[PerformanceCounterUnitKHR](),
        scope: PerformanceCounterScopeKHR = zero_init[PerformanceCounterScopeKHR](),
        storage: PerformanceCounterStorageKHR = zero_init[PerformanceCounterStorageKHR](),
        uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
    ):
        self.s_type = StructureType.PERFORMANCE_COUNTER_KHR
        self.p_next = p_next
        self.unit = unit
        self.scope = scope
        self.storage = storage
        self.uuid = uuid


struct PerformanceCounterDescriptionKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PerformanceCounterDescriptionFlagsKHR
    var name: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var category: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PerformanceCounterDescriptionFlagsKHR = zero_init[PerformanceCounterDescriptionFlagsKHR](),
        name: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        category: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
    ):
        self.s_type = StructureType.PERFORMANCE_COUNTER_DESCRIPTION_KHR
        self.p_next = p_next
        self.flags = flags
        self.name = name
        self.category = category
        self.description = description

    fn name_slice(self) -> StringSlice[__origin_of(self.name)]:
        return StringSlice[__origin_of(self.name)](unsafe_from_utf8_ptr = self.name.unsafe_ptr())

    fn category_slice(self) -> StringSlice[__origin_of(self.category)]:
        return StringSlice[__origin_of(self.category)](unsafe_from_utf8_ptr = self.category.unsafe_ptr())

    fn description_slice(self) -> StringSlice[__origin_of(self.description)]:
        return StringSlice[__origin_of(self.description)](unsafe_from_utf8_ptr = self.description.unsafe_ptr())


struct QueryPoolPerformanceCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var queue_family_index: UInt32
    var counter_index_count: UInt32
    var p_counter_indices: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        queue_family_index: UInt32 = zero_init[UInt32](),
        counter_index_count: UInt32 = zero_init[UInt32](),
        p_counter_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR
        self.p_next = p_next
        self.queue_family_index = queue_family_index
        self.counter_index_count = counter_index_count
        self.p_counter_indices = p_counter_indices


struct AcquireProfilingLockInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: AcquireProfilingLockFlagsKHR
    var timeout: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: AcquireProfilingLockFlagsKHR = zero_init[AcquireProfilingLockFlagsKHR](),
        timeout: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.ACQUIRE_PROFILING_LOCK_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.timeout = timeout


struct PerformanceQuerySubmitInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var counter_pass_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        counter_pass_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PERFORMANCE_QUERY_SUBMIT_INFO_KHR
        self.p_next = p_next
        self.counter_pass_index = counter_pass_index


struct PerformanceQueryReservationInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_performance_queries_per_pool: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_performance_queries_per_pool: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PERFORMANCE_QUERY_RESERVATION_INFO_KHR
        self.p_next = p_next
        self.max_performance_queries_per_pool = max_performance_queries_per_pool


struct HeadlessSurfaceCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: HeadlessSurfaceCreateFlagsEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: HeadlessSurfaceCreateFlagsEXT = zero_init[HeadlessSurfaceCreateFlagsEXT](),
    ):
        self.s_type = StructureType.HEADLESS_SURFACE_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags


struct PhysicalDeviceCoverageReductionModeFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var coverage_reduction_mode: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        coverage_reduction_mode: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV
        self.p_next = p_next
        self.coverage_reduction_mode = coverage_reduction_mode


struct PipelineCoverageReductionStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCoverageReductionStateCreateFlagsNV
    var coverage_reduction_mode: CoverageReductionModeNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCoverageReductionStateCreateFlagsNV = zero_init[PipelineCoverageReductionStateCreateFlagsNV](),
        coverage_reduction_mode: CoverageReductionModeNV = zero_init[CoverageReductionModeNV](),
    ):
        self.s_type = StructureType.PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.flags = flags
        self.coverage_reduction_mode = coverage_reduction_mode


struct FramebufferMixedSamplesCombinationNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var coverage_reduction_mode: CoverageReductionModeNV
    var rasterization_samples: SampleCountFlagBits
    var depth_stencil_samples: SampleCountFlags
    var color_samples: SampleCountFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        coverage_reduction_mode: CoverageReductionModeNV = zero_init[CoverageReductionModeNV](),
        rasterization_samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
        depth_stencil_samples: SampleCountFlags = zero_init[SampleCountFlags](),
        color_samples: SampleCountFlags = zero_init[SampleCountFlags](),
    ):
        self.s_type = StructureType.FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV
        self.p_next = p_next
        self.coverage_reduction_mode = coverage_reduction_mode
        self.rasterization_samples = rasterization_samples
        self.depth_stencil_samples = depth_stencil_samples
        self.color_samples = color_samples


struct PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_integer_functions_2: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_integer_functions_2: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL
        self.p_next = p_next
        self.shader_integer_functions_2 = shader_integer_functions_2


struct PerformanceValueINTEL(ImplicitlyCopyable, Movable):
    var type: PerformanceValueTypeINTEL
    var data: PerformanceValueDataINTEL

    fn __init__(
        out self,
        type: PerformanceValueTypeINTEL = zero_init[PerformanceValueTypeINTEL](),
        data: PerformanceValueDataINTEL = zero_init[PerformanceValueDataINTEL](),
    ):
        self.type = type
        self.data = data


struct InitializePerformanceApiInfoINTEL(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_user_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_user_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.INITIALIZE_PERFORMANCE_API_INFO_INTEL
        self.p_next = p_next
        self.p_user_data = p_user_data


struct QueryPoolPerformanceQueryCreateInfoINTEL(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var performance_counters_sampling: QueryPoolSamplingModeINTEL

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        performance_counters_sampling: QueryPoolSamplingModeINTEL = zero_init[QueryPoolSamplingModeINTEL](),
    ):
        self.s_type = StructureType.QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL
        self.p_next = p_next
        self.performance_counters_sampling = performance_counters_sampling


struct PerformanceMarkerInfoINTEL(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var marker: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        marker: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.PERFORMANCE_MARKER_INFO_INTEL
        self.p_next = p_next
        self.marker = marker


struct PerformanceStreamMarkerInfoINTEL(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var marker: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        marker: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PERFORMANCE_STREAM_MARKER_INFO_INTEL
        self.p_next = p_next
        self.marker = marker


struct PerformanceOverrideInfoINTEL(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: PerformanceOverrideTypeINTEL
    var enable: Bool32
    var parameter: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: PerformanceOverrideTypeINTEL = zero_init[PerformanceOverrideTypeINTEL](),
        enable: Bool32 = zero_init[Bool32](),
        parameter: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.PERFORMANCE_OVERRIDE_INFO_INTEL
        self.p_next = p_next
        self.type = type
        self.enable = enable
        self.parameter = parameter


struct PerformanceConfigurationAcquireInfoINTEL(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: PerformanceConfigurationTypeINTEL

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: PerformanceConfigurationTypeINTEL = zero_init[PerformanceConfigurationTypeINTEL](),
    ):
        self.s_type = StructureType.PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL
        self.p_next = p_next
        self.type = type


struct PhysicalDeviceShaderClockFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_subgroup_clock: Bool32
    var shader_device_clock: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_subgroup_clock: Bool32 = zero_init[Bool32](),
        shader_device_clock: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR
        self.p_next = p_next
        self.shader_subgroup_clock = shader_subgroup_clock
        self.shader_device_clock = shader_device_clock


struct PhysicalDeviceIndexTypeUint8Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var index_type_uint_8: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        index_type_uint_8: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES
        self.p_next = p_next
        self.index_type_uint_8 = index_type_uint_8


struct PhysicalDeviceShaderSMBuiltinsPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_sm_count: UInt32
    var shader_warps_per_sm: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_sm_count: UInt32 = zero_init[UInt32](),
        shader_warps_per_sm: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV
        self.p_next = p_next
        self.shader_sm_count = shader_sm_count
        self.shader_warps_per_sm = shader_warps_per_sm


struct PhysicalDeviceShaderSMBuiltinsFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_sm_builtins: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_sm_builtins: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV
        self.p_next = p_next
        self.shader_sm_builtins = shader_sm_builtins


struct PhysicalDeviceFragmentShaderInterlockFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_shader_sample_interlock: Bool32
    var fragment_shader_pixel_interlock: Bool32
    var fragment_shader_shading_rate_interlock: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_shader_sample_interlock: Bool32 = zero_init[Bool32](),
        fragment_shader_pixel_interlock: Bool32 = zero_init[Bool32](),
        fragment_shader_shading_rate_interlock: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT
        self.p_next = p_next
        self.fragment_shader_sample_interlock = fragment_shader_sample_interlock
        self.fragment_shader_pixel_interlock = fragment_shader_pixel_interlock
        self.fragment_shader_shading_rate_interlock = fragment_shader_shading_rate_interlock


struct PhysicalDeviceSeparateDepthStencilLayoutsFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var separate_depth_stencil_layouts: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        separate_depth_stencil_layouts: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES
        self.p_next = p_next
        self.separate_depth_stencil_layouts = separate_depth_stencil_layouts


struct AttachmentReferenceStencilLayout(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stencil_layout: ImageLayout

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stencil_layout: ImageLayout = zero_init[ImageLayout](),
    ):
        self.s_type = StructureType.ATTACHMENT_REFERENCE_STENCIL_LAYOUT
        self.p_next = p_next
        self.stencil_layout = stencil_layout


struct PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var primitive_topology_list_restart: Bool32
    var primitive_topology_patch_list_restart: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        primitive_topology_list_restart: Bool32 = zero_init[Bool32](),
        primitive_topology_patch_list_restart: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT
        self.p_next = p_next
        self.primitive_topology_list_restart = primitive_topology_list_restart
        self.primitive_topology_patch_list_restart = primitive_topology_patch_list_restart


struct AttachmentDescriptionStencilLayout(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stencil_initial_layout: ImageLayout
    var stencil_final_layout: ImageLayout

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stencil_initial_layout: ImageLayout = zero_init[ImageLayout](),
        stencil_final_layout: ImageLayout = zero_init[ImageLayout](),
    ):
        self.s_type = StructureType.ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT
        self.p_next = p_next
        self.stencil_initial_layout = stencil_initial_layout
        self.stencil_final_layout = stencil_final_layout


struct PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_executable_info: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_executable_info: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR
        self.p_next = p_next
        self.pipeline_executable_info = pipeline_executable_info


struct PipelineInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline: Pipeline

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline: Pipeline = zero_init[Pipeline](),
    ):
        self.s_type = StructureType.PIPELINE_INFO_KHR
        self.p_next = p_next
        self.pipeline = pipeline


struct PipelineExecutablePropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stages: ShaderStageFlags
    var name: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var subgroup_size: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
        name: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        subgroup_size: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PIPELINE_EXECUTABLE_PROPERTIES_KHR
        self.p_next = p_next
        self.stages = stages
        self.name = name
        self.description = description
        self.subgroup_size = subgroup_size

    fn name_slice(self) -> StringSlice[__origin_of(self.name)]:
        return StringSlice[__origin_of(self.name)](unsafe_from_utf8_ptr = self.name.unsafe_ptr())

    fn description_slice(self) -> StringSlice[__origin_of(self.description)]:
        return StringSlice[__origin_of(self.description)](unsafe_from_utf8_ptr = self.description.unsafe_ptr())


struct PipelineExecutableInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline: Pipeline
    var executable_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline: Pipeline = zero_init[Pipeline](),
        executable_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PIPELINE_EXECUTABLE_INFO_KHR
        self.p_next = p_next
        self.pipeline = pipeline
        self.executable_index = executable_index


struct PipelineExecutableStatisticKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var name: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var format: PipelineExecutableStatisticFormatKHR
    var value: PipelineExecutableStatisticValueKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        name: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        format: PipelineExecutableStatisticFormatKHR = zero_init[PipelineExecutableStatisticFormatKHR](),
        value: PipelineExecutableStatisticValueKHR = zero_init[PipelineExecutableStatisticValueKHR](),
    ):
        self.s_type = StructureType.PIPELINE_EXECUTABLE_STATISTIC_KHR
        self.p_next = p_next
        self.name = name
        self.description = description
        self.format = format
        self.value = value

    fn name_slice(self) -> StringSlice[__origin_of(self.name)]:
        return StringSlice[__origin_of(self.name)](unsafe_from_utf8_ptr = self.name.unsafe_ptr())

    fn description_slice(self) -> StringSlice[__origin_of(self.description)]:
        return StringSlice[__origin_of(self.description)](unsafe_from_utf8_ptr = self.description.unsafe_ptr())


struct PipelineExecutableInternalRepresentationKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var name: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var is_text: Bool32
    var data_size: UInt
    var p_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        name: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        is_text: Bool32 = zero_init[Bool32](),
        data_size: UInt = zero_init[UInt](),
        p_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR
        self.p_next = p_next
        self.name = name
        self.description = description
        self.is_text = is_text
        self.data_size = data_size
        self.p_data = p_data

    fn name_slice(self) -> StringSlice[__origin_of(self.name)]:
        return StringSlice[__origin_of(self.name)](unsafe_from_utf8_ptr = self.name.unsafe_ptr())

    fn description_slice(self) -> StringSlice[__origin_of(self.description)]:
        return StringSlice[__origin_of(self.description)](unsafe_from_utf8_ptr = self.description.unsafe_ptr())


struct PhysicalDeviceShaderDemoteToHelperInvocationFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_demote_to_helper_invocation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_demote_to_helper_invocation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES
        self.p_next = p_next
        self.shader_demote_to_helper_invocation = shader_demote_to_helper_invocation


struct PhysicalDeviceTexelBufferAlignmentFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var texel_buffer_alignment: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        texel_buffer_alignment: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT
        self.p_next = p_next
        self.texel_buffer_alignment = texel_buffer_alignment


struct PhysicalDeviceTexelBufferAlignmentProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var storage_texel_buffer_offset_alignment_bytes: DeviceSize
    var storage_texel_buffer_offset_single_texel_alignment: Bool32
    var uniform_texel_buffer_offset_alignment_bytes: DeviceSize
    var uniform_texel_buffer_offset_single_texel_alignment: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        storage_texel_buffer_offset_alignment_bytes: DeviceSize = zero_init[DeviceSize](),
        storage_texel_buffer_offset_single_texel_alignment: Bool32 = zero_init[Bool32](),
        uniform_texel_buffer_offset_alignment_bytes: DeviceSize = zero_init[DeviceSize](),
        uniform_texel_buffer_offset_single_texel_alignment: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES
        self.p_next = p_next
        self.storage_texel_buffer_offset_alignment_bytes = storage_texel_buffer_offset_alignment_bytes
        self.storage_texel_buffer_offset_single_texel_alignment = storage_texel_buffer_offset_single_texel_alignment
        self.uniform_texel_buffer_offset_alignment_bytes = uniform_texel_buffer_offset_alignment_bytes
        self.uniform_texel_buffer_offset_single_texel_alignment = uniform_texel_buffer_offset_single_texel_alignment


struct PhysicalDeviceSubgroupSizeControlFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var subgroup_size_control: Bool32
    var compute_full_subgroups: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        subgroup_size_control: Bool32 = zero_init[Bool32](),
        compute_full_subgroups: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES
        self.p_next = p_next
        self.subgroup_size_control = subgroup_size_control
        self.compute_full_subgroups = compute_full_subgroups


struct PhysicalDeviceSubgroupSizeControlProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_subgroup_size: UInt32
    var max_subgroup_size: UInt32
    var max_compute_workgroup_subgroups: UInt32
    var required_subgroup_size_stages: ShaderStageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_subgroup_size: UInt32 = zero_init[UInt32](),
        max_subgroup_size: UInt32 = zero_init[UInt32](),
        max_compute_workgroup_subgroups: UInt32 = zero_init[UInt32](),
        required_subgroup_size_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES
        self.p_next = p_next
        self.min_subgroup_size = min_subgroup_size
        self.max_subgroup_size = max_subgroup_size
        self.max_compute_workgroup_subgroups = max_compute_workgroup_subgroups
        self.required_subgroup_size_stages = required_subgroup_size_stages


struct PipelineShaderStageRequiredSubgroupSizeCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var required_subgroup_size: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        required_subgroup_size: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO
        self.p_next = p_next
        self.required_subgroup_size = required_subgroup_size


struct SubpassShadingPipelineCreateInfoHUAWEI(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var render_pass: RenderPass
    var subpass: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        render_pass: RenderPass = zero_init[RenderPass](),
        subpass: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI
        self.p_next = p_next
        self.render_pass = render_pass
        self.subpass = subpass


struct PhysicalDeviceSubpassShadingPropertiesHUAWEI(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_subpass_shading_workgroup_size_aspect_ratio: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_subpass_shading_workgroup_size_aspect_ratio: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI
        self.p_next = p_next
        self.max_subpass_shading_workgroup_size_aspect_ratio = max_subpass_shading_workgroup_size_aspect_ratio


struct PhysicalDeviceClusterCullingShaderPropertiesHUAWEI(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_work_group_count: InlineArray[UInt32, Int(3)]
    var max_work_group_size: InlineArray[UInt32, Int(3)]
    var max_output_cluster_count: UInt32
    var indirect_buffer_offset_alignment: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_work_group_count: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_work_group_size: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_output_cluster_count: UInt32 = zero_init[UInt32](),
        indirect_buffer_offset_alignment: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_PROPERTIES_HUAWEI
        self.p_next = p_next
        self.max_work_group_count = max_work_group_count
        self.max_work_group_size = max_work_group_size
        self.max_output_cluster_count = max_output_cluster_count
        self.indirect_buffer_offset_alignment = indirect_buffer_offset_alignment


struct MemoryOpaqueCaptureAddressAllocateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var opaque_capture_address: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        opaque_capture_address: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO
        self.p_next = p_next
        self.opaque_capture_address = opaque_capture_address


struct DeviceMemoryOpaqueCaptureAddressInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
    ):
        self.s_type = StructureType.DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO
        self.p_next = p_next
        self.memory = memory


struct PhysicalDeviceLineRasterizationFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var rectangular_lines: Bool32
    var bresenham_lines: Bool32
    var smooth_lines: Bool32
    var stippled_rectangular_lines: Bool32
    var stippled_bresenham_lines: Bool32
    var stippled_smooth_lines: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        rectangular_lines: Bool32 = zero_init[Bool32](),
        bresenham_lines: Bool32 = zero_init[Bool32](),
        smooth_lines: Bool32 = zero_init[Bool32](),
        stippled_rectangular_lines: Bool32 = zero_init[Bool32](),
        stippled_bresenham_lines: Bool32 = zero_init[Bool32](),
        stippled_smooth_lines: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES
        self.p_next = p_next
        self.rectangular_lines = rectangular_lines
        self.bresenham_lines = bresenham_lines
        self.smooth_lines = smooth_lines
        self.stippled_rectangular_lines = stippled_rectangular_lines
        self.stippled_bresenham_lines = stippled_bresenham_lines
        self.stippled_smooth_lines = stippled_smooth_lines


struct PhysicalDeviceLineRasterizationProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var line_sub_pixel_precision_bits: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        line_sub_pixel_precision_bits: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES
        self.p_next = p_next
        self.line_sub_pixel_precision_bits = line_sub_pixel_precision_bits


struct PipelineRasterizationLineStateCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var line_rasterization_mode: LineRasterizationMode
    var stippled_line_enable: Bool32
    var line_stipple_factor: UInt32
    var line_stipple_pattern: UInt16

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        line_rasterization_mode: LineRasterizationMode = zero_init[LineRasterizationMode](),
        stippled_line_enable: Bool32 = zero_init[Bool32](),
        line_stipple_factor: UInt32 = zero_init[UInt32](),
        line_stipple_pattern: UInt16 = zero_init[UInt16](),
    ):
        self.s_type = StructureType.PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO
        self.p_next = p_next
        self.line_rasterization_mode = line_rasterization_mode
        self.stippled_line_enable = stippled_line_enable
        self.line_stipple_factor = line_stipple_factor
        self.line_stipple_pattern = line_stipple_pattern


struct PhysicalDevicePipelineCreationCacheControlFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_creation_cache_control: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_creation_cache_control: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES
        self.p_next = p_next
        self.pipeline_creation_cache_control = pipeline_creation_cache_control


struct PhysicalDeviceVulkan11Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var storage_buffer_16_bit_access: Bool32
    var uniform_and_storage_buffer_16_bit_access: Bool32
    var storage_push_constant_16: Bool32
    var storage_input_output_16: Bool32
    var multiview: Bool32
    var multiview_geometry_shader: Bool32
    var multiview_tessellation_shader: Bool32
    var variable_pointers_storage_buffer: Bool32
    var variable_pointers: Bool32
    var protected_memory: Bool32
    var sampler_ycbcr_conversion: Bool32
    var shader_draw_parameters: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        storage_buffer_16_bit_access: Bool32 = zero_init[Bool32](),
        uniform_and_storage_buffer_16_bit_access: Bool32 = zero_init[Bool32](),
        storage_push_constant_16: Bool32 = zero_init[Bool32](),
        storage_input_output_16: Bool32 = zero_init[Bool32](),
        multiview: Bool32 = zero_init[Bool32](),
        multiview_geometry_shader: Bool32 = zero_init[Bool32](),
        multiview_tessellation_shader: Bool32 = zero_init[Bool32](),
        variable_pointers_storage_buffer: Bool32 = zero_init[Bool32](),
        variable_pointers: Bool32 = zero_init[Bool32](),
        protected_memory: Bool32 = zero_init[Bool32](),
        sampler_ycbcr_conversion: Bool32 = zero_init[Bool32](),
        shader_draw_parameters: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_1_1_FEATURES
        self.p_next = p_next
        self.storage_buffer_16_bit_access = storage_buffer_16_bit_access
        self.uniform_and_storage_buffer_16_bit_access = uniform_and_storage_buffer_16_bit_access
        self.storage_push_constant_16 = storage_push_constant_16
        self.storage_input_output_16 = storage_input_output_16
        self.multiview = multiview
        self.multiview_geometry_shader = multiview_geometry_shader
        self.multiview_tessellation_shader = multiview_tessellation_shader
        self.variable_pointers_storage_buffer = variable_pointers_storage_buffer
        self.variable_pointers = variable_pointers
        self.protected_memory = protected_memory
        self.sampler_ycbcr_conversion = sampler_ycbcr_conversion
        self.shader_draw_parameters = shader_draw_parameters


struct PhysicalDeviceVulkan11Properties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_uuid: InlineArray[UInt8, Int(UUID_SIZE)]
    var driver_uuid: InlineArray[UInt8, Int(UUID_SIZE)]
    var device_luid: InlineArray[UInt8, Int(LUID_SIZE)]
    var device_node_mask: UInt32
    var device_luid_valid: Bool32
    var subgroup_size: UInt32
    var subgroup_supported_stages: ShaderStageFlags
    var subgroup_supported_operations: SubgroupFeatureFlags
    var subgroup_quad_operations_in_all_stages: Bool32
    var point_clipping_behavior: PointClippingBehavior
    var max_multiview_view_count: UInt32
    var max_multiview_instance_index: UInt32
    var protected_no_fault: Bool32
    var max_per_set_descriptors: UInt32
    var max_memory_allocation_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        driver_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        device_luid: InlineArray[UInt8, Int(LUID_SIZE)] = zero_init[InlineArray[UInt8, Int(LUID_SIZE)]](),
        device_node_mask: UInt32 = zero_init[UInt32](),
        device_luid_valid: Bool32 = zero_init[Bool32](),
        subgroup_size: UInt32 = zero_init[UInt32](),
        subgroup_supported_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
        subgroup_supported_operations: SubgroupFeatureFlags = zero_init[SubgroupFeatureFlags](),
        subgroup_quad_operations_in_all_stages: Bool32 = zero_init[Bool32](),
        point_clipping_behavior: PointClippingBehavior = zero_init[PointClippingBehavior](),
        max_multiview_view_count: UInt32 = zero_init[UInt32](),
        max_multiview_instance_index: UInt32 = zero_init[UInt32](),
        protected_no_fault: Bool32 = zero_init[Bool32](),
        max_per_set_descriptors: UInt32 = zero_init[UInt32](),
        max_memory_allocation_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES
        self.p_next = p_next
        self.device_uuid = device_uuid
        self.driver_uuid = driver_uuid
        self.device_luid = device_luid
        self.device_node_mask = device_node_mask
        self.device_luid_valid = device_luid_valid
        self.subgroup_size = subgroup_size
        self.subgroup_supported_stages = subgroup_supported_stages
        self.subgroup_supported_operations = subgroup_supported_operations
        self.subgroup_quad_operations_in_all_stages = subgroup_quad_operations_in_all_stages
        self.point_clipping_behavior = point_clipping_behavior
        self.max_multiview_view_count = max_multiview_view_count
        self.max_multiview_instance_index = max_multiview_instance_index
        self.protected_no_fault = protected_no_fault
        self.max_per_set_descriptors = max_per_set_descriptors
        self.max_memory_allocation_size = max_memory_allocation_size


struct PhysicalDeviceVulkan12Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sampler_mirror_clamp_to_edge: Bool32
    var draw_indirect_count: Bool32
    var storage_buffer_8_bit_access: Bool32
    var uniform_and_storage_buffer_8_bit_access: Bool32
    var storage_push_constant_8: Bool32
    var shader_buffer_int_64_atomics: Bool32
    var shader_shared_int_64_atomics: Bool32
    var shader_float_16: Bool32
    var shader_int_8: Bool32
    var descriptor_indexing: Bool32
    var shader_input_attachment_array_dynamic_indexing: Bool32
    var shader_uniform_texel_buffer_array_dynamic_indexing: Bool32
    var shader_storage_texel_buffer_array_dynamic_indexing: Bool32
    var shader_uniform_buffer_array_non_uniform_indexing: Bool32
    var shader_sampled_image_array_non_uniform_indexing: Bool32
    var shader_storage_buffer_array_non_uniform_indexing: Bool32
    var shader_storage_image_array_non_uniform_indexing: Bool32
    var shader_input_attachment_array_non_uniform_indexing: Bool32
    var shader_uniform_texel_buffer_array_non_uniform_indexing: Bool32
    var shader_storage_texel_buffer_array_non_uniform_indexing: Bool32
    var descriptor_binding_uniform_buffer_update_after_bind: Bool32
    var descriptor_binding_sampled_image_update_after_bind: Bool32
    var descriptor_binding_storage_image_update_after_bind: Bool32
    var descriptor_binding_storage_buffer_update_after_bind: Bool32
    var descriptor_binding_uniform_texel_buffer_update_after_bind: Bool32
    var descriptor_binding_storage_texel_buffer_update_after_bind: Bool32
    var descriptor_binding_update_unused_while_pending: Bool32
    var descriptor_binding_partially_bound: Bool32
    var descriptor_binding_variable_descriptor_count: Bool32
    var runtime_descriptor_array: Bool32
    var sampler_filter_minmax: Bool32
    var scalar_block_layout: Bool32
    var imageless_framebuffer: Bool32
    var uniform_buffer_standard_layout: Bool32
    var shader_subgroup_extended_types: Bool32
    var separate_depth_stencil_layouts: Bool32
    var host_query_reset: Bool32
    var timeline_semaphore: Bool32
    var buffer_device_address: Bool32
    var buffer_device_address_capture_replay: Bool32
    var buffer_device_address_multi_device: Bool32
    var vulkan_memory_model: Bool32
    var vulkan_memory_model_device_scope: Bool32
    var vulkan_memory_model_availability_visibility_chains: Bool32
    var shader_output_viewport_index: Bool32
    var shader_output_layer: Bool32
    var subgroup_broadcast_dynamic_id: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sampler_mirror_clamp_to_edge: Bool32 = zero_init[Bool32](),
        draw_indirect_count: Bool32 = zero_init[Bool32](),
        storage_buffer_8_bit_access: Bool32 = zero_init[Bool32](),
        uniform_and_storage_buffer_8_bit_access: Bool32 = zero_init[Bool32](),
        storage_push_constant_8: Bool32 = zero_init[Bool32](),
        shader_buffer_int_64_atomics: Bool32 = zero_init[Bool32](),
        shader_shared_int_64_atomics: Bool32 = zero_init[Bool32](),
        shader_float_16: Bool32 = zero_init[Bool32](),
        shader_int_8: Bool32 = zero_init[Bool32](),
        descriptor_indexing: Bool32 = zero_init[Bool32](),
        shader_input_attachment_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_uniform_texel_buffer_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_texel_buffer_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_uniform_buffer_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_sampled_image_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_buffer_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_image_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_input_attachment_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_uniform_texel_buffer_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_texel_buffer_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        descriptor_binding_uniform_buffer_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_sampled_image_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_storage_image_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_storage_buffer_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_uniform_texel_buffer_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_storage_texel_buffer_update_after_bind: Bool32 = zero_init[Bool32](),
        descriptor_binding_update_unused_while_pending: Bool32 = zero_init[Bool32](),
        descriptor_binding_partially_bound: Bool32 = zero_init[Bool32](),
        descriptor_binding_variable_descriptor_count: Bool32 = zero_init[Bool32](),
        runtime_descriptor_array: Bool32 = zero_init[Bool32](),
        sampler_filter_minmax: Bool32 = zero_init[Bool32](),
        scalar_block_layout: Bool32 = zero_init[Bool32](),
        imageless_framebuffer: Bool32 = zero_init[Bool32](),
        uniform_buffer_standard_layout: Bool32 = zero_init[Bool32](),
        shader_subgroup_extended_types: Bool32 = zero_init[Bool32](),
        separate_depth_stencil_layouts: Bool32 = zero_init[Bool32](),
        host_query_reset: Bool32 = zero_init[Bool32](),
        timeline_semaphore: Bool32 = zero_init[Bool32](),
        buffer_device_address: Bool32 = zero_init[Bool32](),
        buffer_device_address_capture_replay: Bool32 = zero_init[Bool32](),
        buffer_device_address_multi_device: Bool32 = zero_init[Bool32](),
        vulkan_memory_model: Bool32 = zero_init[Bool32](),
        vulkan_memory_model_device_scope: Bool32 = zero_init[Bool32](),
        vulkan_memory_model_availability_visibility_chains: Bool32 = zero_init[Bool32](),
        shader_output_viewport_index: Bool32 = zero_init[Bool32](),
        shader_output_layer: Bool32 = zero_init[Bool32](),
        subgroup_broadcast_dynamic_id: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_1_2_FEATURES
        self.p_next = p_next
        self.sampler_mirror_clamp_to_edge = sampler_mirror_clamp_to_edge
        self.draw_indirect_count = draw_indirect_count
        self.storage_buffer_8_bit_access = storage_buffer_8_bit_access
        self.uniform_and_storage_buffer_8_bit_access = uniform_and_storage_buffer_8_bit_access
        self.storage_push_constant_8 = storage_push_constant_8
        self.shader_buffer_int_64_atomics = shader_buffer_int_64_atomics
        self.shader_shared_int_64_atomics = shader_shared_int_64_atomics
        self.shader_float_16 = shader_float_16
        self.shader_int_8 = shader_int_8
        self.descriptor_indexing = descriptor_indexing
        self.shader_input_attachment_array_dynamic_indexing = shader_input_attachment_array_dynamic_indexing
        self.shader_uniform_texel_buffer_array_dynamic_indexing = shader_uniform_texel_buffer_array_dynamic_indexing
        self.shader_storage_texel_buffer_array_dynamic_indexing = shader_storage_texel_buffer_array_dynamic_indexing
        self.shader_uniform_buffer_array_non_uniform_indexing = shader_uniform_buffer_array_non_uniform_indexing
        self.shader_sampled_image_array_non_uniform_indexing = shader_sampled_image_array_non_uniform_indexing
        self.shader_storage_buffer_array_non_uniform_indexing = shader_storage_buffer_array_non_uniform_indexing
        self.shader_storage_image_array_non_uniform_indexing = shader_storage_image_array_non_uniform_indexing
        self.shader_input_attachment_array_non_uniform_indexing = shader_input_attachment_array_non_uniform_indexing
        self.shader_uniform_texel_buffer_array_non_uniform_indexing = shader_uniform_texel_buffer_array_non_uniform_indexing
        self.shader_storage_texel_buffer_array_non_uniform_indexing = shader_storage_texel_buffer_array_non_uniform_indexing
        self.descriptor_binding_uniform_buffer_update_after_bind = descriptor_binding_uniform_buffer_update_after_bind
        self.descriptor_binding_sampled_image_update_after_bind = descriptor_binding_sampled_image_update_after_bind
        self.descriptor_binding_storage_image_update_after_bind = descriptor_binding_storage_image_update_after_bind
        self.descriptor_binding_storage_buffer_update_after_bind = descriptor_binding_storage_buffer_update_after_bind
        self.descriptor_binding_uniform_texel_buffer_update_after_bind = descriptor_binding_uniform_texel_buffer_update_after_bind
        self.descriptor_binding_storage_texel_buffer_update_after_bind = descriptor_binding_storage_texel_buffer_update_after_bind
        self.descriptor_binding_update_unused_while_pending = descriptor_binding_update_unused_while_pending
        self.descriptor_binding_partially_bound = descriptor_binding_partially_bound
        self.descriptor_binding_variable_descriptor_count = descriptor_binding_variable_descriptor_count
        self.runtime_descriptor_array = runtime_descriptor_array
        self.sampler_filter_minmax = sampler_filter_minmax
        self.scalar_block_layout = scalar_block_layout
        self.imageless_framebuffer = imageless_framebuffer
        self.uniform_buffer_standard_layout = uniform_buffer_standard_layout
        self.shader_subgroup_extended_types = shader_subgroup_extended_types
        self.separate_depth_stencil_layouts = separate_depth_stencil_layouts
        self.host_query_reset = host_query_reset
        self.timeline_semaphore = timeline_semaphore
        self.buffer_device_address = buffer_device_address
        self.buffer_device_address_capture_replay = buffer_device_address_capture_replay
        self.buffer_device_address_multi_device = buffer_device_address_multi_device
        self.vulkan_memory_model = vulkan_memory_model
        self.vulkan_memory_model_device_scope = vulkan_memory_model_device_scope
        self.vulkan_memory_model_availability_visibility_chains = vulkan_memory_model_availability_visibility_chains
        self.shader_output_viewport_index = shader_output_viewport_index
        self.shader_output_layer = shader_output_layer
        self.subgroup_broadcast_dynamic_id = subgroup_broadcast_dynamic_id


struct PhysicalDeviceVulkan12Properties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var driver_id: DriverId
    var driver_name: InlineArray[UInt8, Int(MAX_DRIVER_NAME_SIZE)]
    var driver_info: InlineArray[UInt8, Int(MAX_DRIVER_INFO_SIZE)]
    var conformance_version: ConformanceVersion
    var denorm_behavior_independence: ShaderFloatControlsIndependence
    var rounding_mode_independence: ShaderFloatControlsIndependence
    var shader_signed_zero_inf_nan_preserve_float_16: Bool32
    var shader_signed_zero_inf_nan_preserve_float_32: Bool32
    var shader_signed_zero_inf_nan_preserve_float_64: Bool32
    var shader_denorm_preserve_float_16: Bool32
    var shader_denorm_preserve_float_32: Bool32
    var shader_denorm_preserve_float_64: Bool32
    var shader_denorm_flush_to_zero_float_16: Bool32
    var shader_denorm_flush_to_zero_float_32: Bool32
    var shader_denorm_flush_to_zero_float_64: Bool32
    var shader_rounding_mode_rte_float_16: Bool32
    var shader_rounding_mode_rte_float_32: Bool32
    var shader_rounding_mode_rte_float_64: Bool32
    var shader_rounding_mode_rtz_float_16: Bool32
    var shader_rounding_mode_rtz_float_32: Bool32
    var shader_rounding_mode_rtz_float_64: Bool32
    var max_update_after_bind_descriptors_in_all_pools: UInt32
    var shader_uniform_buffer_array_non_uniform_indexing_native: Bool32
    var shader_sampled_image_array_non_uniform_indexing_native: Bool32
    var shader_storage_buffer_array_non_uniform_indexing_native: Bool32
    var shader_storage_image_array_non_uniform_indexing_native: Bool32
    var shader_input_attachment_array_non_uniform_indexing_native: Bool32
    var robust_buffer_access_update_after_bind: Bool32
    var quad_divergent_implicit_lod: Bool32
    var max_per_stage_descriptor_update_after_bind_samplers: UInt32
    var max_per_stage_descriptor_update_after_bind_uniform_buffers: UInt32
    var max_per_stage_descriptor_update_after_bind_storage_buffers: UInt32
    var max_per_stage_descriptor_update_after_bind_sampled_images: UInt32
    var max_per_stage_descriptor_update_after_bind_storage_images: UInt32
    var max_per_stage_descriptor_update_after_bind_input_attachments: UInt32
    var max_per_stage_update_after_bind_resources: UInt32
    var max_descriptor_set_update_after_bind_samplers: UInt32
    var max_descriptor_set_update_after_bind_uniform_buffers: UInt32
    var max_descriptor_set_update_after_bind_uniform_buffers_dynamic: UInt32
    var max_descriptor_set_update_after_bind_storage_buffers: UInt32
    var max_descriptor_set_update_after_bind_storage_buffers_dynamic: UInt32
    var max_descriptor_set_update_after_bind_sampled_images: UInt32
    var max_descriptor_set_update_after_bind_storage_images: UInt32
    var max_descriptor_set_update_after_bind_input_attachments: UInt32
    var supported_depth_resolve_modes: ResolveModeFlags
    var supported_stencil_resolve_modes: ResolveModeFlags
    var independent_resolve_none: Bool32
    var independent_resolve: Bool32
    var filter_minmax_single_component_formats: Bool32
    var filter_minmax_image_component_mapping: Bool32
    var max_timeline_semaphore_value_difference: UInt64
    var framebuffer_integer_color_sample_counts: SampleCountFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        driver_id: DriverId = zero_init[DriverId](),
        driver_name: InlineArray[UInt8, Int(MAX_DRIVER_NAME_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DRIVER_NAME_SIZE)]](),
        driver_info: InlineArray[UInt8, Int(MAX_DRIVER_INFO_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DRIVER_INFO_SIZE)]](),
        conformance_version: ConformanceVersion = zero_init[ConformanceVersion](),
        denorm_behavior_independence: ShaderFloatControlsIndependence = zero_init[ShaderFloatControlsIndependence](),
        rounding_mode_independence: ShaderFloatControlsIndependence = zero_init[ShaderFloatControlsIndependence](),
        shader_signed_zero_inf_nan_preserve_float_16: Bool32 = zero_init[Bool32](),
        shader_signed_zero_inf_nan_preserve_float_32: Bool32 = zero_init[Bool32](),
        shader_signed_zero_inf_nan_preserve_float_64: Bool32 = zero_init[Bool32](),
        shader_denorm_preserve_float_16: Bool32 = zero_init[Bool32](),
        shader_denorm_preserve_float_32: Bool32 = zero_init[Bool32](),
        shader_denorm_preserve_float_64: Bool32 = zero_init[Bool32](),
        shader_denorm_flush_to_zero_float_16: Bool32 = zero_init[Bool32](),
        shader_denorm_flush_to_zero_float_32: Bool32 = zero_init[Bool32](),
        shader_denorm_flush_to_zero_float_64: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rte_float_16: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rte_float_32: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rte_float_64: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rtz_float_16: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rtz_float_32: Bool32 = zero_init[Bool32](),
        shader_rounding_mode_rtz_float_64: Bool32 = zero_init[Bool32](),
        max_update_after_bind_descriptors_in_all_pools: UInt32 = zero_init[UInt32](),
        shader_uniform_buffer_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        shader_sampled_image_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        shader_storage_buffer_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        shader_storage_image_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        shader_input_attachment_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        robust_buffer_access_update_after_bind: Bool32 = zero_init[Bool32](),
        quad_divergent_implicit_lod: Bool32 = zero_init[Bool32](),
        max_per_stage_descriptor_update_after_bind_samplers: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_uniform_buffers: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_storage_buffers: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_sampled_images: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_storage_images: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_input_attachments: UInt32 = zero_init[UInt32](),
        max_per_stage_update_after_bind_resources: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_samplers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_uniform_buffers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_uniform_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_storage_buffers: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_storage_buffers_dynamic: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_sampled_images: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_storage_images: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_input_attachments: UInt32 = zero_init[UInt32](),
        supported_depth_resolve_modes: ResolveModeFlags = zero_init[ResolveModeFlags](),
        supported_stencil_resolve_modes: ResolveModeFlags = zero_init[ResolveModeFlags](),
        independent_resolve_none: Bool32 = zero_init[Bool32](),
        independent_resolve: Bool32 = zero_init[Bool32](),
        filter_minmax_single_component_formats: Bool32 = zero_init[Bool32](),
        filter_minmax_image_component_mapping: Bool32 = zero_init[Bool32](),
        max_timeline_semaphore_value_difference: UInt64 = zero_init[UInt64](),
        framebuffer_integer_color_sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES
        self.p_next = p_next
        self.driver_id = driver_id
        self.driver_name = driver_name
        self.driver_info = driver_info
        self.conformance_version = conformance_version
        self.denorm_behavior_independence = denorm_behavior_independence
        self.rounding_mode_independence = rounding_mode_independence
        self.shader_signed_zero_inf_nan_preserve_float_16 = shader_signed_zero_inf_nan_preserve_float_16
        self.shader_signed_zero_inf_nan_preserve_float_32 = shader_signed_zero_inf_nan_preserve_float_32
        self.shader_signed_zero_inf_nan_preserve_float_64 = shader_signed_zero_inf_nan_preserve_float_64
        self.shader_denorm_preserve_float_16 = shader_denorm_preserve_float_16
        self.shader_denorm_preserve_float_32 = shader_denorm_preserve_float_32
        self.shader_denorm_preserve_float_64 = shader_denorm_preserve_float_64
        self.shader_denorm_flush_to_zero_float_16 = shader_denorm_flush_to_zero_float_16
        self.shader_denorm_flush_to_zero_float_32 = shader_denorm_flush_to_zero_float_32
        self.shader_denorm_flush_to_zero_float_64 = shader_denorm_flush_to_zero_float_64
        self.shader_rounding_mode_rte_float_16 = shader_rounding_mode_rte_float_16
        self.shader_rounding_mode_rte_float_32 = shader_rounding_mode_rte_float_32
        self.shader_rounding_mode_rte_float_64 = shader_rounding_mode_rte_float_64
        self.shader_rounding_mode_rtz_float_16 = shader_rounding_mode_rtz_float_16
        self.shader_rounding_mode_rtz_float_32 = shader_rounding_mode_rtz_float_32
        self.shader_rounding_mode_rtz_float_64 = shader_rounding_mode_rtz_float_64
        self.max_update_after_bind_descriptors_in_all_pools = max_update_after_bind_descriptors_in_all_pools
        self.shader_uniform_buffer_array_non_uniform_indexing_native = shader_uniform_buffer_array_non_uniform_indexing_native
        self.shader_sampled_image_array_non_uniform_indexing_native = shader_sampled_image_array_non_uniform_indexing_native
        self.shader_storage_buffer_array_non_uniform_indexing_native = shader_storage_buffer_array_non_uniform_indexing_native
        self.shader_storage_image_array_non_uniform_indexing_native = shader_storage_image_array_non_uniform_indexing_native
        self.shader_input_attachment_array_non_uniform_indexing_native = shader_input_attachment_array_non_uniform_indexing_native
        self.robust_buffer_access_update_after_bind = robust_buffer_access_update_after_bind
        self.quad_divergent_implicit_lod = quad_divergent_implicit_lod
        self.max_per_stage_descriptor_update_after_bind_samplers = max_per_stage_descriptor_update_after_bind_samplers
        self.max_per_stage_descriptor_update_after_bind_uniform_buffers = max_per_stage_descriptor_update_after_bind_uniform_buffers
        self.max_per_stage_descriptor_update_after_bind_storage_buffers = max_per_stage_descriptor_update_after_bind_storage_buffers
        self.max_per_stage_descriptor_update_after_bind_sampled_images = max_per_stage_descriptor_update_after_bind_sampled_images
        self.max_per_stage_descriptor_update_after_bind_storage_images = max_per_stage_descriptor_update_after_bind_storage_images
        self.max_per_stage_descriptor_update_after_bind_input_attachments = max_per_stage_descriptor_update_after_bind_input_attachments
        self.max_per_stage_update_after_bind_resources = max_per_stage_update_after_bind_resources
        self.max_descriptor_set_update_after_bind_samplers = max_descriptor_set_update_after_bind_samplers
        self.max_descriptor_set_update_after_bind_uniform_buffers = max_descriptor_set_update_after_bind_uniform_buffers
        self.max_descriptor_set_update_after_bind_uniform_buffers_dynamic = max_descriptor_set_update_after_bind_uniform_buffers_dynamic
        self.max_descriptor_set_update_after_bind_storage_buffers = max_descriptor_set_update_after_bind_storage_buffers
        self.max_descriptor_set_update_after_bind_storage_buffers_dynamic = max_descriptor_set_update_after_bind_storage_buffers_dynamic
        self.max_descriptor_set_update_after_bind_sampled_images = max_descriptor_set_update_after_bind_sampled_images
        self.max_descriptor_set_update_after_bind_storage_images = max_descriptor_set_update_after_bind_storage_images
        self.max_descriptor_set_update_after_bind_input_attachments = max_descriptor_set_update_after_bind_input_attachments
        self.supported_depth_resolve_modes = supported_depth_resolve_modes
        self.supported_stencil_resolve_modes = supported_stencil_resolve_modes
        self.independent_resolve_none = independent_resolve_none
        self.independent_resolve = independent_resolve
        self.filter_minmax_single_component_formats = filter_minmax_single_component_formats
        self.filter_minmax_image_component_mapping = filter_minmax_image_component_mapping
        self.max_timeline_semaphore_value_difference = max_timeline_semaphore_value_difference
        self.framebuffer_integer_color_sample_counts = framebuffer_integer_color_sample_counts

    fn driver_name_slice(self) -> StringSlice[__origin_of(self.driver_name)]:
        return StringSlice[__origin_of(self.driver_name)](unsafe_from_utf8_ptr = self.driver_name.unsafe_ptr())

    fn driver_info_slice(self) -> StringSlice[__origin_of(self.driver_info)]:
        return StringSlice[__origin_of(self.driver_info)](unsafe_from_utf8_ptr = self.driver_info.unsafe_ptr())


struct PhysicalDeviceVulkan13Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var robust_image_access: Bool32
    var inline_uniform_block: Bool32
    var descriptor_binding_inline_uniform_block_update_after_bind: Bool32
    var pipeline_creation_cache_control: Bool32
    var private_data: Bool32
    var shader_demote_to_helper_invocation: Bool32
    var shader_terminate_invocation: Bool32
    var subgroup_size_control: Bool32
    var compute_full_subgroups: Bool32
    var synchronization_2: Bool32
    var texture_compression_astc_hdr: Bool32
    var shader_zero_initialize_workgroup_memory: Bool32
    var dynamic_rendering: Bool32
    var shader_integer_dot_product: Bool32
    var maintenance_4: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        robust_image_access: Bool32 = zero_init[Bool32](),
        inline_uniform_block: Bool32 = zero_init[Bool32](),
        descriptor_binding_inline_uniform_block_update_after_bind: Bool32 = zero_init[Bool32](),
        pipeline_creation_cache_control: Bool32 = zero_init[Bool32](),
        private_data: Bool32 = zero_init[Bool32](),
        shader_demote_to_helper_invocation: Bool32 = zero_init[Bool32](),
        shader_terminate_invocation: Bool32 = zero_init[Bool32](),
        subgroup_size_control: Bool32 = zero_init[Bool32](),
        compute_full_subgroups: Bool32 = zero_init[Bool32](),
        synchronization_2: Bool32 = zero_init[Bool32](),
        texture_compression_astc_hdr: Bool32 = zero_init[Bool32](),
        shader_zero_initialize_workgroup_memory: Bool32 = zero_init[Bool32](),
        dynamic_rendering: Bool32 = zero_init[Bool32](),
        shader_integer_dot_product: Bool32 = zero_init[Bool32](),
        maintenance_4: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_1_3_FEATURES
        self.p_next = p_next
        self.robust_image_access = robust_image_access
        self.inline_uniform_block = inline_uniform_block
        self.descriptor_binding_inline_uniform_block_update_after_bind = descriptor_binding_inline_uniform_block_update_after_bind
        self.pipeline_creation_cache_control = pipeline_creation_cache_control
        self.private_data = private_data
        self.shader_demote_to_helper_invocation = shader_demote_to_helper_invocation
        self.shader_terminate_invocation = shader_terminate_invocation
        self.subgroup_size_control = subgroup_size_control
        self.compute_full_subgroups = compute_full_subgroups
        self.synchronization_2 = synchronization_2
        self.texture_compression_astc_hdr = texture_compression_astc_hdr
        self.shader_zero_initialize_workgroup_memory = shader_zero_initialize_workgroup_memory
        self.dynamic_rendering = dynamic_rendering
        self.shader_integer_dot_product = shader_integer_dot_product
        self.maintenance_4 = maintenance_4


struct PhysicalDeviceVulkan13Properties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_subgroup_size: UInt32
    var max_subgroup_size: UInt32
    var max_compute_workgroup_subgroups: UInt32
    var required_subgroup_size_stages: ShaderStageFlags
    var max_inline_uniform_block_size: UInt32
    var max_per_stage_descriptor_inline_uniform_blocks: UInt32
    var max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: UInt32
    var max_descriptor_set_inline_uniform_blocks: UInt32
    var max_descriptor_set_update_after_bind_inline_uniform_blocks: UInt32
    var max_inline_uniform_total_size: UInt32
    var integer_dot_product_8_bit_unsigned_accelerated: Bool32
    var integer_dot_product_8_bit_signed_accelerated: Bool32
    var integer_dot_product_8_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_4_x_8_bit_packed_unsigned_accelerated: Bool32
    var integer_dot_product_4_x_8_bit_packed_signed_accelerated: Bool32
    var integer_dot_product_4_x_8_bit_packed_mixed_signedness_accelerated: Bool32
    var integer_dot_product_16_bit_unsigned_accelerated: Bool32
    var integer_dot_product_16_bit_signed_accelerated: Bool32
    var integer_dot_product_16_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_32_bit_unsigned_accelerated: Bool32
    var integer_dot_product_32_bit_signed_accelerated: Bool32
    var integer_dot_product_32_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_64_bit_unsigned_accelerated: Bool32
    var integer_dot_product_64_bit_signed_accelerated: Bool32
    var integer_dot_product_64_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_8_bit_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_8_bit_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_8_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_4_x_8_bit_packed_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_4_x_8_bit_packed_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_4_x_8_bit_packed_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_16_bit_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_16_bit_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_16_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_32_bit_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_32_bit_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_32_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_64_bit_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_64_bit_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_64_bit_mixed_signedness_accelerated: Bool32
    var storage_texel_buffer_offset_alignment_bytes: DeviceSize
    var storage_texel_buffer_offset_single_texel_alignment: Bool32
    var uniform_texel_buffer_offset_alignment_bytes: DeviceSize
    var uniform_texel_buffer_offset_single_texel_alignment: Bool32
    var max_buffer_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_subgroup_size: UInt32 = zero_init[UInt32](),
        max_subgroup_size: UInt32 = zero_init[UInt32](),
        max_compute_workgroup_subgroups: UInt32 = zero_init[UInt32](),
        required_subgroup_size_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
        max_inline_uniform_block_size: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_inline_uniform_blocks: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_inline_uniform_blocks: UInt32 = zero_init[UInt32](),
        max_descriptor_set_inline_uniform_blocks: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_inline_uniform_blocks: UInt32 = zero_init[UInt32](),
        max_inline_uniform_total_size: UInt32 = zero_init[UInt32](),
        integer_dot_product_8_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_8_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_8_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_4_x_8_bit_packed_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_4_x_8_bit_packed_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_4_x_8_bit_packed_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_16_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_16_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_16_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_32_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_32_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_32_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_64_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_64_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_64_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_8_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_8_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_8_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_4_x_8_bit_packed_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_4_x_8_bit_packed_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_4_x_8_bit_packed_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_16_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_16_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_16_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_32_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_32_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_32_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_64_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_64_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_64_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        storage_texel_buffer_offset_alignment_bytes: DeviceSize = zero_init[DeviceSize](),
        storage_texel_buffer_offset_single_texel_alignment: Bool32 = zero_init[Bool32](),
        uniform_texel_buffer_offset_alignment_bytes: DeviceSize = zero_init[DeviceSize](),
        uniform_texel_buffer_offset_single_texel_alignment: Bool32 = zero_init[Bool32](),
        max_buffer_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES
        self.p_next = p_next
        self.min_subgroup_size = min_subgroup_size
        self.max_subgroup_size = max_subgroup_size
        self.max_compute_workgroup_subgroups = max_compute_workgroup_subgroups
        self.required_subgroup_size_stages = required_subgroup_size_stages
        self.max_inline_uniform_block_size = max_inline_uniform_block_size
        self.max_per_stage_descriptor_inline_uniform_blocks = max_per_stage_descriptor_inline_uniform_blocks
        self.max_per_stage_descriptor_update_after_bind_inline_uniform_blocks = max_per_stage_descriptor_update_after_bind_inline_uniform_blocks
        self.max_descriptor_set_inline_uniform_blocks = max_descriptor_set_inline_uniform_blocks
        self.max_descriptor_set_update_after_bind_inline_uniform_blocks = max_descriptor_set_update_after_bind_inline_uniform_blocks
        self.max_inline_uniform_total_size = max_inline_uniform_total_size
        self.integer_dot_product_8_bit_unsigned_accelerated = integer_dot_product_8_bit_unsigned_accelerated
        self.integer_dot_product_8_bit_signed_accelerated = integer_dot_product_8_bit_signed_accelerated
        self.integer_dot_product_8_bit_mixed_signedness_accelerated = integer_dot_product_8_bit_mixed_signedness_accelerated
        self.integer_dot_product_4_x_8_bit_packed_unsigned_accelerated = integer_dot_product_4_x_8_bit_packed_unsigned_accelerated
        self.integer_dot_product_4_x_8_bit_packed_signed_accelerated = integer_dot_product_4_x_8_bit_packed_signed_accelerated
        self.integer_dot_product_4_x_8_bit_packed_mixed_signedness_accelerated = integer_dot_product_4_x_8_bit_packed_mixed_signedness_accelerated
        self.integer_dot_product_16_bit_unsigned_accelerated = integer_dot_product_16_bit_unsigned_accelerated
        self.integer_dot_product_16_bit_signed_accelerated = integer_dot_product_16_bit_signed_accelerated
        self.integer_dot_product_16_bit_mixed_signedness_accelerated = integer_dot_product_16_bit_mixed_signedness_accelerated
        self.integer_dot_product_32_bit_unsigned_accelerated = integer_dot_product_32_bit_unsigned_accelerated
        self.integer_dot_product_32_bit_signed_accelerated = integer_dot_product_32_bit_signed_accelerated
        self.integer_dot_product_32_bit_mixed_signedness_accelerated = integer_dot_product_32_bit_mixed_signedness_accelerated
        self.integer_dot_product_64_bit_unsigned_accelerated = integer_dot_product_64_bit_unsigned_accelerated
        self.integer_dot_product_64_bit_signed_accelerated = integer_dot_product_64_bit_signed_accelerated
        self.integer_dot_product_64_bit_mixed_signedness_accelerated = integer_dot_product_64_bit_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_8_bit_unsigned_accelerated = integer_dot_product_accumulating_saturating_8_bit_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_8_bit_signed_accelerated = integer_dot_product_accumulating_saturating_8_bit_signed_accelerated
        self.integer_dot_product_accumulating_saturating_8_bit_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_8_bit_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_4_x_8_bit_packed_unsigned_accelerated = integer_dot_product_accumulating_saturating_4_x_8_bit_packed_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_4_x_8_bit_packed_signed_accelerated = integer_dot_product_accumulating_saturating_4_x_8_bit_packed_signed_accelerated
        self.integer_dot_product_accumulating_saturating_4_x_8_bit_packed_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_4_x_8_bit_packed_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_16_bit_unsigned_accelerated = integer_dot_product_accumulating_saturating_16_bit_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_16_bit_signed_accelerated = integer_dot_product_accumulating_saturating_16_bit_signed_accelerated
        self.integer_dot_product_accumulating_saturating_16_bit_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_16_bit_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_32_bit_unsigned_accelerated = integer_dot_product_accumulating_saturating_32_bit_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_32_bit_signed_accelerated = integer_dot_product_accumulating_saturating_32_bit_signed_accelerated
        self.integer_dot_product_accumulating_saturating_32_bit_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_32_bit_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_64_bit_unsigned_accelerated = integer_dot_product_accumulating_saturating_64_bit_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_64_bit_signed_accelerated = integer_dot_product_accumulating_saturating_64_bit_signed_accelerated
        self.integer_dot_product_accumulating_saturating_64_bit_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_64_bit_mixed_signedness_accelerated
        self.storage_texel_buffer_offset_alignment_bytes = storage_texel_buffer_offset_alignment_bytes
        self.storage_texel_buffer_offset_single_texel_alignment = storage_texel_buffer_offset_single_texel_alignment
        self.uniform_texel_buffer_offset_alignment_bytes = uniform_texel_buffer_offset_alignment_bytes
        self.uniform_texel_buffer_offset_single_texel_alignment = uniform_texel_buffer_offset_single_texel_alignment
        self.max_buffer_size = max_buffer_size


struct PhysicalDeviceVulkan14Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var global_priority_query: Bool32
    var shader_subgroup_rotate: Bool32
    var shader_subgroup_rotate_clustered: Bool32
    var shader_float_controls_2: Bool32
    var shader_expect_assume: Bool32
    var rectangular_lines: Bool32
    var bresenham_lines: Bool32
    var smooth_lines: Bool32
    var stippled_rectangular_lines: Bool32
    var stippled_bresenham_lines: Bool32
    var stippled_smooth_lines: Bool32
    var vertex_attribute_instance_rate_divisor: Bool32
    var vertex_attribute_instance_rate_zero_divisor: Bool32
    var index_type_uint_8: Bool32
    var dynamic_rendering_local_read: Bool32
    var maintenance_5: Bool32
    var maintenance_6: Bool32
    var pipeline_protected_access: Bool32
    var pipeline_robustness: Bool32
    var host_image_copy: Bool32
    var push_descriptor: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        global_priority_query: Bool32 = zero_init[Bool32](),
        shader_subgroup_rotate: Bool32 = zero_init[Bool32](),
        shader_subgroup_rotate_clustered: Bool32 = zero_init[Bool32](),
        shader_float_controls_2: Bool32 = zero_init[Bool32](),
        shader_expect_assume: Bool32 = zero_init[Bool32](),
        rectangular_lines: Bool32 = zero_init[Bool32](),
        bresenham_lines: Bool32 = zero_init[Bool32](),
        smooth_lines: Bool32 = zero_init[Bool32](),
        stippled_rectangular_lines: Bool32 = zero_init[Bool32](),
        stippled_bresenham_lines: Bool32 = zero_init[Bool32](),
        stippled_smooth_lines: Bool32 = zero_init[Bool32](),
        vertex_attribute_instance_rate_divisor: Bool32 = zero_init[Bool32](),
        vertex_attribute_instance_rate_zero_divisor: Bool32 = zero_init[Bool32](),
        index_type_uint_8: Bool32 = zero_init[Bool32](),
        dynamic_rendering_local_read: Bool32 = zero_init[Bool32](),
        maintenance_5: Bool32 = zero_init[Bool32](),
        maintenance_6: Bool32 = zero_init[Bool32](),
        pipeline_protected_access: Bool32 = zero_init[Bool32](),
        pipeline_robustness: Bool32 = zero_init[Bool32](),
        host_image_copy: Bool32 = zero_init[Bool32](),
        push_descriptor: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_1_4_FEATURES
        self.p_next = p_next
        self.global_priority_query = global_priority_query
        self.shader_subgroup_rotate = shader_subgroup_rotate
        self.shader_subgroup_rotate_clustered = shader_subgroup_rotate_clustered
        self.shader_float_controls_2 = shader_float_controls_2
        self.shader_expect_assume = shader_expect_assume
        self.rectangular_lines = rectangular_lines
        self.bresenham_lines = bresenham_lines
        self.smooth_lines = smooth_lines
        self.stippled_rectangular_lines = stippled_rectangular_lines
        self.stippled_bresenham_lines = stippled_bresenham_lines
        self.stippled_smooth_lines = stippled_smooth_lines
        self.vertex_attribute_instance_rate_divisor = vertex_attribute_instance_rate_divisor
        self.vertex_attribute_instance_rate_zero_divisor = vertex_attribute_instance_rate_zero_divisor
        self.index_type_uint_8 = index_type_uint_8
        self.dynamic_rendering_local_read = dynamic_rendering_local_read
        self.maintenance_5 = maintenance_5
        self.maintenance_6 = maintenance_6
        self.pipeline_protected_access = pipeline_protected_access
        self.pipeline_robustness = pipeline_robustness
        self.host_image_copy = host_image_copy
        self.push_descriptor = push_descriptor


struct PhysicalDeviceVulkan14Properties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var line_sub_pixel_precision_bits: UInt32
    var max_vertex_attrib_divisor: UInt32
    var supports_non_zero_first_instance: Bool32
    var max_push_descriptors: UInt32
    var dynamic_rendering_local_read_depth_stencil_attachments: Bool32
    var dynamic_rendering_local_read_multisampled_attachments: Bool32
    var early_fragment_multisample_coverage_after_sample_counting: Bool32
    var early_fragment_sample_mask_test_before_sample_counting: Bool32
    var depth_stencil_swizzle_one_support: Bool32
    var polygon_mode_point_size: Bool32
    var non_strict_single_pixel_wide_lines_use_parallelogram: Bool32
    var non_strict_wide_lines_use_parallelogram: Bool32
    var block_texel_view_compatible_multiple_layers: Bool32
    var max_combined_image_sampler_descriptor_count: UInt32
    var fragment_shading_rate_clamp_combiner_inputs: Bool32
    var default_robustness_storage_buffers: PipelineRobustnessBufferBehavior
    var default_robustness_uniform_buffers: PipelineRobustnessBufferBehavior
    var default_robustness_vertex_inputs: PipelineRobustnessBufferBehavior
    var default_robustness_images: PipelineRobustnessImageBehavior
    var copy_src_layout_count: UInt32
    var p_copy_src_layouts: Ptr[ImageLayout]
    var copy_dst_layout_count: UInt32
    var p_copy_dst_layouts: Ptr[ImageLayout]
    var optimal_tiling_layout_uuid: InlineArray[UInt8, Int(UUID_SIZE)]
    var identical_memory_type_requirements: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        line_sub_pixel_precision_bits: UInt32 = zero_init[UInt32](),
        max_vertex_attrib_divisor: UInt32 = zero_init[UInt32](),
        supports_non_zero_first_instance: Bool32 = zero_init[Bool32](),
        max_push_descriptors: UInt32 = zero_init[UInt32](),
        dynamic_rendering_local_read_depth_stencil_attachments: Bool32 = zero_init[Bool32](),
        dynamic_rendering_local_read_multisampled_attachments: Bool32 = zero_init[Bool32](),
        early_fragment_multisample_coverage_after_sample_counting: Bool32 = zero_init[Bool32](),
        early_fragment_sample_mask_test_before_sample_counting: Bool32 = zero_init[Bool32](),
        depth_stencil_swizzle_one_support: Bool32 = zero_init[Bool32](),
        polygon_mode_point_size: Bool32 = zero_init[Bool32](),
        non_strict_single_pixel_wide_lines_use_parallelogram: Bool32 = zero_init[Bool32](),
        non_strict_wide_lines_use_parallelogram: Bool32 = zero_init[Bool32](),
        block_texel_view_compatible_multiple_layers: Bool32 = zero_init[Bool32](),
        max_combined_image_sampler_descriptor_count: UInt32 = zero_init[UInt32](),
        fragment_shading_rate_clamp_combiner_inputs: Bool32 = zero_init[Bool32](),
        default_robustness_storage_buffers: PipelineRobustnessBufferBehavior = zero_init[PipelineRobustnessBufferBehavior](),
        default_robustness_uniform_buffers: PipelineRobustnessBufferBehavior = zero_init[PipelineRobustnessBufferBehavior](),
        default_robustness_vertex_inputs: PipelineRobustnessBufferBehavior = zero_init[PipelineRobustnessBufferBehavior](),
        default_robustness_images: PipelineRobustnessImageBehavior = zero_init[PipelineRobustnessImageBehavior](),
        copy_src_layout_count: UInt32 = zero_init[UInt32](),
        p_copy_src_layouts: Ptr[ImageLayout] = zero_init[Ptr[ImageLayout]](),
        copy_dst_layout_count: UInt32 = zero_init[UInt32](),
        p_copy_dst_layouts: Ptr[ImageLayout] = zero_init[Ptr[ImageLayout]](),
        optimal_tiling_layout_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        identical_memory_type_requirements: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_1_4_PROPERTIES
        self.p_next = p_next
        self.line_sub_pixel_precision_bits = line_sub_pixel_precision_bits
        self.max_vertex_attrib_divisor = max_vertex_attrib_divisor
        self.supports_non_zero_first_instance = supports_non_zero_first_instance
        self.max_push_descriptors = max_push_descriptors
        self.dynamic_rendering_local_read_depth_stencil_attachments = dynamic_rendering_local_read_depth_stencil_attachments
        self.dynamic_rendering_local_read_multisampled_attachments = dynamic_rendering_local_read_multisampled_attachments
        self.early_fragment_multisample_coverage_after_sample_counting = early_fragment_multisample_coverage_after_sample_counting
        self.early_fragment_sample_mask_test_before_sample_counting = early_fragment_sample_mask_test_before_sample_counting
        self.depth_stencil_swizzle_one_support = depth_stencil_swizzle_one_support
        self.polygon_mode_point_size = polygon_mode_point_size
        self.non_strict_single_pixel_wide_lines_use_parallelogram = non_strict_single_pixel_wide_lines_use_parallelogram
        self.non_strict_wide_lines_use_parallelogram = non_strict_wide_lines_use_parallelogram
        self.block_texel_view_compatible_multiple_layers = block_texel_view_compatible_multiple_layers
        self.max_combined_image_sampler_descriptor_count = max_combined_image_sampler_descriptor_count
        self.fragment_shading_rate_clamp_combiner_inputs = fragment_shading_rate_clamp_combiner_inputs
        self.default_robustness_storage_buffers = default_robustness_storage_buffers
        self.default_robustness_uniform_buffers = default_robustness_uniform_buffers
        self.default_robustness_vertex_inputs = default_robustness_vertex_inputs
        self.default_robustness_images = default_robustness_images
        self.copy_src_layout_count = copy_src_layout_count
        self.p_copy_src_layouts = p_copy_src_layouts
        self.copy_dst_layout_count = copy_dst_layout_count
        self.p_copy_dst_layouts = p_copy_dst_layouts
        self.optimal_tiling_layout_uuid = optimal_tiling_layout_uuid
        self.identical_memory_type_requirements = identical_memory_type_requirements


struct PipelineCompilerControlCreateInfoAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var compiler_control_flags: PipelineCompilerControlFlagsAMD

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        compiler_control_flags: PipelineCompilerControlFlagsAMD = zero_init[PipelineCompilerControlFlagsAMD](),
    ):
        self.s_type = StructureType.PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD
        self.p_next = p_next
        self.compiler_control_flags = compiler_control_flags


struct PhysicalDeviceCoherentMemoryFeaturesAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_coherent_memory: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_coherent_memory: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD
        self.p_next = p_next
        self.device_coherent_memory = device_coherent_memory


struct FaultData(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fault_level: FaultLevel
    var fault_type: FaultType

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fault_level: FaultLevel = zero_init[FaultLevel](),
        fault_type: FaultType = zero_init[FaultType](),
    ):
        self.s_type = StructureType.FAULT_DATA
        self.p_next = p_next
        self.fault_level = fault_level
        self.fault_type = fault_type


struct FaultCallbackInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fault_count: UInt32
    var p_faults: Ptr[FaultData]
    var pfn_fault_callback: PFN_vkFaultCallbackFunction

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fault_count: UInt32 = zero_init[UInt32](),
        p_faults: Ptr[FaultData] = zero_init[Ptr[FaultData]](),
        pfn_fault_callback: PFN_vkFaultCallbackFunction = zero_init[PFN_vkFaultCallbackFunction](),
    ):
        self.s_type = StructureType.FAULT_CALLBACK_INFO
        self.p_next = p_next
        self.fault_count = fault_count
        self.p_faults = p_faults
        self.pfn_fault_callback = pfn_fault_callback


struct PhysicalDeviceToolProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var name: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]
    var version: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]
    var purposes: ToolPurposeFlags
    var description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var layer: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        name: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]](),
        version: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]](),
        purposes: ToolPurposeFlags = zero_init[ToolPurposeFlags](),
        description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        layer: InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_EXTENSION_NAME_SIZE)]](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TOOL_PROPERTIES
        self.p_next = p_next
        self.name = name
        self.version = version
        self.purposes = purposes
        self.description = description
        self.layer = layer

    fn name_slice(self) -> StringSlice[__origin_of(self.name)]:
        return StringSlice[__origin_of(self.name)](unsafe_from_utf8_ptr = self.name.unsafe_ptr())

    fn version_slice(self) -> StringSlice[__origin_of(self.version)]:
        return StringSlice[__origin_of(self.version)](unsafe_from_utf8_ptr = self.version.unsafe_ptr())

    fn description_slice(self) -> StringSlice[__origin_of(self.description)]:
        return StringSlice[__origin_of(self.description)](unsafe_from_utf8_ptr = self.description.unsafe_ptr())

    fn layer_slice(self) -> StringSlice[__origin_of(self.layer)]:
        return StringSlice[__origin_of(self.layer)](unsafe_from_utf8_ptr = self.layer.unsafe_ptr())


struct SamplerCustomBorderColorCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var custom_border_color: ClearColorValue
    var format: Format

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        custom_border_color: ClearColorValue = zero_init[ClearColorValue](),
        format: Format = zero_init[Format](),
    ):
        self.s_type = StructureType.SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT
        self.p_next = p_next
        self.custom_border_color = custom_border_color
        self.format = format


struct PhysicalDeviceCustomBorderColorPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_custom_border_color_samplers: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_custom_border_color_samplers: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT
        self.p_next = p_next
        self.max_custom_border_color_samplers = max_custom_border_color_samplers


struct PhysicalDeviceCustomBorderColorFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var custom_border_colors: Bool32
    var custom_border_color_without_format: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        custom_border_colors: Bool32 = zero_init[Bool32](),
        custom_border_color_without_format: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT
        self.p_next = p_next
        self.custom_border_colors = custom_border_colors
        self.custom_border_color_without_format = custom_border_color_without_format


struct SamplerBorderColorComponentMappingCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var components: ComponentMapping
    var srgb: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        components: ComponentMapping = zero_init[ComponentMapping](),
        srgb: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT
        self.p_next = p_next
        self.components = components
        self.srgb = srgb


struct PhysicalDeviceBorderColorSwizzleFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var border_color_swizzle: Bool32
    var border_color_swizzle_from_image: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        border_color_swizzle: Bool32 = zero_init[Bool32](),
        border_color_swizzle_from_image: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT
        self.p_next = p_next
        self.border_color_swizzle = border_color_swizzle
        self.border_color_swizzle_from_image = border_color_swizzle_from_image


struct AccelerationStructureGeometryTrianglesDataKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_format: Format
    var vertex_data: DeviceOrHostAddressConstKHR
    var vertex_stride: DeviceSize
    var max_vertex: UInt32
    var index_type: IndexType
    var index_data: DeviceOrHostAddressConstKHR
    var transform_data: DeviceOrHostAddressConstKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_format: Format = zero_init[Format](),
        vertex_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        vertex_stride: DeviceSize = zero_init[DeviceSize](),
        max_vertex: UInt32 = zero_init[UInt32](),
        index_type: IndexType = zero_init[IndexType](),
        index_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        transform_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR
        self.p_next = p_next
        self.vertex_format = vertex_format
        self.vertex_data = vertex_data
        self.vertex_stride = vertex_stride
        self.max_vertex = max_vertex
        self.index_type = index_type
        self.index_data = index_data
        self.transform_data = transform_data


struct AccelerationStructureGeometryAabbsDataKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var data: DeviceOrHostAddressConstKHR
    var stride: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        stride: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR
        self.p_next = p_next
        self.data = data
        self.stride = stride


struct AccelerationStructureGeometryInstancesDataKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var array_of_pointers: Bool32
    var data: DeviceOrHostAddressConstKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        array_of_pointers: Bool32 = zero_init[Bool32](),
        data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR
        self.p_next = p_next
        self.array_of_pointers = array_of_pointers
        self.data = data


struct AccelerationStructureGeometryLinearSweptSpheresDataNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_format: Format
    var vertex_data: DeviceOrHostAddressConstKHR
    var vertex_stride: DeviceSize
    var radius_format: Format
    var radius_data: DeviceOrHostAddressConstKHR
    var radius_stride: DeviceSize
    var index_type: IndexType
    var index_data: DeviceOrHostAddressConstKHR
    var index_stride: DeviceSize
    var indexing_mode: RayTracingLssIndexingModeNV
    var end_caps_mode: RayTracingLssPrimitiveEndCapsModeNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_format: Format = zero_init[Format](),
        vertex_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        vertex_stride: DeviceSize = zero_init[DeviceSize](),
        radius_format: Format = zero_init[Format](),
        radius_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        radius_stride: DeviceSize = zero_init[DeviceSize](),
        index_type: IndexType = zero_init[IndexType](),
        index_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        index_stride: DeviceSize = zero_init[DeviceSize](),
        indexing_mode: RayTracingLssIndexingModeNV = zero_init[RayTracingLssIndexingModeNV](),
        end_caps_mode: RayTracingLssPrimitiveEndCapsModeNV = zero_init[RayTracingLssPrimitiveEndCapsModeNV](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_LINEAR_SWEPT_SPHERES_DATA_NV
        self.p_next = p_next
        self.vertex_format = vertex_format
        self.vertex_data = vertex_data
        self.vertex_stride = vertex_stride
        self.radius_format = radius_format
        self.radius_data = radius_data
        self.radius_stride = radius_stride
        self.index_type = index_type
        self.index_data = index_data
        self.index_stride = index_stride
        self.indexing_mode = indexing_mode
        self.end_caps_mode = end_caps_mode


struct AccelerationStructureGeometrySpheresDataNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_format: Format
    var vertex_data: DeviceOrHostAddressConstKHR
    var vertex_stride: DeviceSize
    var radius_format: Format
    var radius_data: DeviceOrHostAddressConstKHR
    var radius_stride: DeviceSize
    var index_type: IndexType
    var index_data: DeviceOrHostAddressConstKHR
    var index_stride: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_format: Format = zero_init[Format](),
        vertex_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        vertex_stride: DeviceSize = zero_init[DeviceSize](),
        radius_format: Format = zero_init[Format](),
        radius_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        radius_stride: DeviceSize = zero_init[DeviceSize](),
        index_type: IndexType = zero_init[IndexType](),
        index_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        index_stride: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_SPHERES_DATA_NV
        self.p_next = p_next
        self.vertex_format = vertex_format
        self.vertex_data = vertex_data
        self.vertex_stride = vertex_stride
        self.radius_format = radius_format
        self.radius_data = radius_data
        self.radius_stride = radius_stride
        self.index_type = index_type
        self.index_data = index_data
        self.index_stride = index_stride


struct AccelerationStructureGeometryKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var geometry_type: GeometryTypeKHR
    var geometry: AccelerationStructureGeometryDataKHR
    var flags: GeometryFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        geometry_type: GeometryTypeKHR = zero_init[GeometryTypeKHR](),
        geometry: AccelerationStructureGeometryDataKHR = zero_init[AccelerationStructureGeometryDataKHR](),
        flags: GeometryFlagsKHR = zero_init[GeometryFlagsKHR](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_KHR
        self.p_next = p_next
        self.geometry_type = geometry_type
        self.geometry = geometry
        self.flags = flags


struct AccelerationStructureBuildGeometryInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: AccelerationStructureTypeKHR
    var flags: BuildAccelerationStructureFlagsKHR
    var mode: BuildAccelerationStructureModeKHR
    var src_acceleration_structure: AccelerationStructureKHR
    var dst_acceleration_structure: AccelerationStructureKHR
    var geometry_count: UInt32
    var p_geometries: Ptr[AccelerationStructureGeometryKHR]
    var pp_geometries: Ptr[Ptr[AccelerationStructureGeometryKHR]]
    var scratch_data: DeviceOrHostAddressKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: AccelerationStructureTypeKHR = zero_init[AccelerationStructureTypeKHR](),
        flags: BuildAccelerationStructureFlagsKHR = zero_init[BuildAccelerationStructureFlagsKHR](),
        mode: BuildAccelerationStructureModeKHR = zero_init[BuildAccelerationStructureModeKHR](),
        src_acceleration_structure: AccelerationStructureKHR = zero_init[AccelerationStructureKHR](),
        dst_acceleration_structure: AccelerationStructureKHR = zero_init[AccelerationStructureKHR](),
        geometry_count: UInt32 = zero_init[UInt32](),
        p_geometries: Ptr[AccelerationStructureGeometryKHR] = zero_init[Ptr[AccelerationStructureGeometryKHR]](),
        pp_geometries: Ptr[Ptr[AccelerationStructureGeometryKHR]] = zero_init[Ptr[Ptr[AccelerationStructureGeometryKHR]]](),
        scratch_data: DeviceOrHostAddressKHR = zero_init[DeviceOrHostAddressKHR](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR
        self.p_next = p_next
        self.type = type
        self.flags = flags
        self.mode = mode
        self.src_acceleration_structure = src_acceleration_structure
        self.dst_acceleration_structure = dst_acceleration_structure
        self.geometry_count = geometry_count
        self.p_geometries = p_geometries
        self.pp_geometries = pp_geometries
        self.scratch_data = scratch_data


struct AccelerationStructureBuildRangeInfoKHR(ImplicitlyCopyable, Movable):
    var primitive_count: UInt32
    var primitive_offset: UInt32
    var first_vertex: UInt32
    var transform_offset: UInt32

    fn __init__(
        out self,
        primitive_count: UInt32 = zero_init[UInt32](),
        primitive_offset: UInt32 = zero_init[UInt32](),
        first_vertex: UInt32 = zero_init[UInt32](),
        transform_offset: UInt32 = zero_init[UInt32](),
    ):
        self.primitive_count = primitive_count
        self.primitive_offset = primitive_offset
        self.first_vertex = first_vertex
        self.transform_offset = transform_offset


struct AccelerationStructureCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var create_flags: AccelerationStructureCreateFlagsKHR
    var buffer: Buffer
    var offset: DeviceSize
    var size: DeviceSize
    var type: AccelerationStructureTypeKHR
    var device_address: DeviceAddress

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        create_flags: AccelerationStructureCreateFlagsKHR = zero_init[AccelerationStructureCreateFlagsKHR](),
        buffer: Buffer = zero_init[Buffer](),
        offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
        type: AccelerationStructureTypeKHR = zero_init[AccelerationStructureTypeKHR](),
        device_address: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_CREATE_INFO_KHR
        self.p_next = p_next
        self.create_flags = create_flags
        self.buffer = buffer
        self.offset = offset
        self.size = size
        self.type = type
        self.device_address = device_address


struct AabbPositionsKHR(ImplicitlyCopyable, Movable):
    var min_x: Float32
    var min_y: Float32
    var min_z: Float32
    var max_x: Float32
    var max_y: Float32
    var max_z: Float32

    fn __init__(
        out self,
        min_x: Float32 = zero_init[Float32](),
        min_y: Float32 = zero_init[Float32](),
        min_z: Float32 = zero_init[Float32](),
        max_x: Float32 = zero_init[Float32](),
        max_y: Float32 = zero_init[Float32](),
        max_z: Float32 = zero_init[Float32](),
    ):
        self.min_x = min_x
        self.min_y = min_y
        self.min_z = min_z
        self.max_x = max_x
        self.max_y = max_y
        self.max_z = max_z


struct TransformMatrixKHR(ImplicitlyCopyable, Movable):
    var matrix: InlineArray[Float32, Int(3)]

    fn __init__(
        out self,
        matrix: InlineArray[Float32, Int(3)] = zero_init[InlineArray[Float32, Int(3)]](),
    ):
        self.matrix = matrix


struct AccelerationStructureInstanceKHR(ImplicitlyCopyable, Movable):
    var transform: TransformMatrixKHR
    var instance_custom_index: UInt32
    var mask: UInt32
    var instance_shader_binding_table_record_offset: UInt32
    var flags: GeometryInstanceFlagsKHR
    var acceleration_structure_reference: UInt64

    fn __init__(
        out self,
        transform: TransformMatrixKHR = zero_init[TransformMatrixKHR](),
        instance_custom_index: UInt32 = zero_init[UInt32](),
        mask: UInt32 = zero_init[UInt32](),
        instance_shader_binding_table_record_offset: UInt32 = zero_init[UInt32](),
        flags: GeometryInstanceFlagsKHR = zero_init[GeometryInstanceFlagsKHR](),
        acceleration_structure_reference: UInt64 = zero_init[UInt64](),
    ):
        self.transform = transform
        self.instance_custom_index = instance_custom_index
        self.mask = mask
        self.instance_shader_binding_table_record_offset = instance_shader_binding_table_record_offset
        self.flags = flags
        self.acceleration_structure_reference = acceleration_structure_reference


struct AccelerationStructureDeviceAddressInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acceleration_structure: AccelerationStructureKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acceleration_structure: AccelerationStructureKHR = zero_init[AccelerationStructureKHR](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR
        self.p_next = p_next
        self.acceleration_structure = acceleration_structure


struct AccelerationStructureVersionInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_version_data: Ptr[UInt8]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_version_data: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_VERSION_INFO_KHR
        self.p_next = p_next
        self.p_version_data = p_version_data


struct CopyAccelerationStructureInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src: AccelerationStructureKHR
    var dst: AccelerationStructureKHR
    var mode: CopyAccelerationStructureModeKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src: AccelerationStructureKHR = zero_init[AccelerationStructureKHR](),
        dst: AccelerationStructureKHR = zero_init[AccelerationStructureKHR](),
        mode: CopyAccelerationStructureModeKHR = zero_init[CopyAccelerationStructureModeKHR](),
    ):
        self.s_type = StructureType.COPY_ACCELERATION_STRUCTURE_INFO_KHR
        self.p_next = p_next
        self.src = src
        self.dst = dst
        self.mode = mode


struct CopyAccelerationStructureToMemoryInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src: AccelerationStructureKHR
    var dst: DeviceOrHostAddressKHR
    var mode: CopyAccelerationStructureModeKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src: AccelerationStructureKHR = zero_init[AccelerationStructureKHR](),
        dst: DeviceOrHostAddressKHR = zero_init[DeviceOrHostAddressKHR](),
        mode: CopyAccelerationStructureModeKHR = zero_init[CopyAccelerationStructureModeKHR](),
    ):
        self.s_type = StructureType.COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR
        self.p_next = p_next
        self.src = src
        self.dst = dst
        self.mode = mode


struct CopyMemoryToAccelerationStructureInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src: DeviceOrHostAddressConstKHR
    var dst: AccelerationStructureKHR
    var mode: CopyAccelerationStructureModeKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        dst: AccelerationStructureKHR = zero_init[AccelerationStructureKHR](),
        mode: CopyAccelerationStructureModeKHR = zero_init[CopyAccelerationStructureModeKHR](),
    ):
        self.s_type = StructureType.COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR
        self.p_next = p_next
        self.src = src
        self.dst = dst
        self.mode = mode


struct RayTracingPipelineInterfaceCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_pipeline_ray_payload_size: UInt32
    var max_pipeline_ray_hit_attribute_size: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_pipeline_ray_payload_size: UInt32 = zero_init[UInt32](),
        max_pipeline_ray_hit_attribute_size: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR
        self.p_next = p_next
        self.max_pipeline_ray_payload_size = max_pipeline_ray_payload_size
        self.max_pipeline_ray_hit_attribute_size = max_pipeline_ray_hit_attribute_size


struct PipelineLibraryCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var library_count: UInt32
    var p_libraries: Ptr[Pipeline]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        library_count: UInt32 = zero_init[UInt32](),
        p_libraries: Ptr[Pipeline] = zero_init[Ptr[Pipeline]](),
    ):
        self.s_type = StructureType.PIPELINE_LIBRARY_CREATE_INFO_KHR
        self.p_next = p_next
        self.library_count = library_count
        self.p_libraries = p_libraries


struct RefreshObjectKHR(ImplicitlyCopyable, Movable):
    var object_type: ObjectType
    var object_handle: UInt64
    var flags: RefreshObjectFlagsKHR

    fn __init__(
        out self,
        object_type: ObjectType = zero_init[ObjectType](),
        object_handle: UInt64 = zero_init[UInt64](),
        flags: RefreshObjectFlagsKHR = zero_init[RefreshObjectFlagsKHR](),
    ):
        self.object_type = object_type
        self.object_handle = object_handle
        self.flags = flags


struct RefreshObjectListKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var object_count: UInt32
    var p_objects: Ptr[RefreshObjectKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        object_count: UInt32 = zero_init[UInt32](),
        p_objects: Ptr[RefreshObjectKHR] = zero_init[Ptr[RefreshObjectKHR]](),
    ):
        self.s_type = StructureType.REFRESH_OBJECT_LIST_KHR
        self.p_next = p_next
        self.object_count = object_count
        self.p_objects = p_objects


struct PhysicalDeviceExtendedDynamicStateFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var extended_dynamic_state: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        extended_dynamic_state: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT
        self.p_next = p_next
        self.extended_dynamic_state = extended_dynamic_state


struct PhysicalDeviceExtendedDynamicState2FeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var extended_dynamic_state_2: Bool32
    var extended_dynamic_state_2_logic_op: Bool32
    var extended_dynamic_state_2_patch_control_points: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        extended_dynamic_state_2: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_2_logic_op: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_2_patch_control_points: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT
        self.p_next = p_next
        self.extended_dynamic_state_2 = extended_dynamic_state_2
        self.extended_dynamic_state_2_logic_op = extended_dynamic_state_2_logic_op
        self.extended_dynamic_state_2_patch_control_points = extended_dynamic_state_2_patch_control_points


struct PhysicalDeviceExtendedDynamicState3FeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var extended_dynamic_state_3_tessellation_domain_origin: Bool32
    var extended_dynamic_state_3_depth_clamp_enable: Bool32
    var extended_dynamic_state_3_polygon_mode: Bool32
    var extended_dynamic_state_3_rasterization_samples: Bool32
    var extended_dynamic_state_3_sample_mask: Bool32
    var extended_dynamic_state_3_alpha_to_coverage_enable: Bool32
    var extended_dynamic_state_3_alpha_to_one_enable: Bool32
    var extended_dynamic_state_3_logic_op_enable: Bool32
    var extended_dynamic_state_3_color_blend_enable: Bool32
    var extended_dynamic_state_3_color_blend_equation: Bool32
    var extended_dynamic_state_3_color_write_mask: Bool32
    var extended_dynamic_state_3_rasterization_stream: Bool32
    var extended_dynamic_state_3_conservative_rasterization_mode: Bool32
    var extended_dynamic_state_3_extra_primitive_overestimation_size: Bool32
    var extended_dynamic_state_3_depth_clip_enable: Bool32
    var extended_dynamic_state_3_sample_locations_enable: Bool32
    var extended_dynamic_state_3_color_blend_advanced: Bool32
    var extended_dynamic_state_3_provoking_vertex_mode: Bool32
    var extended_dynamic_state_3_line_rasterization_mode: Bool32
    var extended_dynamic_state_3_line_stipple_enable: Bool32
    var extended_dynamic_state_3_depth_clip_negative_one_to_one: Bool32
    var extended_dynamic_state_3_viewport_w_scaling_enable: Bool32
    var extended_dynamic_state_3_viewport_swizzle: Bool32
    var extended_dynamic_state_3_coverage_to_color_enable: Bool32
    var extended_dynamic_state_3_coverage_to_color_location: Bool32
    var extended_dynamic_state_3_coverage_modulation_mode: Bool32
    var extended_dynamic_state_3_coverage_modulation_table_enable: Bool32
    var extended_dynamic_state_3_coverage_modulation_table: Bool32
    var extended_dynamic_state_3_coverage_reduction_mode: Bool32
    var extended_dynamic_state_3_representative_fragment_test_enable: Bool32
    var extended_dynamic_state_3_shading_rate_image_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        extended_dynamic_state_3_tessellation_domain_origin: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_depth_clamp_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_polygon_mode: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_rasterization_samples: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_sample_mask: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_alpha_to_coverage_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_alpha_to_one_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_logic_op_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_color_blend_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_color_blend_equation: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_color_write_mask: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_rasterization_stream: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_conservative_rasterization_mode: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_extra_primitive_overestimation_size: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_depth_clip_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_sample_locations_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_color_blend_advanced: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_provoking_vertex_mode: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_line_rasterization_mode: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_line_stipple_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_depth_clip_negative_one_to_one: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_viewport_w_scaling_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_viewport_swizzle: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_coverage_to_color_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_coverage_to_color_location: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_coverage_modulation_mode: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_coverage_modulation_table_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_coverage_modulation_table: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_coverage_reduction_mode: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_representative_fragment_test_enable: Bool32 = zero_init[Bool32](),
        extended_dynamic_state_3_shading_rate_image_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT
        self.p_next = p_next
        self.extended_dynamic_state_3_tessellation_domain_origin = extended_dynamic_state_3_tessellation_domain_origin
        self.extended_dynamic_state_3_depth_clamp_enable = extended_dynamic_state_3_depth_clamp_enable
        self.extended_dynamic_state_3_polygon_mode = extended_dynamic_state_3_polygon_mode
        self.extended_dynamic_state_3_rasterization_samples = extended_dynamic_state_3_rasterization_samples
        self.extended_dynamic_state_3_sample_mask = extended_dynamic_state_3_sample_mask
        self.extended_dynamic_state_3_alpha_to_coverage_enable = extended_dynamic_state_3_alpha_to_coverage_enable
        self.extended_dynamic_state_3_alpha_to_one_enable = extended_dynamic_state_3_alpha_to_one_enable
        self.extended_dynamic_state_3_logic_op_enable = extended_dynamic_state_3_logic_op_enable
        self.extended_dynamic_state_3_color_blend_enable = extended_dynamic_state_3_color_blend_enable
        self.extended_dynamic_state_3_color_blend_equation = extended_dynamic_state_3_color_blend_equation
        self.extended_dynamic_state_3_color_write_mask = extended_dynamic_state_3_color_write_mask
        self.extended_dynamic_state_3_rasterization_stream = extended_dynamic_state_3_rasterization_stream
        self.extended_dynamic_state_3_conservative_rasterization_mode = extended_dynamic_state_3_conservative_rasterization_mode
        self.extended_dynamic_state_3_extra_primitive_overestimation_size = extended_dynamic_state_3_extra_primitive_overestimation_size
        self.extended_dynamic_state_3_depth_clip_enable = extended_dynamic_state_3_depth_clip_enable
        self.extended_dynamic_state_3_sample_locations_enable = extended_dynamic_state_3_sample_locations_enable
        self.extended_dynamic_state_3_color_blend_advanced = extended_dynamic_state_3_color_blend_advanced
        self.extended_dynamic_state_3_provoking_vertex_mode = extended_dynamic_state_3_provoking_vertex_mode
        self.extended_dynamic_state_3_line_rasterization_mode = extended_dynamic_state_3_line_rasterization_mode
        self.extended_dynamic_state_3_line_stipple_enable = extended_dynamic_state_3_line_stipple_enable
        self.extended_dynamic_state_3_depth_clip_negative_one_to_one = extended_dynamic_state_3_depth_clip_negative_one_to_one
        self.extended_dynamic_state_3_viewport_w_scaling_enable = extended_dynamic_state_3_viewport_w_scaling_enable
        self.extended_dynamic_state_3_viewport_swizzle = extended_dynamic_state_3_viewport_swizzle
        self.extended_dynamic_state_3_coverage_to_color_enable = extended_dynamic_state_3_coverage_to_color_enable
        self.extended_dynamic_state_3_coverage_to_color_location = extended_dynamic_state_3_coverage_to_color_location
        self.extended_dynamic_state_3_coverage_modulation_mode = extended_dynamic_state_3_coverage_modulation_mode
        self.extended_dynamic_state_3_coverage_modulation_table_enable = extended_dynamic_state_3_coverage_modulation_table_enable
        self.extended_dynamic_state_3_coverage_modulation_table = extended_dynamic_state_3_coverage_modulation_table
        self.extended_dynamic_state_3_coverage_reduction_mode = extended_dynamic_state_3_coverage_reduction_mode
        self.extended_dynamic_state_3_representative_fragment_test_enable = extended_dynamic_state_3_representative_fragment_test_enable
        self.extended_dynamic_state_3_shading_rate_image_enable = extended_dynamic_state_3_shading_rate_image_enable


struct PhysicalDeviceExtendedDynamicState3PropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dynamic_primitive_topology_unrestricted: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dynamic_primitive_topology_unrestricted: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_PROPERTIES_EXT
        self.p_next = p_next
        self.dynamic_primitive_topology_unrestricted = dynamic_primitive_topology_unrestricted


struct ColorBlendEquationEXT(ImplicitlyCopyable, Movable):
    var src_color_blend_factor: BlendFactor
    var dst_color_blend_factor: BlendFactor
    var color_blend_op: BlendOp
    var src_alpha_blend_factor: BlendFactor
    var dst_alpha_blend_factor: BlendFactor
    var alpha_blend_op: BlendOp

    fn __init__(
        out self,
        src_color_blend_factor: BlendFactor = zero_init[BlendFactor](),
        dst_color_blend_factor: BlendFactor = zero_init[BlendFactor](),
        color_blend_op: BlendOp = zero_init[BlendOp](),
        src_alpha_blend_factor: BlendFactor = zero_init[BlendFactor](),
        dst_alpha_blend_factor: BlendFactor = zero_init[BlendFactor](),
        alpha_blend_op: BlendOp = zero_init[BlendOp](),
    ):
        self.src_color_blend_factor = src_color_blend_factor
        self.dst_color_blend_factor = dst_color_blend_factor
        self.color_blend_op = color_blend_op
        self.src_alpha_blend_factor = src_alpha_blend_factor
        self.dst_alpha_blend_factor = dst_alpha_blend_factor
        self.alpha_blend_op = alpha_blend_op


struct ColorBlendAdvancedEXT(ImplicitlyCopyable, Movable):
    var advanced_blend_op: BlendOp
    var src_premultiplied: Bool32
    var dst_premultiplied: Bool32
    var blend_overlap: BlendOverlapEXT
    var clamp_results: Bool32

    fn __init__(
        out self,
        advanced_blend_op: BlendOp = zero_init[BlendOp](),
        src_premultiplied: Bool32 = zero_init[Bool32](),
        dst_premultiplied: Bool32 = zero_init[Bool32](),
        blend_overlap: BlendOverlapEXT = zero_init[BlendOverlapEXT](),
        clamp_results: Bool32 = zero_init[Bool32](),
    ):
        self.advanced_blend_op = advanced_blend_op
        self.src_premultiplied = src_premultiplied
        self.dst_premultiplied = dst_premultiplied
        self.blend_overlap = blend_overlap
        self.clamp_results = clamp_results


struct RenderPassTransformBeginInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var transform: SurfaceTransformFlagBitsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        transform: SurfaceTransformFlagBitsKHR = zero_init[SurfaceTransformFlagBitsKHR](),
    ):
        self.s_type = StructureType.RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM
        self.p_next = p_next
        self.transform = transform


struct CopyCommandTransformInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var transform: SurfaceTransformFlagBitsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        transform: SurfaceTransformFlagBitsKHR = zero_init[SurfaceTransformFlagBitsKHR](),
    ):
        self.s_type = StructureType.COPY_COMMAND_TRANSFORM_INFO_QCOM
        self.p_next = p_next
        self.transform = transform


struct CommandBufferInheritanceRenderPassTransformInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var transform: SurfaceTransformFlagBitsKHR
    var render_area: Rect2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        transform: SurfaceTransformFlagBitsKHR = zero_init[SurfaceTransformFlagBitsKHR](),
        render_area: Rect2D = zero_init[Rect2D](),
    ):
        self.s_type = StructureType.COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM
        self.p_next = p_next
        self.transform = transform
        self.render_area = render_area


struct PhysicalDevicePartitionedAccelerationStructureFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var partitioned_acceleration_structure: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        partitioned_acceleration_structure: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV
        self.p_next = p_next
        self.partitioned_acceleration_structure = partitioned_acceleration_structure


struct PhysicalDevicePartitionedAccelerationStructurePropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_partition_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_partition_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_PROPERTIES_NV
        self.p_next = p_next
        self.max_partition_count = max_partition_count


struct BuildPartitionedAccelerationStructureIndirectCommandNV(ImplicitlyCopyable, Movable):
    var op_type: PartitionedAccelerationStructureOpTypeNV
    var arg_count: UInt32
    var arg_data: StridedDeviceAddressNV

    fn __init__(
        out self,
        op_type: PartitionedAccelerationStructureOpTypeNV = zero_init[PartitionedAccelerationStructureOpTypeNV](),
        arg_count: UInt32 = zero_init[UInt32](),
        arg_data: StridedDeviceAddressNV = zero_init[StridedDeviceAddressNV](),
    ):
        self.op_type = op_type
        self.arg_count = arg_count
        self.arg_data = arg_data


struct PartitionedAccelerationStructureFlagsNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var enable_partition_translation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        enable_partition_translation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PARTITIONED_ACCELERATION_STRUCTURE_FLAGS_NV
        self.p_next = p_next
        self.enable_partition_translation = enable_partition_translation


struct PartitionedAccelerationStructureWriteInstanceDataNV(ImplicitlyCopyable, Movable):
    var transform: TransformMatrixKHR
    var explicit_aabb: InlineArray[Float32, Int(6)]
    var instance_id: UInt32
    var instance_mask: UInt32
    var instance_contribution_to_hit_group_index: UInt32
    var instance_flags: PartitionedAccelerationStructureInstanceFlagsNV
    var instance_index: UInt32
    var partition_index: UInt32
    var acceleration_structure: DeviceAddress

    fn __init__(
        out self,
        transform: TransformMatrixKHR = zero_init[TransformMatrixKHR](),
        explicit_aabb: InlineArray[Float32, Int(6)] = zero_init[InlineArray[Float32, Int(6)]](),
        instance_id: UInt32 = zero_init[UInt32](),
        instance_mask: UInt32 = zero_init[UInt32](),
        instance_contribution_to_hit_group_index: UInt32 = zero_init[UInt32](),
        instance_flags: PartitionedAccelerationStructureInstanceFlagsNV = zero_init[PartitionedAccelerationStructureInstanceFlagsNV](),
        instance_index: UInt32 = zero_init[UInt32](),
        partition_index: UInt32 = zero_init[UInt32](),
        acceleration_structure: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.transform = transform
        self.explicit_aabb = explicit_aabb
        self.instance_id = instance_id
        self.instance_mask = instance_mask
        self.instance_contribution_to_hit_group_index = instance_contribution_to_hit_group_index
        self.instance_flags = instance_flags
        self.instance_index = instance_index
        self.partition_index = partition_index
        self.acceleration_structure = acceleration_structure


struct PartitionedAccelerationStructureUpdateInstanceDataNV(ImplicitlyCopyable, Movable):
    var instance_index: UInt32
    var instance_contribution_to_hit_group_index: UInt32
    var acceleration_structure: DeviceAddress

    fn __init__(
        out self,
        instance_index: UInt32 = zero_init[UInt32](),
        instance_contribution_to_hit_group_index: UInt32 = zero_init[UInt32](),
        acceleration_structure: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.instance_index = instance_index
        self.instance_contribution_to_hit_group_index = instance_contribution_to_hit_group_index
        self.acceleration_structure = acceleration_structure


struct PartitionedAccelerationStructureWritePartitionTranslationDataNV(ImplicitlyCopyable, Movable):
    var partition_index: UInt32
    var partition_translation: InlineArray[Float32, Int(3)]

    fn __init__(
        out self,
        partition_index: UInt32 = zero_init[UInt32](),
        partition_translation: InlineArray[Float32, Int(3)] = zero_init[InlineArray[Float32, Int(3)]](),
    ):
        self.partition_index = partition_index
        self.partition_translation = partition_translation


struct WriteDescriptorSetPartitionedAccelerationStructureNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acceleration_structure_count: UInt32
    var p_acceleration_structures: Ptr[DeviceAddress]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acceleration_structure_count: UInt32 = zero_init[UInt32](),
        p_acceleration_structures: Ptr[DeviceAddress] = zero_init[Ptr[DeviceAddress]](),
    ):
        self.s_type = StructureType.WRITE_DESCRIPTOR_SET_PARTITIONED_ACCELERATION_STRUCTURE_NV
        self.p_next = p_next
        self.acceleration_structure_count = acceleration_structure_count
        self.p_acceleration_structures = p_acceleration_structures


struct PartitionedAccelerationStructureInstancesInputNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: BuildAccelerationStructureFlagsKHR
    var instance_count: UInt32
    var max_instance_per_partition_count: UInt32
    var partition_count: UInt32
    var max_instance_in_global_partition_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: BuildAccelerationStructureFlagsKHR = zero_init[BuildAccelerationStructureFlagsKHR](),
        instance_count: UInt32 = zero_init[UInt32](),
        max_instance_per_partition_count: UInt32 = zero_init[UInt32](),
        partition_count: UInt32 = zero_init[UInt32](),
        max_instance_in_global_partition_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PARTITIONED_ACCELERATION_STRUCTURE_INSTANCES_INPUT_NV
        self.p_next = p_next
        self.flags = flags
        self.instance_count = instance_count
        self.max_instance_per_partition_count = max_instance_per_partition_count
        self.partition_count = partition_count
        self.max_instance_in_global_partition_count = max_instance_in_global_partition_count


struct BuildPartitionedAccelerationStructureInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var input: PartitionedAccelerationStructureInstancesInputNV
    var src_acceleration_structure_data: DeviceAddress
    var dst_acceleration_structure_data: DeviceAddress
    var scratch_data: DeviceAddress
    var src_infos: DeviceAddress
    var src_infos_count: DeviceAddress

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        input: PartitionedAccelerationStructureInstancesInputNV = zero_init[PartitionedAccelerationStructureInstancesInputNV](),
        src_acceleration_structure_data: DeviceAddress = zero_init[DeviceAddress](),
        dst_acceleration_structure_data: DeviceAddress = zero_init[DeviceAddress](),
        scratch_data: DeviceAddress = zero_init[DeviceAddress](),
        src_infos: DeviceAddress = zero_init[DeviceAddress](),
        src_infos_count: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.s_type = StructureType.BUILD_PARTITIONED_ACCELERATION_STRUCTURE_INFO_NV
        self.p_next = p_next
        self.input = input
        self.src_acceleration_structure_data = src_acceleration_structure_data
        self.dst_acceleration_structure_data = dst_acceleration_structure_data
        self.scratch_data = scratch_data
        self.src_infos = src_infos
        self.src_infos_count = src_infos_count


struct PhysicalDeviceDiagnosticsConfigFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var diagnostics_config: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        diagnostics_config: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV
        self.p_next = p_next
        self.diagnostics_config = diagnostics_config


struct DeviceDiagnosticsConfigCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DeviceDiagnosticsConfigFlagsNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DeviceDiagnosticsConfigFlagsNV = zero_init[DeviceDiagnosticsConfigFlagsNV](),
    ):
        self.s_type = StructureType.DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV
        self.p_next = p_next
        self.flags = flags


struct PipelineOfflineCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_identifier: InlineArray[UInt8, Int(UUID_SIZE)]
    var match_control: PipelineMatchControl
    var pool_entry_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_identifier: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        match_control: PipelineMatchControl = zero_init[PipelineMatchControl](),
        pool_entry_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PIPELINE_OFFLINE_CREATE_INFO
        self.p_next = p_next
        self.pipeline_identifier = pipeline_identifier
        self.match_control = match_control
        self.pool_entry_size = pool_entry_size


struct PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_zero_initialize_workgroup_memory: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_zero_initialize_workgroup_memory: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES
        self.p_next = p_next
        self.shader_zero_initialize_workgroup_memory = shader_zero_initialize_workgroup_memory


struct PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_subgroup_uniform_control_flow: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_subgroup_uniform_control_flow: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR
        self.p_next = p_next
        self.shader_subgroup_uniform_control_flow = shader_subgroup_uniform_control_flow


struct PhysicalDeviceRobustness2FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var robust_buffer_access_2: Bool32
    var robust_image_access_2: Bool32
    var null_descriptor: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        robust_buffer_access_2: Bool32 = zero_init[Bool32](),
        robust_image_access_2: Bool32 = zero_init[Bool32](),
        null_descriptor: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_KHR
        self.p_next = p_next
        self.robust_buffer_access_2 = robust_buffer_access_2
        self.robust_image_access_2 = robust_image_access_2
        self.null_descriptor = null_descriptor


struct PhysicalDeviceRobustness2PropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var robust_storage_buffer_access_size_alignment: DeviceSize
    var robust_uniform_buffer_access_size_alignment: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        robust_storage_buffer_access_size_alignment: DeviceSize = zero_init[DeviceSize](),
        robust_uniform_buffer_access_size_alignment: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_KHR
        self.p_next = p_next
        self.robust_storage_buffer_access_size_alignment = robust_storage_buffer_access_size_alignment
        self.robust_uniform_buffer_access_size_alignment = robust_uniform_buffer_access_size_alignment


struct PhysicalDeviceImageRobustnessFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var robust_image_access: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        robust_image_access: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES
        self.p_next = p_next
        self.robust_image_access = robust_image_access


struct PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var workgroup_memory_explicit_layout: Bool32
    var workgroup_memory_explicit_layout_scalar_block_layout: Bool32
    var workgroup_memory_explicit_layout_8_bit_access: Bool32
    var workgroup_memory_explicit_layout_16_bit_access: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        workgroup_memory_explicit_layout: Bool32 = zero_init[Bool32](),
        workgroup_memory_explicit_layout_scalar_block_layout: Bool32 = zero_init[Bool32](),
        workgroup_memory_explicit_layout_8_bit_access: Bool32 = zero_init[Bool32](),
        workgroup_memory_explicit_layout_16_bit_access: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR
        self.p_next = p_next
        self.workgroup_memory_explicit_layout = workgroup_memory_explicit_layout
        self.workgroup_memory_explicit_layout_scalar_block_layout = workgroup_memory_explicit_layout_scalar_block_layout
        self.workgroup_memory_explicit_layout_8_bit_access = workgroup_memory_explicit_layout_8_bit_access
        self.workgroup_memory_explicit_layout_16_bit_access = workgroup_memory_explicit_layout_16_bit_access


struct PhysicalDevicePortabilitySubsetFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var constant_alpha_color_blend_factors: Bool32
    var events: Bool32
    var image_view_format_reinterpretation: Bool32
    var image_view_format_swizzle: Bool32
    var image_view_2_d_on_3_d_image: Bool32
    var multisample_array_image: Bool32
    var mutable_comparison_samplers: Bool32
    var point_polygons: Bool32
    var sampler_mip_lod_bias: Bool32
    var separate_stencil_mask_ref: Bool32
    var shader_sample_rate_interpolation_functions: Bool32
    var tessellation_isolines: Bool32
    var tessellation_point_mode: Bool32
    var triangle_fans: Bool32
    var vertex_attribute_access_beyond_stride: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        constant_alpha_color_blend_factors: Bool32 = zero_init[Bool32](),
        events: Bool32 = zero_init[Bool32](),
        image_view_format_reinterpretation: Bool32 = zero_init[Bool32](),
        image_view_format_swizzle: Bool32 = zero_init[Bool32](),
        image_view_2_d_on_3_d_image: Bool32 = zero_init[Bool32](),
        multisample_array_image: Bool32 = zero_init[Bool32](),
        mutable_comparison_samplers: Bool32 = zero_init[Bool32](),
        point_polygons: Bool32 = zero_init[Bool32](),
        sampler_mip_lod_bias: Bool32 = zero_init[Bool32](),
        separate_stencil_mask_ref: Bool32 = zero_init[Bool32](),
        shader_sample_rate_interpolation_functions: Bool32 = zero_init[Bool32](),
        tessellation_isolines: Bool32 = zero_init[Bool32](),
        tessellation_point_mode: Bool32 = zero_init[Bool32](),
        triangle_fans: Bool32 = zero_init[Bool32](),
        vertex_attribute_access_beyond_stride: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR
        self.p_next = p_next
        self.constant_alpha_color_blend_factors = constant_alpha_color_blend_factors
        self.events = events
        self.image_view_format_reinterpretation = image_view_format_reinterpretation
        self.image_view_format_swizzle = image_view_format_swizzle
        self.image_view_2_d_on_3_d_image = image_view_2_d_on_3_d_image
        self.multisample_array_image = multisample_array_image
        self.mutable_comparison_samplers = mutable_comparison_samplers
        self.point_polygons = point_polygons
        self.sampler_mip_lod_bias = sampler_mip_lod_bias
        self.separate_stencil_mask_ref = separate_stencil_mask_ref
        self.shader_sample_rate_interpolation_functions = shader_sample_rate_interpolation_functions
        self.tessellation_isolines = tessellation_isolines
        self.tessellation_point_mode = tessellation_point_mode
        self.triangle_fans = triangle_fans
        self.vertex_attribute_access_beyond_stride = vertex_attribute_access_beyond_stride


struct PhysicalDevicePortabilitySubsetPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_vertex_input_binding_stride_alignment: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_vertex_input_binding_stride_alignment: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR
        self.p_next = p_next
        self.min_vertex_input_binding_stride_alignment = min_vertex_input_binding_stride_alignment


struct PhysicalDevice4444FormatsFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format_a4_r4_g4_b4: Bool32
    var format_a4_b4_g4_r4: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format_a4_r4_g4_b4: Bool32 = zero_init[Bool32](),
        format_a4_b4_g4_r4: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT
        self.p_next = p_next
        self.format_a4_r4_g4_b4 = format_a4_r4_g4_b4
        self.format_a4_b4_g4_r4 = format_a4_b4_g4_r4


struct PhysicalDeviceSubpassShadingFeaturesHUAWEI(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var subpass_shading: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        subpass_shading: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI
        self.p_next = p_next
        self.subpass_shading = subpass_shading


struct PhysicalDeviceClusterCullingShaderFeaturesHUAWEI(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var clusterculling_shader: Bool32
    var multiview_cluster_culling_shader: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        clusterculling_shader: Bool32 = zero_init[Bool32](),
        multiview_cluster_culling_shader: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI
        self.p_next = p_next
        self.clusterculling_shader = clusterculling_shader
        self.multiview_cluster_culling_shader = multiview_cluster_culling_shader


struct PhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cluster_shading_rate: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cluster_shading_rate: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI
        self.p_next = p_next
        self.cluster_shading_rate = cluster_shading_rate


struct BufferCopy2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_offset: DeviceSize
    var dst_offset: DeviceSize
    var size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_offset: DeviceSize = zero_init[DeviceSize](),
        dst_offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.BUFFER_COPY_2
        self.p_next = p_next
        self.src_offset = src_offset
        self.dst_offset = dst_offset
        self.size = size


struct ImageCopy2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_subresource: ImageSubresourceLayers
    var src_offset: Offset3D
    var dst_subresource: ImageSubresourceLayers
    var dst_offset: Offset3D
    var extent: Extent3D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        src_offset: Offset3D = zero_init[Offset3D](),
        dst_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        dst_offset: Offset3D = zero_init[Offset3D](),
        extent: Extent3D = zero_init[Extent3D](),
    ):
        self.s_type = StructureType.IMAGE_COPY_2
        self.p_next = p_next
        self.src_subresource = src_subresource
        self.src_offset = src_offset
        self.dst_subresource = dst_subresource
        self.dst_offset = dst_offset
        self.extent = extent


struct ImageBlit2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_subresource: ImageSubresourceLayers
    var src_offsets: InlineArray[Offset3D, Int(2)]
    var dst_subresource: ImageSubresourceLayers
    var dst_offsets: InlineArray[Offset3D, Int(2)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        src_offsets: InlineArray[Offset3D, Int(2)] = zero_init[InlineArray[Offset3D, Int(2)]](),
        dst_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        dst_offsets: InlineArray[Offset3D, Int(2)] = zero_init[InlineArray[Offset3D, Int(2)]](),
    ):
        self.s_type = StructureType.IMAGE_BLIT_2
        self.p_next = p_next
        self.src_subresource = src_subresource
        self.src_offsets = src_offsets
        self.dst_subresource = dst_subresource
        self.dst_offsets = dst_offsets


struct BufferImageCopy2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer_offset: DeviceSize
    var buffer_row_length: UInt32
    var buffer_image_height: UInt32
    var image_subresource: ImageSubresourceLayers
    var image_offset: Offset3D
    var image_extent: Extent3D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer_offset: DeviceSize = zero_init[DeviceSize](),
        buffer_row_length: UInt32 = zero_init[UInt32](),
        buffer_image_height: UInt32 = zero_init[UInt32](),
        image_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        image_offset: Offset3D = zero_init[Offset3D](),
        image_extent: Extent3D = zero_init[Extent3D](),
    ):
        self.s_type = StructureType.BUFFER_IMAGE_COPY_2
        self.p_next = p_next
        self.buffer_offset = buffer_offset
        self.buffer_row_length = buffer_row_length
        self.buffer_image_height = buffer_image_height
        self.image_subresource = image_subresource
        self.image_offset = image_offset
        self.image_extent = image_extent


struct ImageResolve2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_subresource: ImageSubresourceLayers
    var src_offset: Offset3D
    var dst_subresource: ImageSubresourceLayers
    var dst_offset: Offset3D
    var extent: Extent3D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        src_offset: Offset3D = zero_init[Offset3D](),
        dst_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        dst_offset: Offset3D = zero_init[Offset3D](),
        extent: Extent3D = zero_init[Extent3D](),
    ):
        self.s_type = StructureType.IMAGE_RESOLVE_2
        self.p_next = p_next
        self.src_subresource = src_subresource
        self.src_offset = src_offset
        self.dst_subresource = dst_subresource
        self.dst_offset = dst_offset
        self.extent = extent


struct CopyBufferInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_buffer: Buffer
    var dst_buffer: Buffer
    var region_count: UInt32
    var p_regions: Ptr[BufferCopy2]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_buffer: Buffer = zero_init[Buffer](),
        dst_buffer: Buffer = zero_init[Buffer](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[BufferCopy2] = zero_init[Ptr[BufferCopy2]](),
    ):
        self.s_type = StructureType.COPY_BUFFER_INFO_2
        self.p_next = p_next
        self.src_buffer = src_buffer
        self.dst_buffer = dst_buffer
        self.region_count = region_count
        self.p_regions = p_regions


struct CopyImageInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_image: Image
    var src_image_layout: ImageLayout
    var dst_image: Image
    var dst_image_layout: ImageLayout
    var region_count: UInt32
    var p_regions: Ptr[ImageCopy2]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_image: Image = zero_init[Image](),
        src_image_layout: ImageLayout = zero_init[ImageLayout](),
        dst_image: Image = zero_init[Image](),
        dst_image_layout: ImageLayout = zero_init[ImageLayout](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[ImageCopy2] = zero_init[Ptr[ImageCopy2]](),
    ):
        self.s_type = StructureType.COPY_IMAGE_INFO_2
        self.p_next = p_next
        self.src_image = src_image
        self.src_image_layout = src_image_layout
        self.dst_image = dst_image
        self.dst_image_layout = dst_image_layout
        self.region_count = region_count
        self.p_regions = p_regions


struct BlitImageInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_image: Image
    var src_image_layout: ImageLayout
    var dst_image: Image
    var dst_image_layout: ImageLayout
    var region_count: UInt32
    var p_regions: Ptr[ImageBlit2]
    var filter: Filter

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_image: Image = zero_init[Image](),
        src_image_layout: ImageLayout = zero_init[ImageLayout](),
        dst_image: Image = zero_init[Image](),
        dst_image_layout: ImageLayout = zero_init[ImageLayout](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[ImageBlit2] = zero_init[Ptr[ImageBlit2]](),
        filter: Filter = zero_init[Filter](),
    ):
        self.s_type = StructureType.BLIT_IMAGE_INFO_2
        self.p_next = p_next
        self.src_image = src_image
        self.src_image_layout = src_image_layout
        self.dst_image = dst_image
        self.dst_image_layout = dst_image_layout
        self.region_count = region_count
        self.p_regions = p_regions
        self.filter = filter


struct CopyBufferToImageInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_buffer: Buffer
    var dst_image: Image
    var dst_image_layout: ImageLayout
    var region_count: UInt32
    var p_regions: Ptr[BufferImageCopy2]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_buffer: Buffer = zero_init[Buffer](),
        dst_image: Image = zero_init[Image](),
        dst_image_layout: ImageLayout = zero_init[ImageLayout](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[BufferImageCopy2] = zero_init[Ptr[BufferImageCopy2]](),
    ):
        self.s_type = StructureType.COPY_BUFFER_TO_IMAGE_INFO_2
        self.p_next = p_next
        self.src_buffer = src_buffer
        self.dst_image = dst_image
        self.dst_image_layout = dst_image_layout
        self.region_count = region_count
        self.p_regions = p_regions


struct CopyImageToBufferInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_image: Image
    var src_image_layout: ImageLayout
    var dst_buffer: Buffer
    var region_count: UInt32
    var p_regions: Ptr[BufferImageCopy2]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_image: Image = zero_init[Image](),
        src_image_layout: ImageLayout = zero_init[ImageLayout](),
        dst_buffer: Buffer = zero_init[Buffer](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[BufferImageCopy2] = zero_init[Ptr[BufferImageCopy2]](),
    ):
        self.s_type = StructureType.COPY_IMAGE_TO_BUFFER_INFO_2
        self.p_next = p_next
        self.src_image = src_image
        self.src_image_layout = src_image_layout
        self.dst_buffer = dst_buffer
        self.region_count = region_count
        self.p_regions = p_regions


struct ResolveImageInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_image: Image
    var src_image_layout: ImageLayout
    var dst_image: Image
    var dst_image_layout: ImageLayout
    var region_count: UInt32
    var p_regions: Ptr[ImageResolve2]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_image: Image = zero_init[Image](),
        src_image_layout: ImageLayout = zero_init[ImageLayout](),
        dst_image: Image = zero_init[Image](),
        dst_image_layout: ImageLayout = zero_init[ImageLayout](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[ImageResolve2] = zero_init[Ptr[ImageResolve2]](),
    ):
        self.s_type = StructureType.RESOLVE_IMAGE_INFO_2
        self.p_next = p_next
        self.src_image = src_image
        self.src_image_layout = src_image_layout
        self.dst_image = dst_image
        self.dst_image_layout = dst_image_layout
        self.region_count = region_count
        self.p_regions = p_regions


struct PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_image_int_64_atomics: Bool32
    var sparse_image_int_64_atomics: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_image_int_64_atomics: Bool32 = zero_init[Bool32](),
        sparse_image_int_64_atomics: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT
        self.p_next = p_next
        self.shader_image_int_64_atomics = shader_image_int_64_atomics
        self.sparse_image_int_64_atomics = sparse_image_int_64_atomics


struct FragmentShadingRateAttachmentInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_fragment_shading_rate_attachment: Ptr[AttachmentReference2]
    var shading_rate_attachment_texel_size: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_fragment_shading_rate_attachment: Ptr[AttachmentReference2] = zero_init[Ptr[AttachmentReference2]](),
        shading_rate_attachment_texel_size: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR
        self.p_next = p_next
        self.p_fragment_shading_rate_attachment = p_fragment_shading_rate_attachment
        self.shading_rate_attachment_texel_size = shading_rate_attachment_texel_size


struct PipelineFragmentShadingRateStateCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_size: Extent2D
    var combiner_ops: InlineArray[FragmentShadingRateCombinerOpKHR, Int(2)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_size: Extent2D = zero_init[Extent2D](),
        combiner_ops: InlineArray[FragmentShadingRateCombinerOpKHR, Int(2)] = zero_init[InlineArray[FragmentShadingRateCombinerOpKHR, Int(2)]](),
    ):
        self.s_type = StructureType.PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR
        self.p_next = p_next
        self.fragment_size = fragment_size
        self.combiner_ops = combiner_ops


struct PhysicalDeviceFragmentShadingRateFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_fragment_shading_rate: Bool32
    var primitive_fragment_shading_rate: Bool32
    var attachment_fragment_shading_rate: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_fragment_shading_rate: Bool32 = zero_init[Bool32](),
        primitive_fragment_shading_rate: Bool32 = zero_init[Bool32](),
        attachment_fragment_shading_rate: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR
        self.p_next = p_next
        self.pipeline_fragment_shading_rate = pipeline_fragment_shading_rate
        self.primitive_fragment_shading_rate = primitive_fragment_shading_rate
        self.attachment_fragment_shading_rate = attachment_fragment_shading_rate


struct PhysicalDeviceFragmentShadingRatePropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_fragment_shading_rate_attachment_texel_size: Extent2D
    var max_fragment_shading_rate_attachment_texel_size: Extent2D
    var max_fragment_shading_rate_attachment_texel_size_aspect_ratio: UInt32
    var primitive_fragment_shading_rate_with_multiple_viewports: Bool32
    var layered_shading_rate_attachments: Bool32
    var fragment_shading_rate_non_trivial_combiner_ops: Bool32
    var max_fragment_size: Extent2D
    var max_fragment_size_aspect_ratio: UInt32
    var max_fragment_shading_rate_coverage_samples: UInt32
    var max_fragment_shading_rate_rasterization_samples: SampleCountFlagBits
    var fragment_shading_rate_with_shader_depth_stencil_writes: Bool32
    var fragment_shading_rate_with_sample_mask: Bool32
    var fragment_shading_rate_with_shader_sample_mask: Bool32
    var fragment_shading_rate_with_conservative_rasterization: Bool32
    var fragment_shading_rate_with_fragment_shader_interlock: Bool32
    var fragment_shading_rate_with_custom_sample_locations: Bool32
    var fragment_shading_rate_strict_multiply_combiner: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_fragment_shading_rate_attachment_texel_size: Extent2D = zero_init[Extent2D](),
        max_fragment_shading_rate_attachment_texel_size: Extent2D = zero_init[Extent2D](),
        max_fragment_shading_rate_attachment_texel_size_aspect_ratio: UInt32 = zero_init[UInt32](),
        primitive_fragment_shading_rate_with_multiple_viewports: Bool32 = zero_init[Bool32](),
        layered_shading_rate_attachments: Bool32 = zero_init[Bool32](),
        fragment_shading_rate_non_trivial_combiner_ops: Bool32 = zero_init[Bool32](),
        max_fragment_size: Extent2D = zero_init[Extent2D](),
        max_fragment_size_aspect_ratio: UInt32 = zero_init[UInt32](),
        max_fragment_shading_rate_coverage_samples: UInt32 = zero_init[UInt32](),
        max_fragment_shading_rate_rasterization_samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
        fragment_shading_rate_with_shader_depth_stencil_writes: Bool32 = zero_init[Bool32](),
        fragment_shading_rate_with_sample_mask: Bool32 = zero_init[Bool32](),
        fragment_shading_rate_with_shader_sample_mask: Bool32 = zero_init[Bool32](),
        fragment_shading_rate_with_conservative_rasterization: Bool32 = zero_init[Bool32](),
        fragment_shading_rate_with_fragment_shader_interlock: Bool32 = zero_init[Bool32](),
        fragment_shading_rate_with_custom_sample_locations: Bool32 = zero_init[Bool32](),
        fragment_shading_rate_strict_multiply_combiner: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR
        self.p_next = p_next
        self.min_fragment_shading_rate_attachment_texel_size = min_fragment_shading_rate_attachment_texel_size
        self.max_fragment_shading_rate_attachment_texel_size = max_fragment_shading_rate_attachment_texel_size
        self.max_fragment_shading_rate_attachment_texel_size_aspect_ratio = max_fragment_shading_rate_attachment_texel_size_aspect_ratio
        self.primitive_fragment_shading_rate_with_multiple_viewports = primitive_fragment_shading_rate_with_multiple_viewports
        self.layered_shading_rate_attachments = layered_shading_rate_attachments
        self.fragment_shading_rate_non_trivial_combiner_ops = fragment_shading_rate_non_trivial_combiner_ops
        self.max_fragment_size = max_fragment_size
        self.max_fragment_size_aspect_ratio = max_fragment_size_aspect_ratio
        self.max_fragment_shading_rate_coverage_samples = max_fragment_shading_rate_coverage_samples
        self.max_fragment_shading_rate_rasterization_samples = max_fragment_shading_rate_rasterization_samples
        self.fragment_shading_rate_with_shader_depth_stencil_writes = fragment_shading_rate_with_shader_depth_stencil_writes
        self.fragment_shading_rate_with_sample_mask = fragment_shading_rate_with_sample_mask
        self.fragment_shading_rate_with_shader_sample_mask = fragment_shading_rate_with_shader_sample_mask
        self.fragment_shading_rate_with_conservative_rasterization = fragment_shading_rate_with_conservative_rasterization
        self.fragment_shading_rate_with_fragment_shader_interlock = fragment_shading_rate_with_fragment_shader_interlock
        self.fragment_shading_rate_with_custom_sample_locations = fragment_shading_rate_with_custom_sample_locations
        self.fragment_shading_rate_strict_multiply_combiner = fragment_shading_rate_strict_multiply_combiner


struct PhysicalDeviceFragmentShadingRateKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sample_counts: SampleCountFlags
    var fragment_size: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sample_counts: SampleCountFlags = zero_init[SampleCountFlags](),
        fragment_size: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR
        self.p_next = p_next
        self.sample_counts = sample_counts
        self.fragment_size = fragment_size


struct PhysicalDeviceShaderTerminateInvocationFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_terminate_invocation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_terminate_invocation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES
        self.p_next = p_next
        self.shader_terminate_invocation = shader_terminate_invocation


struct PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_shading_rate_enums: Bool32
    var supersample_fragment_shading_rates: Bool32
    var no_invocation_fragment_shading_rates: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_shading_rate_enums: Bool32 = zero_init[Bool32](),
        supersample_fragment_shading_rates: Bool32 = zero_init[Bool32](),
        no_invocation_fragment_shading_rates: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV
        self.p_next = p_next
        self.fragment_shading_rate_enums = fragment_shading_rate_enums
        self.supersample_fragment_shading_rates = supersample_fragment_shading_rates
        self.no_invocation_fragment_shading_rates = no_invocation_fragment_shading_rates


struct PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_fragment_shading_rate_invocation_count: SampleCountFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_fragment_shading_rate_invocation_count: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV
        self.p_next = p_next
        self.max_fragment_shading_rate_invocation_count = max_fragment_shading_rate_invocation_count


struct PipelineFragmentShadingRateEnumStateCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shading_rate_type: FragmentShadingRateTypeNV
    var shading_rate: FragmentShadingRateNV
    var combiner_ops: InlineArray[FragmentShadingRateCombinerOpKHR, Int(2)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shading_rate_type: FragmentShadingRateTypeNV = zero_init[FragmentShadingRateTypeNV](),
        shading_rate: FragmentShadingRateNV = zero_init[FragmentShadingRateNV](),
        combiner_ops: InlineArray[FragmentShadingRateCombinerOpKHR, Int(2)] = zero_init[InlineArray[FragmentShadingRateCombinerOpKHR, Int(2)]](),
    ):
        self.s_type = StructureType.PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV
        self.p_next = p_next
        self.shading_rate_type = shading_rate_type
        self.shading_rate = shading_rate
        self.combiner_ops = combiner_ops


struct AccelerationStructureBuildSizesInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acceleration_structure_size: DeviceSize
    var update_scratch_size: DeviceSize
    var build_scratch_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acceleration_structure_size: DeviceSize = zero_init[DeviceSize](),
        update_scratch_size: DeviceSize = zero_init[DeviceSize](),
        build_scratch_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR
        self.p_next = p_next
        self.acceleration_structure_size = acceleration_structure_size
        self.update_scratch_size = update_scratch_size
        self.build_scratch_size = build_scratch_size


struct PhysicalDeviceImage2DViewOf3DFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_2_d_view_of_3_d: Bool32
    var sampler_2_d_view_of_3_d: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_2_d_view_of_3_d: Bool32 = zero_init[Bool32](),
        sampler_2_d_view_of_3_d: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT
        self.p_next = p_next
        self.image_2_d_view_of_3_d = image_2_d_view_of_3_d
        self.sampler_2_d_view_of_3_d = sampler_2_d_view_of_3_d


struct PhysicalDeviceImageSlicedViewOf3DFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_sliced_view_of_3_d: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_sliced_view_of_3_d: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT
        self.p_next = p_next
        self.image_sliced_view_of_3_d = image_sliced_view_of_3_d


struct PhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var attachment_feedback_loop_dynamic_state: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        attachment_feedback_loop_dynamic_state: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT
        self.p_next = p_next
        self.attachment_feedback_loop_dynamic_state = attachment_feedback_loop_dynamic_state


struct PhysicalDeviceLegacyVertexAttributesFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var legacy_vertex_attributes: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        legacy_vertex_attributes: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT
        self.p_next = p_next
        self.legacy_vertex_attributes = legacy_vertex_attributes


struct PhysicalDeviceLegacyVertexAttributesPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var native_unaligned_performance: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        native_unaligned_performance: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_PROPERTIES_EXT
        self.p_next = p_next
        self.native_unaligned_performance = native_unaligned_performance


struct PhysicalDeviceMutableDescriptorTypeFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var mutable_descriptor_type: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        mutable_descriptor_type: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT
        self.p_next = p_next
        self.mutable_descriptor_type = mutable_descriptor_type


struct MutableDescriptorTypeListEXT(ImplicitlyCopyable, Movable):
    var descriptor_type_count: UInt32
    var p_descriptor_types: Ptr[DescriptorType]

    fn __init__(
        out self,
        descriptor_type_count: UInt32 = zero_init[UInt32](),
        p_descriptor_types: Ptr[DescriptorType] = zero_init[Ptr[DescriptorType]](),
    ):
        self.descriptor_type_count = descriptor_type_count
        self.p_descriptor_types = p_descriptor_types


struct MutableDescriptorTypeCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var mutable_descriptor_type_list_count: UInt32
    var p_mutable_descriptor_type_lists: Ptr[MutableDescriptorTypeListEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        mutable_descriptor_type_list_count: UInt32 = zero_init[UInt32](),
        p_mutable_descriptor_type_lists: Ptr[MutableDescriptorTypeListEXT] = zero_init[Ptr[MutableDescriptorTypeListEXT]](),
    ):
        self.s_type = StructureType.MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_EXT
        self.p_next = p_next
        self.mutable_descriptor_type_list_count = mutable_descriptor_type_list_count
        self.p_mutable_descriptor_type_lists = p_mutable_descriptor_type_lists


struct PhysicalDeviceDepthClipControlFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var depth_clip_control: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        depth_clip_control: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT
        self.p_next = p_next
        self.depth_clip_control = depth_clip_control


struct PhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var zero_initialize_device_memory: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        zero_initialize_device_memory: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ZERO_INITIALIZE_DEVICE_MEMORY_FEATURES_EXT
        self.p_next = p_next
        self.zero_initialize_device_memory = zero_initialize_device_memory


struct PhysicalDeviceDeviceGeneratedCommandsFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_generated_commands: Bool32
    var dynamic_generated_pipeline_layout: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_generated_commands: Bool32 = zero_init[Bool32](),
        dynamic_generated_pipeline_layout: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT
        self.p_next = p_next
        self.device_generated_commands = device_generated_commands
        self.dynamic_generated_pipeline_layout = dynamic_generated_pipeline_layout


struct PhysicalDeviceDeviceGeneratedCommandsPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_indirect_pipeline_count: UInt32
    var max_indirect_shader_object_count: UInt32
    var max_indirect_sequence_count: UInt32
    var max_indirect_commands_token_count: UInt32
    var max_indirect_commands_token_offset: UInt32
    var max_indirect_commands_indirect_stride: UInt32
    var supported_indirect_commands_input_modes: IndirectCommandsInputModeFlagsEXT
    var supported_indirect_commands_shader_stages: ShaderStageFlags
    var supported_indirect_commands_shader_stages_pipeline_binding: ShaderStageFlags
    var supported_indirect_commands_shader_stages_shader_binding: ShaderStageFlags
    var device_generated_commands_transform_feedback: Bool32
    var device_generated_commands_multi_draw_indirect_count: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_indirect_pipeline_count: UInt32 = zero_init[UInt32](),
        max_indirect_shader_object_count: UInt32 = zero_init[UInt32](),
        max_indirect_sequence_count: UInt32 = zero_init[UInt32](),
        max_indirect_commands_token_count: UInt32 = zero_init[UInt32](),
        max_indirect_commands_token_offset: UInt32 = zero_init[UInt32](),
        max_indirect_commands_indirect_stride: UInt32 = zero_init[UInt32](),
        supported_indirect_commands_input_modes: IndirectCommandsInputModeFlagsEXT = zero_init[IndirectCommandsInputModeFlagsEXT](),
        supported_indirect_commands_shader_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
        supported_indirect_commands_shader_stages_pipeline_binding: ShaderStageFlags = zero_init[ShaderStageFlags](),
        supported_indirect_commands_shader_stages_shader_binding: ShaderStageFlags = zero_init[ShaderStageFlags](),
        device_generated_commands_transform_feedback: Bool32 = zero_init[Bool32](),
        device_generated_commands_multi_draw_indirect_count: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_EXT
        self.p_next = p_next
        self.max_indirect_pipeline_count = max_indirect_pipeline_count
        self.max_indirect_shader_object_count = max_indirect_shader_object_count
        self.max_indirect_sequence_count = max_indirect_sequence_count
        self.max_indirect_commands_token_count = max_indirect_commands_token_count
        self.max_indirect_commands_token_offset = max_indirect_commands_token_offset
        self.max_indirect_commands_indirect_stride = max_indirect_commands_indirect_stride
        self.supported_indirect_commands_input_modes = supported_indirect_commands_input_modes
        self.supported_indirect_commands_shader_stages = supported_indirect_commands_shader_stages
        self.supported_indirect_commands_shader_stages_pipeline_binding = supported_indirect_commands_shader_stages_pipeline_binding
        self.supported_indirect_commands_shader_stages_shader_binding = supported_indirect_commands_shader_stages_shader_binding
        self.device_generated_commands_transform_feedback = device_generated_commands_transform_feedback
        self.device_generated_commands_multi_draw_indirect_count = device_generated_commands_multi_draw_indirect_count


struct GeneratedCommandsPipelineInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline: Pipeline

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline: Pipeline = zero_init[Pipeline](),
    ):
        self.s_type = StructureType.GENERATED_COMMANDS_PIPELINE_INFO_EXT
        self.p_next = p_next
        self.pipeline = pipeline


struct GeneratedCommandsShaderInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_count: UInt32
    var p_shaders: Ptr[ShaderEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_count: UInt32 = zero_init[UInt32](),
        p_shaders: Ptr[ShaderEXT] = zero_init[Ptr[ShaderEXT]](),
    ):
        self.s_type = StructureType.GENERATED_COMMANDS_SHADER_INFO_EXT
        self.p_next = p_next
        self.shader_count = shader_count
        self.p_shaders = p_shaders


struct GeneratedCommandsMemoryRequirementsInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var indirect_execution_set: IndirectExecutionSetEXT
    var indirect_commands_layout: IndirectCommandsLayoutEXT
    var max_sequence_count: UInt32
    var max_draw_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        indirect_execution_set: IndirectExecutionSetEXT = zero_init[IndirectExecutionSetEXT](),
        indirect_commands_layout: IndirectCommandsLayoutEXT = zero_init[IndirectCommandsLayoutEXT](),
        max_sequence_count: UInt32 = zero_init[UInt32](),
        max_draw_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_EXT
        self.p_next = p_next
        self.indirect_execution_set = indirect_execution_set
        self.indirect_commands_layout = indirect_commands_layout
        self.max_sequence_count = max_sequence_count
        self.max_draw_count = max_draw_count


struct IndirectExecutionSetPipelineInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var initial_pipeline: Pipeline
    var max_pipeline_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        initial_pipeline: Pipeline = zero_init[Pipeline](),
        max_pipeline_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.INDIRECT_EXECUTION_SET_PIPELINE_INFO_EXT
        self.p_next = p_next
        self.initial_pipeline = initial_pipeline
        self.max_pipeline_count = max_pipeline_count


struct IndirectExecutionSetShaderLayoutInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var set_layout_count: UInt32
    var p_set_layouts: Ptr[DescriptorSetLayout]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        set_layout_count: UInt32 = zero_init[UInt32](),
        p_set_layouts: Ptr[DescriptorSetLayout] = zero_init[Ptr[DescriptorSetLayout]](),
    ):
        self.s_type = StructureType.INDIRECT_EXECUTION_SET_SHADER_LAYOUT_INFO_EXT
        self.p_next = p_next
        self.set_layout_count = set_layout_count
        self.p_set_layouts = p_set_layouts


struct IndirectExecutionSetShaderInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_count: UInt32
    var p_initial_shaders: Ptr[ShaderEXT]
    var p_set_layout_infos: Ptr[IndirectExecutionSetShaderLayoutInfoEXT]
    var max_shader_count: UInt32
    var push_constant_range_count: UInt32
    var p_push_constant_ranges: Ptr[PushConstantRange]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_count: UInt32 = zero_init[UInt32](),
        p_initial_shaders: Ptr[ShaderEXT] = zero_init[Ptr[ShaderEXT]](),
        p_set_layout_infos: Ptr[IndirectExecutionSetShaderLayoutInfoEXT] = zero_init[Ptr[IndirectExecutionSetShaderLayoutInfoEXT]](),
        max_shader_count: UInt32 = zero_init[UInt32](),
        push_constant_range_count: UInt32 = zero_init[UInt32](),
        p_push_constant_ranges: Ptr[PushConstantRange] = zero_init[Ptr[PushConstantRange]](),
    ):
        self.s_type = StructureType.INDIRECT_EXECUTION_SET_SHADER_INFO_EXT
        self.p_next = p_next
        self.shader_count = shader_count
        self.p_initial_shaders = p_initial_shaders
        self.p_set_layout_infos = p_set_layout_infos
        self.max_shader_count = max_shader_count
        self.push_constant_range_count = push_constant_range_count
        self.p_push_constant_ranges = p_push_constant_ranges


struct IndirectExecutionSetCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: IndirectExecutionSetInfoTypeEXT
    var info: IndirectExecutionSetInfoEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: IndirectExecutionSetInfoTypeEXT = zero_init[IndirectExecutionSetInfoTypeEXT](),
        info: IndirectExecutionSetInfoEXT = zero_init[IndirectExecutionSetInfoEXT](),
    ):
        self.s_type = StructureType.INDIRECT_EXECUTION_SET_CREATE_INFO_EXT
        self.p_next = p_next
        self.type = type
        self.info = info


struct GeneratedCommandsInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_stages: ShaderStageFlags
    var indirect_execution_set: IndirectExecutionSetEXT
    var indirect_commands_layout: IndirectCommandsLayoutEXT
    var indirect_address: DeviceAddress
    var indirect_address_size: DeviceSize
    var preprocess_address: DeviceAddress
    var preprocess_size: DeviceSize
    var max_sequence_count: UInt32
    var sequence_count_address: DeviceAddress
    var max_draw_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
        indirect_execution_set: IndirectExecutionSetEXT = zero_init[IndirectExecutionSetEXT](),
        indirect_commands_layout: IndirectCommandsLayoutEXT = zero_init[IndirectCommandsLayoutEXT](),
        indirect_address: DeviceAddress = zero_init[DeviceAddress](),
        indirect_address_size: DeviceSize = zero_init[DeviceSize](),
        preprocess_address: DeviceAddress = zero_init[DeviceAddress](),
        preprocess_size: DeviceSize = zero_init[DeviceSize](),
        max_sequence_count: UInt32 = zero_init[UInt32](),
        sequence_count_address: DeviceAddress = zero_init[DeviceAddress](),
        max_draw_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.GENERATED_COMMANDS_INFO_EXT
        self.p_next = p_next
        self.shader_stages = shader_stages
        self.indirect_execution_set = indirect_execution_set
        self.indirect_commands_layout = indirect_commands_layout
        self.indirect_address = indirect_address
        self.indirect_address_size = indirect_address_size
        self.preprocess_address = preprocess_address
        self.preprocess_size = preprocess_size
        self.max_sequence_count = max_sequence_count
        self.sequence_count_address = sequence_count_address
        self.max_draw_count = max_draw_count


struct WriteIndirectExecutionSetPipelineEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var index: UInt32
    var pipeline: Pipeline

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        index: UInt32 = zero_init[UInt32](),
        pipeline: Pipeline = zero_init[Pipeline](),
    ):
        self.s_type = StructureType.WRITE_INDIRECT_EXECUTION_SET_PIPELINE_EXT
        self.p_next = p_next
        self.index = index
        self.pipeline = pipeline


struct WriteIndirectExecutionSetShaderEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var index: UInt32
    var shader: ShaderEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        index: UInt32 = zero_init[UInt32](),
        shader: ShaderEXT = zero_init[ShaderEXT](),
    ):
        self.s_type = StructureType.WRITE_INDIRECT_EXECUTION_SET_SHADER_EXT
        self.p_next = p_next
        self.index = index
        self.shader = shader


struct IndirectCommandsLayoutCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: IndirectCommandsLayoutUsageFlagsEXT
    var shader_stages: ShaderStageFlags
    var indirect_stride: UInt32
    var pipeline_layout: PipelineLayout
    var token_count: UInt32
    var p_tokens: Ptr[IndirectCommandsLayoutTokenEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: IndirectCommandsLayoutUsageFlagsEXT = zero_init[IndirectCommandsLayoutUsageFlagsEXT](),
        shader_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
        indirect_stride: UInt32 = zero_init[UInt32](),
        pipeline_layout: PipelineLayout = zero_init[PipelineLayout](),
        token_count: UInt32 = zero_init[UInt32](),
        p_tokens: Ptr[IndirectCommandsLayoutTokenEXT] = zero_init[Ptr[IndirectCommandsLayoutTokenEXT]](),
    ):
        self.s_type = StructureType.INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.shader_stages = shader_stages
        self.indirect_stride = indirect_stride
        self.pipeline_layout = pipeline_layout
        self.token_count = token_count
        self.p_tokens = p_tokens


struct IndirectCommandsLayoutTokenEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: IndirectCommandsTokenTypeEXT
    var data: IndirectCommandsTokenDataEXT
    var offset: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: IndirectCommandsTokenTypeEXT = zero_init[IndirectCommandsTokenTypeEXT](),
        data: IndirectCommandsTokenDataEXT = zero_init[IndirectCommandsTokenDataEXT](),
        offset: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.INDIRECT_COMMANDS_LAYOUT_TOKEN_EXT
        self.p_next = p_next
        self.type = type
        self.data = data
        self.offset = offset


struct DrawIndirectCountIndirectCommandEXT(ImplicitlyCopyable, Movable):
    var buffer_address: DeviceAddress
    var stride: UInt32
    var command_count: UInt32

    fn __init__(
        out self,
        buffer_address: DeviceAddress = zero_init[DeviceAddress](),
        stride: UInt32 = zero_init[UInt32](),
        command_count: UInt32 = zero_init[UInt32](),
    ):
        self.buffer_address = buffer_address
        self.stride = stride
        self.command_count = command_count


struct IndirectCommandsVertexBufferTokenEXT(ImplicitlyCopyable, Movable):
    var vertex_binding_unit: UInt32

    fn __init__(
        out self,
        vertex_binding_unit: UInt32 = zero_init[UInt32](),
    ):
        self.vertex_binding_unit = vertex_binding_unit


struct BindVertexBufferIndirectCommandEXT(ImplicitlyCopyable, Movable):
    var buffer_address: DeviceAddress
    var size: UInt32
    var stride: UInt32

    fn __init__(
        out self,
        buffer_address: DeviceAddress = zero_init[DeviceAddress](),
        size: UInt32 = zero_init[UInt32](),
        stride: UInt32 = zero_init[UInt32](),
    ):
        self.buffer_address = buffer_address
        self.size = size
        self.stride = stride


struct IndirectCommandsIndexBufferTokenEXT(ImplicitlyCopyable, Movable):
    var mode: IndirectCommandsInputModeFlagBitsEXT

    fn __init__(
        out self,
        mode: IndirectCommandsInputModeFlagBitsEXT = zero_init[IndirectCommandsInputModeFlagBitsEXT](),
    ):
        self.mode = mode


struct BindIndexBufferIndirectCommandEXT(ImplicitlyCopyable, Movable):
    var buffer_address: DeviceAddress
    var size: UInt32
    var index_type: IndexType

    fn __init__(
        out self,
        buffer_address: DeviceAddress = zero_init[DeviceAddress](),
        size: UInt32 = zero_init[UInt32](),
        index_type: IndexType = zero_init[IndexType](),
    ):
        self.buffer_address = buffer_address
        self.size = size
        self.index_type = index_type


struct IndirectCommandsPushConstantTokenEXT(ImplicitlyCopyable, Movable):
    var update_range: PushConstantRange

    fn __init__(
        out self,
        update_range: PushConstantRange = zero_init[PushConstantRange](),
    ):
        self.update_range = update_range


struct IndirectCommandsExecutionSetTokenEXT(ImplicitlyCopyable, Movable):
    var type: IndirectExecutionSetInfoTypeEXT
    var shader_stages: ShaderStageFlags

    fn __init__(
        out self,
        type: IndirectExecutionSetInfoTypeEXT = zero_init[IndirectExecutionSetInfoTypeEXT](),
        shader_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
    ):
        self.type = type
        self.shader_stages = shader_stages


struct PipelineViewportDepthClipControlCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var negative_one_to_one: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        negative_one_to_one: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT
        self.p_next = p_next
        self.negative_one_to_one = negative_one_to_one


struct PhysicalDeviceDepthClampControlFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var depth_clamp_control: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        depth_clamp_control: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT
        self.p_next = p_next
        self.depth_clamp_control = depth_clamp_control


struct PipelineViewportDepthClampControlCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var depth_clamp_mode: DepthClampModeEXT
    var p_depth_clamp_range: Ptr[DepthClampRangeEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        depth_clamp_mode: DepthClampModeEXT = zero_init[DepthClampModeEXT](),
        p_depth_clamp_range: Ptr[DepthClampRangeEXT] = zero_init[Ptr[DepthClampRangeEXT]](),
    ):
        self.s_type = StructureType.PIPELINE_VIEWPORT_DEPTH_CLAMP_CONTROL_CREATE_INFO_EXT
        self.p_next = p_next
        self.depth_clamp_mode = depth_clamp_mode
        self.p_depth_clamp_range = p_depth_clamp_range


struct PhysicalDeviceVertexInputDynamicStateFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_input_dynamic_state: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_input_dynamic_state: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT
        self.p_next = p_next
        self.vertex_input_dynamic_state = vertex_input_dynamic_state


struct PhysicalDeviceExternalMemoryRDMAFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var external_memory_rdma: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        external_memory_rdma: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV
        self.p_next = p_next
        self.external_memory_rdma = external_memory_rdma


struct PhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_relaxed_extended_instruction: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_relaxed_extended_instruction: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR
        self.p_next = p_next
        self.shader_relaxed_extended_instruction = shader_relaxed_extended_instruction


struct VertexInputBindingDescription2EXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var binding: UInt32
    var stride: UInt32
    var input_rate: VertexInputRate
    var divisor: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        binding: UInt32 = zero_init[UInt32](),
        stride: UInt32 = zero_init[UInt32](),
        input_rate: VertexInputRate = zero_init[VertexInputRate](),
        divisor: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT
        self.p_next = p_next
        self.binding = binding
        self.stride = stride
        self.input_rate = input_rate
        self.divisor = divisor


struct VertexInputAttributeDescription2EXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var location: UInt32
    var binding: UInt32
    var format: Format
    var offset: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        location: UInt32 = zero_init[UInt32](),
        binding: UInt32 = zero_init[UInt32](),
        format: Format = zero_init[Format](),
        offset: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT
        self.p_next = p_next
        self.location = location
        self.binding = binding
        self.format = format
        self.offset = offset


struct PhysicalDeviceColorWriteEnableFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var color_write_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        color_write_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT
        self.p_next = p_next
        self.color_write_enable = color_write_enable


struct PipelineColorWriteCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var attachment_count: UInt32
    var p_color_write_enables: Ptr[Bool32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        attachment_count: UInt32 = zero_init[UInt32](),
        p_color_write_enables: Ptr[Bool32] = zero_init[Ptr[Bool32]](),
    ):
        self.s_type = StructureType.PIPELINE_COLOR_WRITE_CREATE_INFO_EXT
        self.p_next = p_next
        self.attachment_count = attachment_count
        self.p_color_write_enables = p_color_write_enables


struct MemoryBarrier2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_stage_mask: PipelineStageFlags2
    var src_access_mask: AccessFlags2
    var dst_stage_mask: PipelineStageFlags2
    var dst_access_mask: AccessFlags2

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        src_access_mask: AccessFlags2 = zero_init[AccessFlags2](),
        dst_stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        dst_access_mask: AccessFlags2 = zero_init[AccessFlags2](),
    ):
        self.s_type = StructureType.MEMORY_BARRIER_2
        self.p_next = p_next
        self.src_stage_mask = src_stage_mask
        self.src_access_mask = src_access_mask
        self.dst_stage_mask = dst_stage_mask
        self.dst_access_mask = dst_access_mask


struct ImageMemoryBarrier2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_stage_mask: PipelineStageFlags2
    var src_access_mask: AccessFlags2
    var dst_stage_mask: PipelineStageFlags2
    var dst_access_mask: AccessFlags2
    var old_layout: ImageLayout
    var new_layout: ImageLayout
    var src_queue_family_index: UInt32
    var dst_queue_family_index: UInt32
    var image: Image
    var subresource_range: ImageSubresourceRange

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        src_access_mask: AccessFlags2 = zero_init[AccessFlags2](),
        dst_stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        dst_access_mask: AccessFlags2 = zero_init[AccessFlags2](),
        old_layout: ImageLayout = zero_init[ImageLayout](),
        new_layout: ImageLayout = zero_init[ImageLayout](),
        src_queue_family_index: UInt32 = zero_init[UInt32](),
        dst_queue_family_index: UInt32 = zero_init[UInt32](),
        image: Image = zero_init[Image](),
        subresource_range: ImageSubresourceRange = zero_init[ImageSubresourceRange](),
    ):
        self.s_type = StructureType.IMAGE_MEMORY_BARRIER_2
        self.p_next = p_next
        self.src_stage_mask = src_stage_mask
        self.src_access_mask = src_access_mask
        self.dst_stage_mask = dst_stage_mask
        self.dst_access_mask = dst_access_mask
        self.old_layout = old_layout
        self.new_layout = new_layout
        self.src_queue_family_index = src_queue_family_index
        self.dst_queue_family_index = dst_queue_family_index
        self.image = image
        self.subresource_range = subresource_range


struct BufferMemoryBarrier2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_stage_mask: PipelineStageFlags2
    var src_access_mask: AccessFlags2
    var dst_stage_mask: PipelineStageFlags2
    var dst_access_mask: AccessFlags2
    var src_queue_family_index: UInt32
    var dst_queue_family_index: UInt32
    var buffer: Buffer
    var offset: DeviceSize
    var size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        src_access_mask: AccessFlags2 = zero_init[AccessFlags2](),
        dst_stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        dst_access_mask: AccessFlags2 = zero_init[AccessFlags2](),
        src_queue_family_index: UInt32 = zero_init[UInt32](),
        dst_queue_family_index: UInt32 = zero_init[UInt32](),
        buffer: Buffer = zero_init[Buffer](),
        offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.BUFFER_MEMORY_BARRIER_2
        self.p_next = p_next
        self.src_stage_mask = src_stage_mask
        self.src_access_mask = src_access_mask
        self.dst_stage_mask = dst_stage_mask
        self.dst_access_mask = dst_access_mask
        self.src_queue_family_index = src_queue_family_index
        self.dst_queue_family_index = dst_queue_family_index
        self.buffer = buffer
        self.offset = offset
        self.size = size


struct MemoryBarrierAccessFlags3KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_access_mask_3: AccessFlags3KHR
    var dst_access_mask_3: AccessFlags3KHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_access_mask_3: AccessFlags3KHR = zero_init[AccessFlags3KHR](),
        dst_access_mask_3: AccessFlags3KHR = zero_init[AccessFlags3KHR](),
    ):
        self.s_type = StructureType.MEMORY_BARRIER_ACCESS_FLAGS_3_KHR
        self.p_next = p_next
        self.src_access_mask_3 = src_access_mask_3
        self.dst_access_mask_3 = dst_access_mask_3


struct DependencyInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dependency_flags: DependencyFlags
    var memory_barrier_count: UInt32
    var p_memory_barriers: Ptr[MemoryBarrier2]
    var buffer_memory_barrier_count: UInt32
    var p_buffer_memory_barriers: Ptr[BufferMemoryBarrier2]
    var image_memory_barrier_count: UInt32
    var p_image_memory_barriers: Ptr[ImageMemoryBarrier2]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dependency_flags: DependencyFlags = zero_init[DependencyFlags](),
        memory_barrier_count: UInt32 = zero_init[UInt32](),
        p_memory_barriers: Ptr[MemoryBarrier2] = zero_init[Ptr[MemoryBarrier2]](),
        buffer_memory_barrier_count: UInt32 = zero_init[UInt32](),
        p_buffer_memory_barriers: Ptr[BufferMemoryBarrier2] = zero_init[Ptr[BufferMemoryBarrier2]](),
        image_memory_barrier_count: UInt32 = zero_init[UInt32](),
        p_image_memory_barriers: Ptr[ImageMemoryBarrier2] = zero_init[Ptr[ImageMemoryBarrier2]](),
    ):
        self.s_type = StructureType.DEPENDENCY_INFO
        self.p_next = p_next
        self.dependency_flags = dependency_flags
        self.memory_barrier_count = memory_barrier_count
        self.p_memory_barriers = p_memory_barriers
        self.buffer_memory_barrier_count = buffer_memory_barrier_count
        self.p_buffer_memory_barriers = p_buffer_memory_barriers
        self.image_memory_barrier_count = image_memory_barrier_count
        self.p_image_memory_barriers = p_image_memory_barriers


struct SemaphoreSubmitInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var value: UInt64
    var stage_mask: PipelineStageFlags2
    var device_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        value: UInt64 = zero_init[UInt64](),
        stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        device_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.SEMAPHORE_SUBMIT_INFO
        self.p_next = p_next
        self.semaphore = semaphore
        self.value = value
        self.stage_mask = stage_mask
        self.device_index = device_index


struct CommandBufferSubmitInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var command_buffer: CommandBuffer
    var device_mask: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        command_buffer: CommandBuffer = zero_init[CommandBuffer](),
        device_mask: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.COMMAND_BUFFER_SUBMIT_INFO
        self.p_next = p_next
        self.command_buffer = command_buffer
        self.device_mask = device_mask


struct SubmitInfo2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: SubmitFlags
    var wait_semaphore_info_count: UInt32
    var p_wait_semaphore_infos: Ptr[SemaphoreSubmitInfo]
    var command_buffer_info_count: UInt32
    var p_command_buffer_infos: Ptr[CommandBufferSubmitInfo]
    var signal_semaphore_info_count: UInt32
    var p_signal_semaphore_infos: Ptr[SemaphoreSubmitInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: SubmitFlags = zero_init[SubmitFlags](),
        wait_semaphore_info_count: UInt32 = zero_init[UInt32](),
        p_wait_semaphore_infos: Ptr[SemaphoreSubmitInfo] = zero_init[Ptr[SemaphoreSubmitInfo]](),
        command_buffer_info_count: UInt32 = zero_init[UInt32](),
        p_command_buffer_infos: Ptr[CommandBufferSubmitInfo] = zero_init[Ptr[CommandBufferSubmitInfo]](),
        signal_semaphore_info_count: UInt32 = zero_init[UInt32](),
        p_signal_semaphore_infos: Ptr[SemaphoreSubmitInfo] = zero_init[Ptr[SemaphoreSubmitInfo]](),
    ):
        self.s_type = StructureType.SUBMIT_INFO_2
        self.p_next = p_next
        self.flags = flags
        self.wait_semaphore_info_count = wait_semaphore_info_count
        self.p_wait_semaphore_infos = p_wait_semaphore_infos
        self.command_buffer_info_count = command_buffer_info_count
        self.p_command_buffer_infos = p_command_buffer_infos
        self.signal_semaphore_info_count = signal_semaphore_info_count
        self.p_signal_semaphore_infos = p_signal_semaphore_infos


struct QueueFamilyCheckpointProperties2NV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var checkpoint_execution_stage_mask: PipelineStageFlags2

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        checkpoint_execution_stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
    ):
        self.s_type = StructureType.QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV
        self.p_next = p_next
        self.checkpoint_execution_stage_mask = checkpoint_execution_stage_mask


struct CheckpointData2NV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stage: PipelineStageFlags2
    var p_checkpoint_marker: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stage: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        p_checkpoint_marker: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.CHECKPOINT_DATA_2_NV
        self.p_next = p_next
        self.stage = stage
        self.p_checkpoint_marker = p_checkpoint_marker


struct PhysicalDeviceSynchronization2Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var synchronization_2: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        synchronization_2: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES
        self.p_next = p_next
        self.synchronization_2 = synchronization_2


struct PhysicalDeviceUnifiedImageLayoutsFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var unified_image_layouts: Bool32
    var unified_image_layouts_video: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        unified_image_layouts: Bool32 = zero_init[Bool32](),
        unified_image_layouts_video: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_UNIFIED_IMAGE_LAYOUTS_FEATURES_KHR
        self.p_next = p_next
        self.unified_image_layouts = unified_image_layouts
        self.unified_image_layouts_video = unified_image_layouts_video


struct PhysicalDeviceHostImageCopyFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var host_image_copy: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        host_image_copy: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES
        self.p_next = p_next
        self.host_image_copy = host_image_copy


struct PhysicalDeviceHostImageCopyProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var copy_src_layout_count: UInt32
    var p_copy_src_layouts: Ptr[ImageLayout]
    var copy_dst_layout_count: UInt32
    var p_copy_dst_layouts: Ptr[ImageLayout]
    var optimal_tiling_layout_uuid: InlineArray[UInt8, Int(UUID_SIZE)]
    var identical_memory_type_requirements: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        copy_src_layout_count: UInt32 = zero_init[UInt32](),
        p_copy_src_layouts: Ptr[ImageLayout] = zero_init[Ptr[ImageLayout]](),
        copy_dst_layout_count: UInt32 = zero_init[UInt32](),
        p_copy_dst_layouts: Ptr[ImageLayout] = zero_init[Ptr[ImageLayout]](),
        optimal_tiling_layout_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        identical_memory_type_requirements: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_HOST_IMAGE_COPY_PROPERTIES
        self.p_next = p_next
        self.copy_src_layout_count = copy_src_layout_count
        self.p_copy_src_layouts = p_copy_src_layouts
        self.copy_dst_layout_count = copy_dst_layout_count
        self.p_copy_dst_layouts = p_copy_dst_layouts
        self.optimal_tiling_layout_uuid = optimal_tiling_layout_uuid
        self.identical_memory_type_requirements = identical_memory_type_requirements


struct MemoryToImageCopy(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_host_pointer: Ptr[NoneType]
    var memory_row_length: UInt32
    var memory_image_height: UInt32
    var image_subresource: ImageSubresourceLayers
    var image_offset: Offset3D
    var image_extent: Extent3D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_host_pointer: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_row_length: UInt32 = zero_init[UInt32](),
        memory_image_height: UInt32 = zero_init[UInt32](),
        image_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        image_offset: Offset3D = zero_init[Offset3D](),
        image_extent: Extent3D = zero_init[Extent3D](),
    ):
        self.s_type = StructureType.MEMORY_TO_IMAGE_COPY
        self.p_next = p_next
        self.p_host_pointer = p_host_pointer
        self.memory_row_length = memory_row_length
        self.memory_image_height = memory_image_height
        self.image_subresource = image_subresource
        self.image_offset = image_offset
        self.image_extent = image_extent


struct ImageToMemoryCopy(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_host_pointer: Ptr[NoneType]
    var memory_row_length: UInt32
    var memory_image_height: UInt32
    var image_subresource: ImageSubresourceLayers
    var image_offset: Offset3D
    var image_extent: Extent3D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_host_pointer: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_row_length: UInt32 = zero_init[UInt32](),
        memory_image_height: UInt32 = zero_init[UInt32](),
        image_subresource: ImageSubresourceLayers = zero_init[ImageSubresourceLayers](),
        image_offset: Offset3D = zero_init[Offset3D](),
        image_extent: Extent3D = zero_init[Extent3D](),
    ):
        self.s_type = StructureType.IMAGE_TO_MEMORY_COPY
        self.p_next = p_next
        self.p_host_pointer = p_host_pointer
        self.memory_row_length = memory_row_length
        self.memory_image_height = memory_image_height
        self.image_subresource = image_subresource
        self.image_offset = image_offset
        self.image_extent = image_extent


struct CopyMemoryToImageInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: HostImageCopyFlags
    var dst_image: Image
    var dst_image_layout: ImageLayout
    var region_count: UInt32
    var p_regions: Ptr[MemoryToImageCopy]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: HostImageCopyFlags = zero_init[HostImageCopyFlags](),
        dst_image: Image = zero_init[Image](),
        dst_image_layout: ImageLayout = zero_init[ImageLayout](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[MemoryToImageCopy] = zero_init[Ptr[MemoryToImageCopy]](),
    ):
        self.s_type = StructureType.COPY_MEMORY_TO_IMAGE_INFO
        self.p_next = p_next
        self.flags = flags
        self.dst_image = dst_image
        self.dst_image_layout = dst_image_layout
        self.region_count = region_count
        self.p_regions = p_regions


struct CopyImageToMemoryInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: HostImageCopyFlags
    var src_image: Image
    var src_image_layout: ImageLayout
    var region_count: UInt32
    var p_regions: Ptr[ImageToMemoryCopy]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: HostImageCopyFlags = zero_init[HostImageCopyFlags](),
        src_image: Image = zero_init[Image](),
        src_image_layout: ImageLayout = zero_init[ImageLayout](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[ImageToMemoryCopy] = zero_init[Ptr[ImageToMemoryCopy]](),
    ):
        self.s_type = StructureType.COPY_IMAGE_TO_MEMORY_INFO
        self.p_next = p_next
        self.flags = flags
        self.src_image = src_image
        self.src_image_layout = src_image_layout
        self.region_count = region_count
        self.p_regions = p_regions


struct CopyImageToImageInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: HostImageCopyFlags
    var src_image: Image
    var src_image_layout: ImageLayout
    var dst_image: Image
    var dst_image_layout: ImageLayout
    var region_count: UInt32
    var p_regions: Ptr[ImageCopy2]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: HostImageCopyFlags = zero_init[HostImageCopyFlags](),
        src_image: Image = zero_init[Image](),
        src_image_layout: ImageLayout = zero_init[ImageLayout](),
        dst_image: Image = zero_init[Image](),
        dst_image_layout: ImageLayout = zero_init[ImageLayout](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[ImageCopy2] = zero_init[Ptr[ImageCopy2]](),
    ):
        self.s_type = StructureType.COPY_IMAGE_TO_IMAGE_INFO
        self.p_next = p_next
        self.flags = flags
        self.src_image = src_image
        self.src_image_layout = src_image_layout
        self.dst_image = dst_image
        self.dst_image_layout = dst_image_layout
        self.region_count = region_count
        self.p_regions = p_regions


struct HostImageLayoutTransitionInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image: Image
    var old_layout: ImageLayout
    var new_layout: ImageLayout
    var subresource_range: ImageSubresourceRange

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image: Image = zero_init[Image](),
        old_layout: ImageLayout = zero_init[ImageLayout](),
        new_layout: ImageLayout = zero_init[ImageLayout](),
        subresource_range: ImageSubresourceRange = zero_init[ImageSubresourceRange](),
    ):
        self.s_type = StructureType.HOST_IMAGE_LAYOUT_TRANSITION_INFO
        self.p_next = p_next
        self.image = image
        self.old_layout = old_layout
        self.new_layout = new_layout
        self.subresource_range = subresource_range


struct SubresourceHostMemcpySize(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.SUBRESOURCE_HOST_MEMCPY_SIZE
        self.p_next = p_next
        self.size = size


struct HostImageCopyDevicePerformanceQuery(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var optimal_device_access: Bool32
    var identical_memory_layout: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        optimal_device_access: Bool32 = zero_init[Bool32](),
        identical_memory_layout: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.HOST_IMAGE_COPY_DEVICE_PERFORMANCE_QUERY
        self.p_next = p_next
        self.optimal_device_access = optimal_device_access
        self.identical_memory_layout = identical_memory_layout


struct PhysicalDeviceVulkanSC10Properties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_no_dynamic_host_allocations: Bool32
    var device_destroy_frees_memory: Bool32
    var command_pool_multiple_command_buffers_recording: Bool32
    var command_pool_reset_command_buffer: Bool32
    var command_buffer_simultaneous_use: Bool32
    var secondary_command_buffer_null_or_imageless_framebuffer: Bool32
    var recycle_descriptor_set_memory: Bool32
    var recycle_pipeline_memory: Bool32
    var max_render_pass_subpasses: UInt32
    var max_render_pass_dependencies: UInt32
    var max_subpass_input_attachments: UInt32
    var max_subpass_preserve_attachments: UInt32
    var max_framebuffer_attachments: UInt32
    var max_descriptor_set_layout_bindings: UInt32
    var max_query_fault_count: UInt32
    var max_callback_fault_count: UInt32
    var max_command_pool_command_buffers: UInt32
    var max_command_buffer_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_no_dynamic_host_allocations: Bool32 = zero_init[Bool32](),
        device_destroy_frees_memory: Bool32 = zero_init[Bool32](),
        command_pool_multiple_command_buffers_recording: Bool32 = zero_init[Bool32](),
        command_pool_reset_command_buffer: Bool32 = zero_init[Bool32](),
        command_buffer_simultaneous_use: Bool32 = zero_init[Bool32](),
        secondary_command_buffer_null_or_imageless_framebuffer: Bool32 = zero_init[Bool32](),
        recycle_descriptor_set_memory: Bool32 = zero_init[Bool32](),
        recycle_pipeline_memory: Bool32 = zero_init[Bool32](),
        max_render_pass_subpasses: UInt32 = zero_init[UInt32](),
        max_render_pass_dependencies: UInt32 = zero_init[UInt32](),
        max_subpass_input_attachments: UInt32 = zero_init[UInt32](),
        max_subpass_preserve_attachments: UInt32 = zero_init[UInt32](),
        max_framebuffer_attachments: UInt32 = zero_init[UInt32](),
        max_descriptor_set_layout_bindings: UInt32 = zero_init[UInt32](),
        max_query_fault_count: UInt32 = zero_init[UInt32](),
        max_callback_fault_count: UInt32 = zero_init[UInt32](),
        max_command_pool_command_buffers: UInt32 = zero_init[UInt32](),
        max_command_buffer_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_SC_1_0_PROPERTIES
        self.p_next = p_next
        self.device_no_dynamic_host_allocations = device_no_dynamic_host_allocations
        self.device_destroy_frees_memory = device_destroy_frees_memory
        self.command_pool_multiple_command_buffers_recording = command_pool_multiple_command_buffers_recording
        self.command_pool_reset_command_buffer = command_pool_reset_command_buffer
        self.command_buffer_simultaneous_use = command_buffer_simultaneous_use
        self.secondary_command_buffer_null_or_imageless_framebuffer = secondary_command_buffer_null_or_imageless_framebuffer
        self.recycle_descriptor_set_memory = recycle_descriptor_set_memory
        self.recycle_pipeline_memory = recycle_pipeline_memory
        self.max_render_pass_subpasses = max_render_pass_subpasses
        self.max_render_pass_dependencies = max_render_pass_dependencies
        self.max_subpass_input_attachments = max_subpass_input_attachments
        self.max_subpass_preserve_attachments = max_subpass_preserve_attachments
        self.max_framebuffer_attachments = max_framebuffer_attachments
        self.max_descriptor_set_layout_bindings = max_descriptor_set_layout_bindings
        self.max_query_fault_count = max_query_fault_count
        self.max_callback_fault_count = max_callback_fault_count
        self.max_command_pool_command_buffers = max_command_pool_command_buffers
        self.max_command_buffer_size = max_command_buffer_size


struct PipelinePoolSize(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pool_entry_size: DeviceSize
    var pool_entry_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pool_entry_size: DeviceSize = zero_init[DeviceSize](),
        pool_entry_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PIPELINE_POOL_SIZE
        self.p_next = p_next
        self.pool_entry_size = pool_entry_size
        self.pool_entry_count = pool_entry_count


struct DeviceObjectReservationCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_cache_create_info_count: UInt32
    var p_pipeline_cache_create_infos: Ptr[PipelineCacheCreateInfo]
    var pipeline_pool_size_count: UInt32
    var p_pipeline_pool_sizes: Ptr[PipelinePoolSize]
    var semaphore_request_count: UInt32
    var command_buffer_request_count: UInt32
    var fence_request_count: UInt32
    var device_memory_request_count: UInt32
    var buffer_request_count: UInt32
    var image_request_count: UInt32
    var event_request_count: UInt32
    var query_pool_request_count: UInt32
    var buffer_view_request_count: UInt32
    var image_view_request_count: UInt32
    var layered_image_view_request_count: UInt32
    var pipeline_cache_request_count: UInt32
    var pipeline_layout_request_count: UInt32
    var render_pass_request_count: UInt32
    var graphics_pipeline_request_count: UInt32
    var compute_pipeline_request_count: UInt32
    var descriptor_set_layout_request_count: UInt32
    var sampler_request_count: UInt32
    var descriptor_pool_request_count: UInt32
    var descriptor_set_request_count: UInt32
    var framebuffer_request_count: UInt32
    var command_pool_request_count: UInt32
    var sampler_ycbcr_conversion_request_count: UInt32
    var surface_request_count: UInt32
    var swapchain_request_count: UInt32
    var display_mode_request_count: UInt32
    var subpass_description_request_count: UInt32
    var attachment_description_request_count: UInt32
    var descriptor_set_layout_binding_request_count: UInt32
    var descriptor_set_layout_binding_limit: UInt32
    var max_image_view_mip_levels: UInt32
    var max_image_view_array_layers: UInt32
    var max_layered_image_view_mip_levels: UInt32
    var max_occlusion_queries_per_pool: UInt32
    var max_pipeline_statistics_queries_per_pool: UInt32
    var max_timestamp_queries_per_pool: UInt32
    var max_immutable_samplers_per_descriptor_set_layout: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_cache_create_info_count: UInt32 = zero_init[UInt32](),
        p_pipeline_cache_create_infos: Ptr[PipelineCacheCreateInfo] = zero_init[Ptr[PipelineCacheCreateInfo]](),
        pipeline_pool_size_count: UInt32 = zero_init[UInt32](),
        p_pipeline_pool_sizes: Ptr[PipelinePoolSize] = zero_init[Ptr[PipelinePoolSize]](),
        semaphore_request_count: UInt32 = zero_init[UInt32](),
        command_buffer_request_count: UInt32 = zero_init[UInt32](),
        fence_request_count: UInt32 = zero_init[UInt32](),
        device_memory_request_count: UInt32 = zero_init[UInt32](),
        buffer_request_count: UInt32 = zero_init[UInt32](),
        image_request_count: UInt32 = zero_init[UInt32](),
        event_request_count: UInt32 = zero_init[UInt32](),
        query_pool_request_count: UInt32 = zero_init[UInt32](),
        buffer_view_request_count: UInt32 = zero_init[UInt32](),
        image_view_request_count: UInt32 = zero_init[UInt32](),
        layered_image_view_request_count: UInt32 = zero_init[UInt32](),
        pipeline_cache_request_count: UInt32 = zero_init[UInt32](),
        pipeline_layout_request_count: UInt32 = zero_init[UInt32](),
        render_pass_request_count: UInt32 = zero_init[UInt32](),
        graphics_pipeline_request_count: UInt32 = zero_init[UInt32](),
        compute_pipeline_request_count: UInt32 = zero_init[UInt32](),
        descriptor_set_layout_request_count: UInt32 = zero_init[UInt32](),
        sampler_request_count: UInt32 = zero_init[UInt32](),
        descriptor_pool_request_count: UInt32 = zero_init[UInt32](),
        descriptor_set_request_count: UInt32 = zero_init[UInt32](),
        framebuffer_request_count: UInt32 = zero_init[UInt32](),
        command_pool_request_count: UInt32 = zero_init[UInt32](),
        sampler_ycbcr_conversion_request_count: UInt32 = zero_init[UInt32](),
        surface_request_count: UInt32 = zero_init[UInt32](),
        swapchain_request_count: UInt32 = zero_init[UInt32](),
        display_mode_request_count: UInt32 = zero_init[UInt32](),
        subpass_description_request_count: UInt32 = zero_init[UInt32](),
        attachment_description_request_count: UInt32 = zero_init[UInt32](),
        descriptor_set_layout_binding_request_count: UInt32 = zero_init[UInt32](),
        descriptor_set_layout_binding_limit: UInt32 = zero_init[UInt32](),
        max_image_view_mip_levels: UInt32 = zero_init[UInt32](),
        max_image_view_array_layers: UInt32 = zero_init[UInt32](),
        max_layered_image_view_mip_levels: UInt32 = zero_init[UInt32](),
        max_occlusion_queries_per_pool: UInt32 = zero_init[UInt32](),
        max_pipeline_statistics_queries_per_pool: UInt32 = zero_init[UInt32](),
        max_timestamp_queries_per_pool: UInt32 = zero_init[UInt32](),
        max_immutable_samplers_per_descriptor_set_layout: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DEVICE_OBJECT_RESERVATION_CREATE_INFO
        self.p_next = p_next
        self.pipeline_cache_create_info_count = pipeline_cache_create_info_count
        self.p_pipeline_cache_create_infos = p_pipeline_cache_create_infos
        self.pipeline_pool_size_count = pipeline_pool_size_count
        self.p_pipeline_pool_sizes = p_pipeline_pool_sizes
        self.semaphore_request_count = semaphore_request_count
        self.command_buffer_request_count = command_buffer_request_count
        self.fence_request_count = fence_request_count
        self.device_memory_request_count = device_memory_request_count
        self.buffer_request_count = buffer_request_count
        self.image_request_count = image_request_count
        self.event_request_count = event_request_count
        self.query_pool_request_count = query_pool_request_count
        self.buffer_view_request_count = buffer_view_request_count
        self.image_view_request_count = image_view_request_count
        self.layered_image_view_request_count = layered_image_view_request_count
        self.pipeline_cache_request_count = pipeline_cache_request_count
        self.pipeline_layout_request_count = pipeline_layout_request_count
        self.render_pass_request_count = render_pass_request_count
        self.graphics_pipeline_request_count = graphics_pipeline_request_count
        self.compute_pipeline_request_count = compute_pipeline_request_count
        self.descriptor_set_layout_request_count = descriptor_set_layout_request_count
        self.sampler_request_count = sampler_request_count
        self.descriptor_pool_request_count = descriptor_pool_request_count
        self.descriptor_set_request_count = descriptor_set_request_count
        self.framebuffer_request_count = framebuffer_request_count
        self.command_pool_request_count = command_pool_request_count
        self.sampler_ycbcr_conversion_request_count = sampler_ycbcr_conversion_request_count
        self.surface_request_count = surface_request_count
        self.swapchain_request_count = swapchain_request_count
        self.display_mode_request_count = display_mode_request_count
        self.subpass_description_request_count = subpass_description_request_count
        self.attachment_description_request_count = attachment_description_request_count
        self.descriptor_set_layout_binding_request_count = descriptor_set_layout_binding_request_count
        self.descriptor_set_layout_binding_limit = descriptor_set_layout_binding_limit
        self.max_image_view_mip_levels = max_image_view_mip_levels
        self.max_image_view_array_layers = max_image_view_array_layers
        self.max_layered_image_view_mip_levels = max_layered_image_view_mip_levels
        self.max_occlusion_queries_per_pool = max_occlusion_queries_per_pool
        self.max_pipeline_statistics_queries_per_pool = max_pipeline_statistics_queries_per_pool
        self.max_timestamp_queries_per_pool = max_timestamp_queries_per_pool
        self.max_immutable_samplers_per_descriptor_set_layout = max_immutable_samplers_per_descriptor_set_layout


struct CommandPoolMemoryReservationCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var command_pool_reserved_size: DeviceSize
    var command_pool_max_command_buffers: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        command_pool_reserved_size: DeviceSize = zero_init[DeviceSize](),
        command_pool_max_command_buffers: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.COMMAND_POOL_MEMORY_RESERVATION_CREATE_INFO
        self.p_next = p_next
        self.command_pool_reserved_size = command_pool_reserved_size
        self.command_pool_max_command_buffers = command_pool_max_command_buffers


struct CommandPoolMemoryConsumption(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var command_pool_allocated: DeviceSize
    var command_pool_reserved_size: DeviceSize
    var command_buffer_allocated: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        command_pool_allocated: DeviceSize = zero_init[DeviceSize](),
        command_pool_reserved_size: DeviceSize = zero_init[DeviceSize](),
        command_buffer_allocated: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.COMMAND_POOL_MEMORY_CONSUMPTION
        self.p_next = p_next
        self.command_pool_allocated = command_pool_allocated
        self.command_pool_reserved_size = command_pool_reserved_size
        self.command_buffer_allocated = command_buffer_allocated


struct PhysicalDeviceVulkanSC10Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_atomic_instructions: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_atomic_instructions: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VULKAN_SC_1_0_FEATURES
        self.p_next = p_next
        self.shader_atomic_instructions = shader_atomic_instructions


struct PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var primitives_generated_query: Bool32
    var primitives_generated_query_with_rasterizer_discard: Bool32
    var primitives_generated_query_with_non_zero_streams: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        primitives_generated_query: Bool32 = zero_init[Bool32](),
        primitives_generated_query_with_rasterizer_discard: Bool32 = zero_init[Bool32](),
        primitives_generated_query_with_non_zero_streams: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT
        self.p_next = p_next
        self.primitives_generated_query = primitives_generated_query
        self.primitives_generated_query_with_rasterizer_discard = primitives_generated_query_with_rasterizer_discard
        self.primitives_generated_query_with_non_zero_streams = primitives_generated_query_with_non_zero_streams


struct PhysicalDeviceLegacyDitheringFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var legacy_dithering: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        legacy_dithering: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT
        self.p_next = p_next
        self.legacy_dithering = legacy_dithering


struct PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var multisampled_render_to_single_sampled: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        multisampled_render_to_single_sampled: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT
        self.p_next = p_next
        self.multisampled_render_to_single_sampled = multisampled_render_to_single_sampled


struct SurfaceCapabilitiesPresentId2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_id_2_supported: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_id_2_supported: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SURFACE_CAPABILITIES_PRESENT_ID_2_KHR
        self.p_next = p_next
        self.present_id_2_supported = present_id_2_supported


struct SurfaceCapabilitiesPresentWait2KHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_wait_2_supported: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_wait_2_supported: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SURFACE_CAPABILITIES_PRESENT_WAIT_2_KHR
        self.p_next = p_next
        self.present_wait_2_supported = present_wait_2_supported


struct SubpassResolvePerformanceQueryEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var optimal: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        optimal: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT
        self.p_next = p_next
        self.optimal = optimal


struct MultisampledRenderToSingleSampledInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var multisampled_render_to_single_sampled_enable: Bool32
    var rasterization_samples: SampleCountFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        multisampled_render_to_single_sampled_enable: Bool32 = zero_init[Bool32](),
        rasterization_samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
    ):
        self.s_type = StructureType.MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT
        self.p_next = p_next
        self.multisampled_render_to_single_sampled_enable = multisampled_render_to_single_sampled_enable
        self.rasterization_samples = rasterization_samples


struct PhysicalDevicePipelineProtectedAccessFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_protected_access: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_protected_access: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES
        self.p_next = p_next
        self.pipeline_protected_access = pipeline_protected_access


struct QueueFamilyVideoPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_codec_operations: VideoCodecOperationFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_codec_operations: VideoCodecOperationFlagsKHR = zero_init[VideoCodecOperationFlagsKHR](),
    ):
        self.s_type = StructureType.QUEUE_FAMILY_VIDEO_PROPERTIES_KHR
        self.p_next = p_next
        self.video_codec_operations = video_codec_operations


struct QueueFamilyQueryResultStatusPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var query_result_status_support: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        query_result_status_support: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.QUEUE_FAMILY_QUERY_RESULT_STATUS_PROPERTIES_KHR
        self.p_next = p_next
        self.query_result_status_support = query_result_status_support


struct VideoProfileListInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var profile_count: UInt32
    var p_profiles: Ptr[VideoProfileInfoKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        profile_count: UInt32 = zero_init[UInt32](),
        p_profiles: Ptr[VideoProfileInfoKHR] = zero_init[Ptr[VideoProfileInfoKHR]](),
    ):
        self.s_type = StructureType.VIDEO_PROFILE_LIST_INFO_KHR
        self.p_next = p_next
        self.profile_count = profile_count
        self.p_profiles = p_profiles


struct PhysicalDeviceVideoFormatInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_usage: ImageUsageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_usage: ImageUsageFlags = zero_init[ImageUsageFlags](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VIDEO_FORMAT_INFO_KHR
        self.p_next = p_next
        self.image_usage = image_usage


struct VideoFormatPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format: Format
    var component_mapping: ComponentMapping
    var image_create_flags: ImageCreateFlags
    var image_type: ImageType
    var image_tiling: ImageTiling
    var image_usage_flags: ImageUsageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format: Format = zero_init[Format](),
        component_mapping: ComponentMapping = zero_init[ComponentMapping](),
        image_create_flags: ImageCreateFlags = zero_init[ImageCreateFlags](),
        image_type: ImageType = zero_init[ImageType](),
        image_tiling: ImageTiling = zero_init[ImageTiling](),
        image_usage_flags: ImageUsageFlags = zero_init[ImageUsageFlags](),
    ):
        self.s_type = StructureType.VIDEO_FORMAT_PROPERTIES_KHR
        self.p_next = p_next
        self.format = format
        self.component_mapping = component_mapping
        self.image_create_flags = image_create_flags
        self.image_type = image_type
        self.image_tiling = image_tiling
        self.image_usage_flags = image_usage_flags


struct VideoEncodeQuantizationMapCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_quantization_map_extent: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_quantization_map_extent: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_QUANTIZATION_MAP_CAPABILITIES_KHR
        self.p_next = p_next
        self.max_quantization_map_extent = max_quantization_map_extent


struct VideoEncodeH264QuantizationMapCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_qp_delta: Int32
    var max_qp_delta: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_qp_delta: Int32 = zero_init[Int32](),
        max_qp_delta: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_QUANTIZATION_MAP_CAPABILITIES_KHR
        self.p_next = p_next
        self.min_qp_delta = min_qp_delta
        self.max_qp_delta = max_qp_delta


struct VideoEncodeH265QuantizationMapCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_qp_delta: Int32
    var max_qp_delta: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_qp_delta: Int32 = zero_init[Int32](),
        max_qp_delta: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_QUANTIZATION_MAP_CAPABILITIES_KHR
        self.p_next = p_next
        self.min_qp_delta = min_qp_delta
        self.max_qp_delta = max_qp_delta


struct VideoEncodeAV1QuantizationMapCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_q_index_delta: Int32
    var max_q_index_delta: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_q_index_delta: Int32 = zero_init[Int32](),
        max_q_index_delta: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_QUANTIZATION_MAP_CAPABILITIES_KHR
        self.p_next = p_next
        self.min_q_index_delta = min_q_index_delta
        self.max_q_index_delta = max_q_index_delta


struct VideoFormatQuantizationMapPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var quantization_map_texel_size: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        quantization_map_texel_size: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.VIDEO_FORMAT_QUANTIZATION_MAP_PROPERTIES_KHR
        self.p_next = p_next
        self.quantization_map_texel_size = quantization_map_texel_size


struct VideoFormatH265QuantizationMapPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var compatible_ctb_sizes: VideoEncodeH265CtbSizeFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        compatible_ctb_sizes: VideoEncodeH265CtbSizeFlagsKHR = zero_init[VideoEncodeH265CtbSizeFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_FORMAT_H265_QUANTIZATION_MAP_PROPERTIES_KHR
        self.p_next = p_next
        self.compatible_ctb_sizes = compatible_ctb_sizes


struct VideoFormatAV1QuantizationMapPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var compatible_superblock_sizes: VideoEncodeAV1SuperblockSizeFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        compatible_superblock_sizes: VideoEncodeAV1SuperblockSizeFlagsKHR = zero_init[VideoEncodeAV1SuperblockSizeFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_FORMAT_AV1_QUANTIZATION_MAP_PROPERTIES_KHR
        self.p_next = p_next
        self.compatible_superblock_sizes = compatible_superblock_sizes


struct VideoProfileInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_codec_operation: VideoCodecOperationFlagBitsKHR
    var chroma_subsampling: VideoChromaSubsamplingFlagsKHR
    var luma_bit_depth: VideoComponentBitDepthFlagsKHR
    var chroma_bit_depth: VideoComponentBitDepthFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_codec_operation: VideoCodecOperationFlagBitsKHR = zero_init[VideoCodecOperationFlagBitsKHR](),
        chroma_subsampling: VideoChromaSubsamplingFlagsKHR = zero_init[VideoChromaSubsamplingFlagsKHR](),
        luma_bit_depth: VideoComponentBitDepthFlagsKHR = zero_init[VideoComponentBitDepthFlagsKHR](),
        chroma_bit_depth: VideoComponentBitDepthFlagsKHR = zero_init[VideoComponentBitDepthFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_PROFILE_INFO_KHR
        self.p_next = p_next
        self.video_codec_operation = video_codec_operation
        self.chroma_subsampling = chroma_subsampling
        self.luma_bit_depth = luma_bit_depth
        self.chroma_bit_depth = chroma_bit_depth


struct VideoCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoCapabilityFlagsKHR
    var min_bitstream_buffer_offset_alignment: DeviceSize
    var min_bitstream_buffer_size_alignment: DeviceSize
    var picture_access_granularity: Extent2D
    var min_coded_extent: Extent2D
    var max_coded_extent: Extent2D
    var max_dpb_slots: UInt32
    var max_active_reference_pictures: UInt32
    var std_header_version: ExtensionProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoCapabilityFlagsKHR = zero_init[VideoCapabilityFlagsKHR](),
        min_bitstream_buffer_offset_alignment: DeviceSize = zero_init[DeviceSize](),
        min_bitstream_buffer_size_alignment: DeviceSize = zero_init[DeviceSize](),
        picture_access_granularity: Extent2D = zero_init[Extent2D](),
        min_coded_extent: Extent2D = zero_init[Extent2D](),
        max_coded_extent: Extent2D = zero_init[Extent2D](),
        max_dpb_slots: UInt32 = zero_init[UInt32](),
        max_active_reference_pictures: UInt32 = zero_init[UInt32](),
        std_header_version: ExtensionProperties = zero_init[ExtensionProperties](),
    ):
        self.s_type = StructureType.VIDEO_CAPABILITIES_KHR
        self.p_next = p_next
        self.flags = flags
        self.min_bitstream_buffer_offset_alignment = min_bitstream_buffer_offset_alignment
        self.min_bitstream_buffer_size_alignment = min_bitstream_buffer_size_alignment
        self.picture_access_granularity = picture_access_granularity
        self.min_coded_extent = min_coded_extent
        self.max_coded_extent = max_coded_extent
        self.max_dpb_slots = max_dpb_slots
        self.max_active_reference_pictures = max_active_reference_pictures
        self.std_header_version = std_header_version


struct VideoSessionMemoryRequirementsKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_bind_index: UInt32
    var memory_requirements: MemoryRequirements

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_bind_index: UInt32 = zero_init[UInt32](),
        memory_requirements: MemoryRequirements = zero_init[MemoryRequirements](),
    ):
        self.s_type = StructureType.VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR
        self.p_next = p_next
        self.memory_bind_index = memory_bind_index
        self.memory_requirements = memory_requirements


struct BindVideoSessionMemoryInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_bind_index: UInt32
    var memory: DeviceMemory
    var memory_offset: DeviceSize
    var memory_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_bind_index: UInt32 = zero_init[UInt32](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        memory_offset: DeviceSize = zero_init[DeviceSize](),
        memory_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.BIND_VIDEO_SESSION_MEMORY_INFO_KHR
        self.p_next = p_next
        self.memory_bind_index = memory_bind_index
        self.memory = memory
        self.memory_offset = memory_offset
        self.memory_size = memory_size


struct VideoPictureResourceInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var coded_offset: Offset2D
    var coded_extent: Extent2D
    var base_array_layer: UInt32
    var image_view_binding: ImageView

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        coded_offset: Offset2D = zero_init[Offset2D](),
        coded_extent: Extent2D = zero_init[Extent2D](),
        base_array_layer: UInt32 = zero_init[UInt32](),
        image_view_binding: ImageView = zero_init[ImageView](),
    ):
        self.s_type = StructureType.VIDEO_PICTURE_RESOURCE_INFO_KHR
        self.p_next = p_next
        self.coded_offset = coded_offset
        self.coded_extent = coded_extent
        self.base_array_layer = base_array_layer
        self.image_view_binding = image_view_binding


struct VideoReferenceSlotInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var slot_index: Int32
    var p_picture_resource: Ptr[VideoPictureResourceInfoKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        slot_index: Int32 = zero_init[Int32](),
        p_picture_resource: Ptr[VideoPictureResourceInfoKHR] = zero_init[Ptr[VideoPictureResourceInfoKHR]](),
    ):
        self.s_type = StructureType.VIDEO_REFERENCE_SLOT_INFO_KHR
        self.p_next = p_next
        self.slot_index = slot_index
        self.p_picture_resource = p_picture_resource


struct VideoDecodeCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoDecodeCapabilityFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoDecodeCapabilityFlagsKHR = zero_init[VideoDecodeCapabilityFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_CAPABILITIES_KHR
        self.p_next = p_next
        self.flags = flags


struct VideoDecodeUsageInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_usage_hints: VideoDecodeUsageFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_usage_hints: VideoDecodeUsageFlagsKHR = zero_init[VideoDecodeUsageFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_USAGE_INFO_KHR
        self.p_next = p_next
        self.video_usage_hints = video_usage_hints


struct VideoDecodeInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoDecodeFlagsKHR
    var src_buffer: Buffer
    var src_buffer_offset: DeviceSize
    var src_buffer_range: DeviceSize
    var dst_picture_resource: VideoPictureResourceInfoKHR
    var p_setup_reference_slot: Ptr[VideoReferenceSlotInfoKHR]
    var reference_slot_count: UInt32
    var p_reference_slots: Ptr[VideoReferenceSlotInfoKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoDecodeFlagsKHR = zero_init[VideoDecodeFlagsKHR](),
        src_buffer: Buffer = zero_init[Buffer](),
        src_buffer_offset: DeviceSize = zero_init[DeviceSize](),
        src_buffer_range: DeviceSize = zero_init[DeviceSize](),
        dst_picture_resource: VideoPictureResourceInfoKHR = zero_init[VideoPictureResourceInfoKHR](),
        p_setup_reference_slot: Ptr[VideoReferenceSlotInfoKHR] = zero_init[Ptr[VideoReferenceSlotInfoKHR]](),
        reference_slot_count: UInt32 = zero_init[UInt32](),
        p_reference_slots: Ptr[VideoReferenceSlotInfoKHR] = zero_init[Ptr[VideoReferenceSlotInfoKHR]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.src_buffer = src_buffer
        self.src_buffer_offset = src_buffer_offset
        self.src_buffer_range = src_buffer_range
        self.dst_picture_resource = dst_picture_resource
        self.p_setup_reference_slot = p_setup_reference_slot
        self.reference_slot_count = reference_slot_count
        self.p_reference_slots = p_reference_slots


struct PhysicalDeviceVideoMaintenance1FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_maintenance_1: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_maintenance_1: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR
        self.p_next = p_next
        self.video_maintenance_1 = video_maintenance_1


struct PhysicalDeviceVideoMaintenance2FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_maintenance_2: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_maintenance_2: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR
        self.p_next = p_next
        self.video_maintenance_2 = video_maintenance_2


struct VideoInlineQueryInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var query_pool: QueryPool
    var first_query: UInt32
    var query_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        query_pool: QueryPool = zero_init[QueryPool](),
        first_query: UInt32 = zero_init[UInt32](),
        query_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_INLINE_QUERY_INFO_KHR
        self.p_next = p_next
        self.query_pool = query_pool
        self.first_query = first_query
        self.query_count = query_count


struct VideoDecodeH264ProfileInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_profile_idc: StdVideoH264ProfileIdc
    var picture_layout: VideoDecodeH264PictureLayoutFlagBitsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_profile_idc: StdVideoH264ProfileIdc = zero_init[StdVideoH264ProfileIdc](),
        picture_layout: VideoDecodeH264PictureLayoutFlagBitsKHR = zero_init[VideoDecodeH264PictureLayoutFlagBitsKHR](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H264_PROFILE_INFO_KHR
        self.p_next = p_next
        self.std_profile_idc = std_profile_idc
        self.picture_layout = picture_layout


struct VideoDecodeH264CapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_level_idc: StdVideoH264LevelIdc
    var field_offset_granularity: Offset2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_level_idc: StdVideoH264LevelIdc = zero_init[StdVideoH264LevelIdc](),
        field_offset_granularity: Offset2D = zero_init[Offset2D](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H264_CAPABILITIES_KHR
        self.p_next = p_next
        self.max_level_idc = max_level_idc
        self.field_offset_granularity = field_offset_granularity


struct VideoDecodeH264SessionParametersAddInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_sps_count: UInt32
    var p_std_sp_ss: Ptr[StdVideoH264SequenceParameterSet]
    var std_pps_count: UInt32
    var p_std_pp_ss: Ptr[StdVideoH264PictureParameterSet]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_sps_count: UInt32 = zero_init[UInt32](),
        p_std_sp_ss: Ptr[StdVideoH264SequenceParameterSet] = zero_init[Ptr[StdVideoH264SequenceParameterSet]](),
        std_pps_count: UInt32 = zero_init[UInt32](),
        p_std_pp_ss: Ptr[StdVideoH264PictureParameterSet] = zero_init[Ptr[StdVideoH264PictureParameterSet]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR
        self.p_next = p_next
        self.std_sps_count = std_sps_count
        self.p_std_sp_ss = p_std_sp_ss
        self.std_pps_count = std_pps_count
        self.p_std_pp_ss = p_std_pp_ss


struct VideoDecodeH264SessionParametersCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_std_sps_count: UInt32
    var max_std_pps_count: UInt32
    var p_parameters_add_info: Ptr[VideoDecodeH264SessionParametersAddInfoKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_std_sps_count: UInt32 = zero_init[UInt32](),
        max_std_pps_count: UInt32 = zero_init[UInt32](),
        p_parameters_add_info: Ptr[VideoDecodeH264SessionParametersAddInfoKHR] = zero_init[Ptr[VideoDecodeH264SessionParametersAddInfoKHR]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR
        self.p_next = p_next
        self.max_std_sps_count = max_std_sps_count
        self.max_std_pps_count = max_std_pps_count
        self.p_parameters_add_info = p_parameters_add_info


struct VideoDecodeH264InlineSessionParametersInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_sps: Ptr[StdVideoH264SequenceParameterSet]
    var p_std_pps: Ptr[StdVideoH264PictureParameterSet]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_sps: Ptr[StdVideoH264SequenceParameterSet] = zero_init[Ptr[StdVideoH264SequenceParameterSet]](),
        p_std_pps: Ptr[StdVideoH264PictureParameterSet] = zero_init[Ptr[StdVideoH264PictureParameterSet]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H264_INLINE_SESSION_PARAMETERS_INFO_KHR
        self.p_next = p_next
        self.p_std_sps = p_std_sps
        self.p_std_pps = p_std_pps


struct VideoDecodeH264PictureInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_picture_info: Ptr[StdVideoDecodeH264PictureInfo]
    var slice_count: UInt32
    var p_slice_offsets: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_picture_info: Ptr[StdVideoDecodeH264PictureInfo] = zero_init[Ptr[StdVideoDecodeH264PictureInfo]](),
        slice_count: UInt32 = zero_init[UInt32](),
        p_slice_offsets: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H264_PICTURE_INFO_KHR
        self.p_next = p_next
        self.p_std_picture_info = p_std_picture_info
        self.slice_count = slice_count
        self.p_slice_offsets = p_slice_offsets


struct VideoDecodeH264DpbSlotInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_reference_info: Ptr[StdVideoDecodeH264ReferenceInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_reference_info: Ptr[StdVideoDecodeH264ReferenceInfo] = zero_init[Ptr[StdVideoDecodeH264ReferenceInfo]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H264_DPB_SLOT_INFO_KHR
        self.p_next = p_next
        self.p_std_reference_info = p_std_reference_info


struct VideoDecodeH265ProfileInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_profile_idc: StdVideoH265ProfileIdc

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_profile_idc: StdVideoH265ProfileIdc = zero_init[StdVideoH265ProfileIdc](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H265_PROFILE_INFO_KHR
        self.p_next = p_next
        self.std_profile_idc = std_profile_idc


struct VideoDecodeH265CapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_level_idc: StdVideoH265LevelIdc

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_level_idc: StdVideoH265LevelIdc = zero_init[StdVideoH265LevelIdc](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H265_CAPABILITIES_KHR
        self.p_next = p_next
        self.max_level_idc = max_level_idc


struct VideoDecodeH265SessionParametersAddInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_vps_count: UInt32
    var p_std_vp_ss: Ptr[StdVideoH265VideoParameterSet]
    var std_sps_count: UInt32
    var p_std_sp_ss: Ptr[StdVideoH265SequenceParameterSet]
    var std_pps_count: UInt32
    var p_std_pp_ss: Ptr[StdVideoH265PictureParameterSet]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_vps_count: UInt32 = zero_init[UInt32](),
        p_std_vp_ss: Ptr[StdVideoH265VideoParameterSet] = zero_init[Ptr[StdVideoH265VideoParameterSet]](),
        std_sps_count: UInt32 = zero_init[UInt32](),
        p_std_sp_ss: Ptr[StdVideoH265SequenceParameterSet] = zero_init[Ptr[StdVideoH265SequenceParameterSet]](),
        std_pps_count: UInt32 = zero_init[UInt32](),
        p_std_pp_ss: Ptr[StdVideoH265PictureParameterSet] = zero_init[Ptr[StdVideoH265PictureParameterSet]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR
        self.p_next = p_next
        self.std_vps_count = std_vps_count
        self.p_std_vp_ss = p_std_vp_ss
        self.std_sps_count = std_sps_count
        self.p_std_sp_ss = p_std_sp_ss
        self.std_pps_count = std_pps_count
        self.p_std_pp_ss = p_std_pp_ss


struct VideoDecodeH265SessionParametersCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_std_vps_count: UInt32
    var max_std_sps_count: UInt32
    var max_std_pps_count: UInt32
    var p_parameters_add_info: Ptr[VideoDecodeH265SessionParametersAddInfoKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_std_vps_count: UInt32 = zero_init[UInt32](),
        max_std_sps_count: UInt32 = zero_init[UInt32](),
        max_std_pps_count: UInt32 = zero_init[UInt32](),
        p_parameters_add_info: Ptr[VideoDecodeH265SessionParametersAddInfoKHR] = zero_init[Ptr[VideoDecodeH265SessionParametersAddInfoKHR]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR
        self.p_next = p_next
        self.max_std_vps_count = max_std_vps_count
        self.max_std_sps_count = max_std_sps_count
        self.max_std_pps_count = max_std_pps_count
        self.p_parameters_add_info = p_parameters_add_info


struct VideoDecodeH265InlineSessionParametersInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_vps: Ptr[StdVideoH265VideoParameterSet]
    var p_std_sps: Ptr[StdVideoH265SequenceParameterSet]
    var p_std_pps: Ptr[StdVideoH265PictureParameterSet]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_vps: Ptr[StdVideoH265VideoParameterSet] = zero_init[Ptr[StdVideoH265VideoParameterSet]](),
        p_std_sps: Ptr[StdVideoH265SequenceParameterSet] = zero_init[Ptr[StdVideoH265SequenceParameterSet]](),
        p_std_pps: Ptr[StdVideoH265PictureParameterSet] = zero_init[Ptr[StdVideoH265PictureParameterSet]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H265_INLINE_SESSION_PARAMETERS_INFO_KHR
        self.p_next = p_next
        self.p_std_vps = p_std_vps
        self.p_std_sps = p_std_sps
        self.p_std_pps = p_std_pps


struct VideoDecodeH265PictureInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_picture_info: Ptr[StdVideoDecodeH265PictureInfo]
    var slice_segment_count: UInt32
    var p_slice_segment_offsets: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_picture_info: Ptr[StdVideoDecodeH265PictureInfo] = zero_init[Ptr[StdVideoDecodeH265PictureInfo]](),
        slice_segment_count: UInt32 = zero_init[UInt32](),
        p_slice_segment_offsets: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H265_PICTURE_INFO_KHR
        self.p_next = p_next
        self.p_std_picture_info = p_std_picture_info
        self.slice_segment_count = slice_segment_count
        self.p_slice_segment_offsets = p_slice_segment_offsets


struct VideoDecodeH265DpbSlotInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_reference_info: Ptr[StdVideoDecodeH265ReferenceInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_reference_info: Ptr[StdVideoDecodeH265ReferenceInfo] = zero_init[Ptr[StdVideoDecodeH265ReferenceInfo]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_H265_DPB_SLOT_INFO_KHR
        self.p_next = p_next
        self.p_std_reference_info = p_std_reference_info


struct PhysicalDeviceVideoDecodeVP9FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_decode_vp9: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_decode_vp9: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VIDEO_DECODE_VP9_FEATURES_KHR
        self.p_next = p_next
        self.video_decode_vp9 = video_decode_vp9


struct VideoDecodeVP9ProfileInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_profile: StdVideoVP9Profile

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_profile: StdVideoVP9Profile = zero_init[StdVideoVP9Profile](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_VP9_PROFILE_INFO_KHR
        self.p_next = p_next
        self.std_profile = std_profile


struct VideoDecodeVP9CapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_level: StdVideoVP9Level

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_level: StdVideoVP9Level = zero_init[StdVideoVP9Level](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_VP9_CAPABILITIES_KHR
        self.p_next = p_next
        self.max_level = max_level


struct VideoDecodeVP9PictureInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_picture_info: Ptr[StdVideoDecodeVP9PictureInfo]
    var reference_name_slot_indices: InlineArray[Int32, Int(MAX_VIDEO_VP9_REFERENCES_PER_FRAME_KHR)]
    var uncompressed_header_offset: UInt32
    var compressed_header_offset: UInt32
    var tiles_offset: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_picture_info: Ptr[StdVideoDecodeVP9PictureInfo] = zero_init[Ptr[StdVideoDecodeVP9PictureInfo]](),
        reference_name_slot_indices: InlineArray[Int32, Int(MAX_VIDEO_VP9_REFERENCES_PER_FRAME_KHR)] = zero_init[InlineArray[Int32, Int(MAX_VIDEO_VP9_REFERENCES_PER_FRAME_KHR)]](),
        uncompressed_header_offset: UInt32 = zero_init[UInt32](),
        compressed_header_offset: UInt32 = zero_init[UInt32](),
        tiles_offset: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_VP9_PICTURE_INFO_KHR
        self.p_next = p_next
        self.p_std_picture_info = p_std_picture_info
        self.reference_name_slot_indices = reference_name_slot_indices
        self.uncompressed_header_offset = uncompressed_header_offset
        self.compressed_header_offset = compressed_header_offset
        self.tiles_offset = tiles_offset


struct VideoDecodeAV1ProfileInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_profile: StdVideoAV1Profile
    var film_grain_support: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_profile: StdVideoAV1Profile = zero_init[StdVideoAV1Profile](),
        film_grain_support: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_AV1_PROFILE_INFO_KHR
        self.p_next = p_next
        self.std_profile = std_profile
        self.film_grain_support = film_grain_support


struct VideoDecodeAV1CapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_level: StdVideoAV1Level

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_level: StdVideoAV1Level = zero_init[StdVideoAV1Level](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_AV1_CAPABILITIES_KHR
        self.p_next = p_next
        self.max_level = max_level


struct VideoDecodeAV1SessionParametersCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_sequence_header: Ptr[StdVideoAV1SequenceHeader]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_sequence_header: Ptr[StdVideoAV1SequenceHeader] = zero_init[Ptr[StdVideoAV1SequenceHeader]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR
        self.p_next = p_next
        self.p_std_sequence_header = p_std_sequence_header


struct VideoDecodeAV1InlineSessionParametersInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_sequence_header: Ptr[StdVideoAV1SequenceHeader]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_sequence_header: Ptr[StdVideoAV1SequenceHeader] = zero_init[Ptr[StdVideoAV1SequenceHeader]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_AV1_INLINE_SESSION_PARAMETERS_INFO_KHR
        self.p_next = p_next
        self.p_std_sequence_header = p_std_sequence_header


struct VideoDecodeAV1PictureInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_picture_info: Ptr[StdVideoDecodeAV1PictureInfo]
    var reference_name_slot_indices: InlineArray[Int32, Int(MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR)]
    var frame_header_offset: UInt32
    var tile_count: UInt32
    var p_tile_offsets: Ptr[UInt32]
    var p_tile_sizes: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_picture_info: Ptr[StdVideoDecodeAV1PictureInfo] = zero_init[Ptr[StdVideoDecodeAV1PictureInfo]](),
        reference_name_slot_indices: InlineArray[Int32, Int(MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR)] = zero_init[InlineArray[Int32, Int(MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR)]](),
        frame_header_offset: UInt32 = zero_init[UInt32](),
        tile_count: UInt32 = zero_init[UInt32](),
        p_tile_offsets: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        p_tile_sizes: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_AV1_PICTURE_INFO_KHR
        self.p_next = p_next
        self.p_std_picture_info = p_std_picture_info
        self.reference_name_slot_indices = reference_name_slot_indices
        self.frame_header_offset = frame_header_offset
        self.tile_count = tile_count
        self.p_tile_offsets = p_tile_offsets
        self.p_tile_sizes = p_tile_sizes


struct VideoDecodeAV1DpbSlotInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_reference_info: Ptr[StdVideoDecodeAV1ReferenceInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_reference_info: Ptr[StdVideoDecodeAV1ReferenceInfo] = zero_init[Ptr[StdVideoDecodeAV1ReferenceInfo]](),
    ):
        self.s_type = StructureType.VIDEO_DECODE_AV1_DPB_SLOT_INFO_KHR
        self.p_next = p_next
        self.p_std_reference_info = p_std_reference_info


struct VideoSessionCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var queue_family_index: UInt32
    var flags: VideoSessionCreateFlagsKHR
    var p_video_profile: Ptr[VideoProfileInfoKHR]
    var picture_format: Format
    var max_coded_extent: Extent2D
    var reference_picture_format: Format
    var max_dpb_slots: UInt32
    var max_active_reference_pictures: UInt32
    var p_std_header_version: Ptr[ExtensionProperties]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        queue_family_index: UInt32 = zero_init[UInt32](),
        flags: VideoSessionCreateFlagsKHR = zero_init[VideoSessionCreateFlagsKHR](),
        p_video_profile: Ptr[VideoProfileInfoKHR] = zero_init[Ptr[VideoProfileInfoKHR]](),
        picture_format: Format = zero_init[Format](),
        max_coded_extent: Extent2D = zero_init[Extent2D](),
        reference_picture_format: Format = zero_init[Format](),
        max_dpb_slots: UInt32 = zero_init[UInt32](),
        max_active_reference_pictures: UInt32 = zero_init[UInt32](),
        p_std_header_version: Ptr[ExtensionProperties] = zero_init[Ptr[ExtensionProperties]](),
    ):
        self.s_type = StructureType.VIDEO_SESSION_CREATE_INFO_KHR
        self.p_next = p_next
        self.queue_family_index = queue_family_index
        self.flags = flags
        self.p_video_profile = p_video_profile
        self.picture_format = picture_format
        self.max_coded_extent = max_coded_extent
        self.reference_picture_format = reference_picture_format
        self.max_dpb_slots = max_dpb_slots
        self.max_active_reference_pictures = max_active_reference_pictures
        self.p_std_header_version = p_std_header_version


struct VideoSessionParametersCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoSessionParametersCreateFlagsKHR
    var video_session_parameters_template: VideoSessionParametersKHR
    var video_session: VideoSessionKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoSessionParametersCreateFlagsKHR = zero_init[VideoSessionParametersCreateFlagsKHR](),
        video_session_parameters_template: VideoSessionParametersKHR = zero_init[VideoSessionParametersKHR](),
        video_session: VideoSessionKHR = zero_init[VideoSessionKHR](),
    ):
        self.s_type = StructureType.VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.video_session_parameters_template = video_session_parameters_template
        self.video_session = video_session


struct VideoSessionParametersUpdateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var update_sequence_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        update_sequence_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR
        self.p_next = p_next
        self.update_sequence_count = update_sequence_count


struct VideoEncodeSessionParametersGetInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_session_parameters: VideoSessionParametersKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_session_parameters: VideoSessionParametersKHR = zero_init[VideoSessionParametersKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_SESSION_PARAMETERS_GET_INFO_KHR
        self.p_next = p_next
        self.video_session_parameters = video_session_parameters


struct VideoEncodeSessionParametersFeedbackInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var has_overrides: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        has_overrides: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_SESSION_PARAMETERS_FEEDBACK_INFO_KHR
        self.p_next = p_next
        self.has_overrides = has_overrides


struct VideoBeginCodingInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoBeginCodingFlagsKHR
    var video_session: VideoSessionKHR
    var video_session_parameters: VideoSessionParametersKHR
    var reference_slot_count: UInt32
    var p_reference_slots: Ptr[VideoReferenceSlotInfoKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoBeginCodingFlagsKHR = zero_init[VideoBeginCodingFlagsKHR](),
        video_session: VideoSessionKHR = zero_init[VideoSessionKHR](),
        video_session_parameters: VideoSessionParametersKHR = zero_init[VideoSessionParametersKHR](),
        reference_slot_count: UInt32 = zero_init[UInt32](),
        p_reference_slots: Ptr[VideoReferenceSlotInfoKHR] = zero_init[Ptr[VideoReferenceSlotInfoKHR]](),
    ):
        self.s_type = StructureType.VIDEO_BEGIN_CODING_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.video_session = video_session
        self.video_session_parameters = video_session_parameters
        self.reference_slot_count = reference_slot_count
        self.p_reference_slots = p_reference_slots


struct VideoEndCodingInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEndCodingFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEndCodingFlagsKHR = zero_init[VideoEndCodingFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_END_CODING_INFO_KHR
        self.p_next = p_next
        self.flags = flags


struct VideoCodingControlInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoCodingControlFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoCodingControlFlagsKHR = zero_init[VideoCodingControlFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_CODING_CONTROL_INFO_KHR
        self.p_next = p_next
        self.flags = flags


struct VideoEncodeUsageInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_usage_hints: VideoEncodeUsageFlagsKHR
    var video_content_hints: VideoEncodeContentFlagsKHR
    var tuning_mode: VideoEncodeTuningModeKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_usage_hints: VideoEncodeUsageFlagsKHR = zero_init[VideoEncodeUsageFlagsKHR](),
        video_content_hints: VideoEncodeContentFlagsKHR = zero_init[VideoEncodeContentFlagsKHR](),
        tuning_mode: VideoEncodeTuningModeKHR = zero_init[VideoEncodeTuningModeKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_USAGE_INFO_KHR
        self.p_next = p_next
        self.video_usage_hints = video_usage_hints
        self.video_content_hints = video_content_hints
        self.tuning_mode = tuning_mode


struct VideoEncodeInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEncodeFlagsKHR
    var dst_buffer: Buffer
    var dst_buffer_offset: DeviceSize
    var dst_buffer_range: DeviceSize
    var src_picture_resource: VideoPictureResourceInfoKHR
    var p_setup_reference_slot: Ptr[VideoReferenceSlotInfoKHR]
    var reference_slot_count: UInt32
    var p_reference_slots: Ptr[VideoReferenceSlotInfoKHR]
    var preceding_externally_encoded_bytes: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEncodeFlagsKHR = zero_init[VideoEncodeFlagsKHR](),
        dst_buffer: Buffer = zero_init[Buffer](),
        dst_buffer_offset: DeviceSize = zero_init[DeviceSize](),
        dst_buffer_range: DeviceSize = zero_init[DeviceSize](),
        src_picture_resource: VideoPictureResourceInfoKHR = zero_init[VideoPictureResourceInfoKHR](),
        p_setup_reference_slot: Ptr[VideoReferenceSlotInfoKHR] = zero_init[Ptr[VideoReferenceSlotInfoKHR]](),
        reference_slot_count: UInt32 = zero_init[UInt32](),
        p_reference_slots: Ptr[VideoReferenceSlotInfoKHR] = zero_init[Ptr[VideoReferenceSlotInfoKHR]](),
        preceding_externally_encoded_bytes: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.dst_buffer = dst_buffer
        self.dst_buffer_offset = dst_buffer_offset
        self.dst_buffer_range = dst_buffer_range
        self.src_picture_resource = src_picture_resource
        self.p_setup_reference_slot = p_setup_reference_slot
        self.reference_slot_count = reference_slot_count
        self.p_reference_slots = p_reference_slots
        self.preceding_externally_encoded_bytes = preceding_externally_encoded_bytes


struct VideoEncodeQuantizationMapInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var quantization_map: ImageView
    var quantization_map_extent: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        quantization_map: ImageView = zero_init[ImageView](),
        quantization_map_extent: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_QUANTIZATION_MAP_INFO_KHR
        self.p_next = p_next
        self.quantization_map = quantization_map
        self.quantization_map_extent = quantization_map_extent


struct VideoEncodeQuantizationMapSessionParametersCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var quantization_map_texel_size: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        quantization_map_texel_size: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_QUANTIZATION_MAP_SESSION_PARAMETERS_CREATE_INFO_KHR
        self.p_next = p_next
        self.quantization_map_texel_size = quantization_map_texel_size


struct PhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_encode_quantization_map: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_encode_quantization_map: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR
        self.p_next = p_next
        self.video_encode_quantization_map = video_encode_quantization_map


struct QueryPoolVideoEncodeFeedbackCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var encode_feedback_flags: VideoEncodeFeedbackFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        encode_feedback_flags: VideoEncodeFeedbackFlagsKHR = zero_init[VideoEncodeFeedbackFlagsKHR](),
    ):
        self.s_type = StructureType.QUERY_POOL_VIDEO_ENCODE_FEEDBACK_CREATE_INFO_KHR
        self.p_next = p_next
        self.encode_feedback_flags = encode_feedback_flags


struct VideoEncodeQualityLevelInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var quality_level: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        quality_level: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR
        self.p_next = p_next
        self.quality_level = quality_level


struct PhysicalDeviceVideoEncodeQualityLevelInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_video_profile: Ptr[VideoProfileInfoKHR]
    var quality_level: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_video_profile: Ptr[VideoProfileInfoKHR] = zero_init[Ptr[VideoProfileInfoKHR]](),
        quality_level: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_INFO_KHR
        self.p_next = p_next
        self.p_video_profile = p_video_profile
        self.quality_level = quality_level


struct VideoEncodeQualityLevelPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var preferred_rate_control_mode: VideoEncodeRateControlModeFlagBitsKHR
    var preferred_rate_control_layer_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        preferred_rate_control_mode: VideoEncodeRateControlModeFlagBitsKHR = zero_init[VideoEncodeRateControlModeFlagBitsKHR](),
        preferred_rate_control_layer_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR
        self.p_next = p_next
        self.preferred_rate_control_mode = preferred_rate_control_mode
        self.preferred_rate_control_layer_count = preferred_rate_control_layer_count


struct VideoEncodeRateControlInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEncodeRateControlFlagsKHR
    var rate_control_mode: VideoEncodeRateControlModeFlagBitsKHR
    var layer_count: UInt32
    var p_layers: Ptr[VideoEncodeRateControlLayerInfoKHR]
    var virtual_buffer_size_in_ms: UInt32
    var initial_virtual_buffer_size_in_ms: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEncodeRateControlFlagsKHR = zero_init[VideoEncodeRateControlFlagsKHR](),
        rate_control_mode: VideoEncodeRateControlModeFlagBitsKHR = zero_init[VideoEncodeRateControlModeFlagBitsKHR](),
        layer_count: UInt32 = zero_init[UInt32](),
        p_layers: Ptr[VideoEncodeRateControlLayerInfoKHR] = zero_init[Ptr[VideoEncodeRateControlLayerInfoKHR]](),
        virtual_buffer_size_in_ms: UInt32 = zero_init[UInt32](),
        initial_virtual_buffer_size_in_ms: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_RATE_CONTROL_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.rate_control_mode = rate_control_mode
        self.layer_count = layer_count
        self.p_layers = p_layers
        self.virtual_buffer_size_in_ms = virtual_buffer_size_in_ms
        self.initial_virtual_buffer_size_in_ms = initial_virtual_buffer_size_in_ms


struct VideoEncodeRateControlLayerInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var average_bitrate: UInt64
    var max_bitrate: UInt64
    var frame_rate_numerator: UInt32
    var frame_rate_denominator: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        average_bitrate: UInt64 = zero_init[UInt64](),
        max_bitrate: UInt64 = zero_init[UInt64](),
        frame_rate_numerator: UInt32 = zero_init[UInt32](),
        frame_rate_denominator: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_RATE_CONTROL_LAYER_INFO_KHR
        self.p_next = p_next
        self.average_bitrate = average_bitrate
        self.max_bitrate = max_bitrate
        self.frame_rate_numerator = frame_rate_numerator
        self.frame_rate_denominator = frame_rate_denominator


struct VideoEncodeCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEncodeCapabilityFlagsKHR
    var rate_control_modes: VideoEncodeRateControlModeFlagsKHR
    var max_rate_control_layers: UInt32
    var max_bitrate: UInt64
    var max_quality_levels: UInt32
    var encode_input_picture_granularity: Extent2D
    var supported_encode_feedback_flags: VideoEncodeFeedbackFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEncodeCapabilityFlagsKHR = zero_init[VideoEncodeCapabilityFlagsKHR](),
        rate_control_modes: VideoEncodeRateControlModeFlagsKHR = zero_init[VideoEncodeRateControlModeFlagsKHR](),
        max_rate_control_layers: UInt32 = zero_init[UInt32](),
        max_bitrate: UInt64 = zero_init[UInt64](),
        max_quality_levels: UInt32 = zero_init[UInt32](),
        encode_input_picture_granularity: Extent2D = zero_init[Extent2D](),
        supported_encode_feedback_flags: VideoEncodeFeedbackFlagsKHR = zero_init[VideoEncodeFeedbackFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_CAPABILITIES_KHR
        self.p_next = p_next
        self.flags = flags
        self.rate_control_modes = rate_control_modes
        self.max_rate_control_layers = max_rate_control_layers
        self.max_bitrate = max_bitrate
        self.max_quality_levels = max_quality_levels
        self.encode_input_picture_granularity = encode_input_picture_granularity
        self.supported_encode_feedback_flags = supported_encode_feedback_flags


struct VideoEncodeH264CapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEncodeH264CapabilityFlagsKHR
    var max_level_idc: StdVideoH264LevelIdc
    var max_slice_count: UInt32
    var max_p_picture_l0_reference_count: UInt32
    var max_b_picture_l0_reference_count: UInt32
    var max_l1_reference_count: UInt32
    var max_temporal_layer_count: UInt32
    var expect_dyadic_temporal_layer_pattern: Bool32
    var min_qp: Int32
    var max_qp: Int32
    var prefers_gop_remaining_frames: Bool32
    var requires_gop_remaining_frames: Bool32
    var std_syntax_flags: VideoEncodeH264StdFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEncodeH264CapabilityFlagsKHR = zero_init[VideoEncodeH264CapabilityFlagsKHR](),
        max_level_idc: StdVideoH264LevelIdc = zero_init[StdVideoH264LevelIdc](),
        max_slice_count: UInt32 = zero_init[UInt32](),
        max_p_picture_l0_reference_count: UInt32 = zero_init[UInt32](),
        max_b_picture_l0_reference_count: UInt32 = zero_init[UInt32](),
        max_l1_reference_count: UInt32 = zero_init[UInt32](),
        max_temporal_layer_count: UInt32 = zero_init[UInt32](),
        expect_dyadic_temporal_layer_pattern: Bool32 = zero_init[Bool32](),
        min_qp: Int32 = zero_init[Int32](),
        max_qp: Int32 = zero_init[Int32](),
        prefers_gop_remaining_frames: Bool32 = zero_init[Bool32](),
        requires_gop_remaining_frames: Bool32 = zero_init[Bool32](),
        std_syntax_flags: VideoEncodeH264StdFlagsKHR = zero_init[VideoEncodeH264StdFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_CAPABILITIES_KHR
        self.p_next = p_next
        self.flags = flags
        self.max_level_idc = max_level_idc
        self.max_slice_count = max_slice_count
        self.max_p_picture_l0_reference_count = max_p_picture_l0_reference_count
        self.max_b_picture_l0_reference_count = max_b_picture_l0_reference_count
        self.max_l1_reference_count = max_l1_reference_count
        self.max_temporal_layer_count = max_temporal_layer_count
        self.expect_dyadic_temporal_layer_pattern = expect_dyadic_temporal_layer_pattern
        self.min_qp = min_qp
        self.max_qp = max_qp
        self.prefers_gop_remaining_frames = prefers_gop_remaining_frames
        self.requires_gop_remaining_frames = requires_gop_remaining_frames
        self.std_syntax_flags = std_syntax_flags


struct VideoEncodeH264QualityLevelPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var preferred_rate_control_flags: VideoEncodeH264RateControlFlagsKHR
    var preferred_gop_frame_count: UInt32
    var preferred_idr_period: UInt32
    var preferred_consecutive_b_frame_count: UInt32
    var preferred_temporal_layer_count: UInt32
    var preferred_constant_qp: VideoEncodeH264QpKHR
    var preferred_max_l0_reference_count: UInt32
    var preferred_max_l1_reference_count: UInt32
    var preferred_std_entropy_coding_mode_flag: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        preferred_rate_control_flags: VideoEncodeH264RateControlFlagsKHR = zero_init[VideoEncodeH264RateControlFlagsKHR](),
        preferred_gop_frame_count: UInt32 = zero_init[UInt32](),
        preferred_idr_period: UInt32 = zero_init[UInt32](),
        preferred_consecutive_b_frame_count: UInt32 = zero_init[UInt32](),
        preferred_temporal_layer_count: UInt32 = zero_init[UInt32](),
        preferred_constant_qp: VideoEncodeH264QpKHR = zero_init[VideoEncodeH264QpKHR](),
        preferred_max_l0_reference_count: UInt32 = zero_init[UInt32](),
        preferred_max_l1_reference_count: UInt32 = zero_init[UInt32](),
        preferred_std_entropy_coding_mode_flag: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_QUALITY_LEVEL_PROPERTIES_KHR
        self.p_next = p_next
        self.preferred_rate_control_flags = preferred_rate_control_flags
        self.preferred_gop_frame_count = preferred_gop_frame_count
        self.preferred_idr_period = preferred_idr_period
        self.preferred_consecutive_b_frame_count = preferred_consecutive_b_frame_count
        self.preferred_temporal_layer_count = preferred_temporal_layer_count
        self.preferred_constant_qp = preferred_constant_qp
        self.preferred_max_l0_reference_count = preferred_max_l0_reference_count
        self.preferred_max_l1_reference_count = preferred_max_l1_reference_count
        self.preferred_std_entropy_coding_mode_flag = preferred_std_entropy_coding_mode_flag


struct VideoEncodeH264SessionCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_max_level_idc: Bool32
    var max_level_idc: StdVideoH264LevelIdc

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_max_level_idc: Bool32 = zero_init[Bool32](),
        max_level_idc: StdVideoH264LevelIdc = zero_init[StdVideoH264LevelIdc](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_SESSION_CREATE_INFO_KHR
        self.p_next = p_next
        self.use_max_level_idc = use_max_level_idc
        self.max_level_idc = max_level_idc


struct VideoEncodeH264SessionParametersAddInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_sps_count: UInt32
    var p_std_sp_ss: Ptr[StdVideoH264SequenceParameterSet]
    var std_pps_count: UInt32
    var p_std_pp_ss: Ptr[StdVideoH264PictureParameterSet]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_sps_count: UInt32 = zero_init[UInt32](),
        p_std_sp_ss: Ptr[StdVideoH264SequenceParameterSet] = zero_init[Ptr[StdVideoH264SequenceParameterSet]](),
        std_pps_count: UInt32 = zero_init[UInt32](),
        p_std_pp_ss: Ptr[StdVideoH264PictureParameterSet] = zero_init[Ptr[StdVideoH264PictureParameterSet]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_SESSION_PARAMETERS_ADD_INFO_KHR
        self.p_next = p_next
        self.std_sps_count = std_sps_count
        self.p_std_sp_ss = p_std_sp_ss
        self.std_pps_count = std_pps_count
        self.p_std_pp_ss = p_std_pp_ss


struct VideoEncodeH264SessionParametersCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_std_sps_count: UInt32
    var max_std_pps_count: UInt32
    var p_parameters_add_info: Ptr[VideoEncodeH264SessionParametersAddInfoKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_std_sps_count: UInt32 = zero_init[UInt32](),
        max_std_pps_count: UInt32 = zero_init[UInt32](),
        p_parameters_add_info: Ptr[VideoEncodeH264SessionParametersAddInfoKHR] = zero_init[Ptr[VideoEncodeH264SessionParametersAddInfoKHR]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_SESSION_PARAMETERS_CREATE_INFO_KHR
        self.p_next = p_next
        self.max_std_sps_count = max_std_sps_count
        self.max_std_pps_count = max_std_pps_count
        self.p_parameters_add_info = p_parameters_add_info


struct VideoEncodeH264SessionParametersGetInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var write_std_sps: Bool32
    var write_std_pps: Bool32
    var std_sps_id: UInt32
    var std_pps_id: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        write_std_sps: Bool32 = zero_init[Bool32](),
        write_std_pps: Bool32 = zero_init[Bool32](),
        std_sps_id: UInt32 = zero_init[UInt32](),
        std_pps_id: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_SESSION_PARAMETERS_GET_INFO_KHR
        self.p_next = p_next
        self.write_std_sps = write_std_sps
        self.write_std_pps = write_std_pps
        self.std_sps_id = std_sps_id
        self.std_pps_id = std_pps_id


struct VideoEncodeH264SessionParametersFeedbackInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var has_std_sps_overrides: Bool32
    var has_std_pps_overrides: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        has_std_sps_overrides: Bool32 = zero_init[Bool32](),
        has_std_pps_overrides: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_SESSION_PARAMETERS_FEEDBACK_INFO_KHR
        self.p_next = p_next
        self.has_std_sps_overrides = has_std_sps_overrides
        self.has_std_pps_overrides = has_std_pps_overrides


struct VideoEncodeH264DpbSlotInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_reference_info: Ptr[StdVideoEncodeH264ReferenceInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_reference_info: Ptr[StdVideoEncodeH264ReferenceInfo] = zero_init[Ptr[StdVideoEncodeH264ReferenceInfo]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_DPB_SLOT_INFO_KHR
        self.p_next = p_next
        self.p_std_reference_info = p_std_reference_info


struct VideoEncodeH264PictureInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var nalu_slice_entry_count: UInt32
    var p_nalu_slice_entries: Ptr[VideoEncodeH264NaluSliceInfoKHR]
    var p_std_picture_info: Ptr[StdVideoEncodeH264PictureInfo]
    var generate_prefix_nalu: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        nalu_slice_entry_count: UInt32 = zero_init[UInt32](),
        p_nalu_slice_entries: Ptr[VideoEncodeH264NaluSliceInfoKHR] = zero_init[Ptr[VideoEncodeH264NaluSliceInfoKHR]](),
        p_std_picture_info: Ptr[StdVideoEncodeH264PictureInfo] = zero_init[Ptr[StdVideoEncodeH264PictureInfo]](),
        generate_prefix_nalu: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_PICTURE_INFO_KHR
        self.p_next = p_next
        self.nalu_slice_entry_count = nalu_slice_entry_count
        self.p_nalu_slice_entries = p_nalu_slice_entries
        self.p_std_picture_info = p_std_picture_info
        self.generate_prefix_nalu = generate_prefix_nalu


struct VideoEncodeH264ProfileInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_profile_idc: StdVideoH264ProfileIdc

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_profile_idc: StdVideoH264ProfileIdc = zero_init[StdVideoH264ProfileIdc](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_PROFILE_INFO_KHR
        self.p_next = p_next
        self.std_profile_idc = std_profile_idc


struct VideoEncodeH264NaluSliceInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var constant_qp: Int32
    var p_std_slice_header: Ptr[StdVideoEncodeH264SliceHeader]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        constant_qp: Int32 = zero_init[Int32](),
        p_std_slice_header: Ptr[StdVideoEncodeH264SliceHeader] = zero_init[Ptr[StdVideoEncodeH264SliceHeader]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_NALU_SLICE_INFO_KHR
        self.p_next = p_next
        self.constant_qp = constant_qp
        self.p_std_slice_header = p_std_slice_header


struct VideoEncodeH264RateControlInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEncodeH264RateControlFlagsKHR
    var gop_frame_count: UInt32
    var idr_period: UInt32
    var consecutive_b_frame_count: UInt32
    var temporal_layer_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEncodeH264RateControlFlagsKHR = zero_init[VideoEncodeH264RateControlFlagsKHR](),
        gop_frame_count: UInt32 = zero_init[UInt32](),
        idr_period: UInt32 = zero_init[UInt32](),
        consecutive_b_frame_count: UInt32 = zero_init[UInt32](),
        temporal_layer_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_RATE_CONTROL_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.gop_frame_count = gop_frame_count
        self.idr_period = idr_period
        self.consecutive_b_frame_count = consecutive_b_frame_count
        self.temporal_layer_count = temporal_layer_count


struct VideoEncodeH264QpKHR(ImplicitlyCopyable, Movable):
    var qp_i: Int32
    var qp_p: Int32
    var qp_b: Int32

    fn __init__(
        out self,
        qp_i: Int32 = zero_init[Int32](),
        qp_p: Int32 = zero_init[Int32](),
        qp_b: Int32 = zero_init[Int32](),
    ):
        self.qp_i = qp_i
        self.qp_p = qp_p
        self.qp_b = qp_b


struct VideoEncodeH264FrameSizeKHR(ImplicitlyCopyable, Movable):
    var frame_i_size: UInt32
    var frame_p_size: UInt32
    var frame_b_size: UInt32

    fn __init__(
        out self,
        frame_i_size: UInt32 = zero_init[UInt32](),
        frame_p_size: UInt32 = zero_init[UInt32](),
        frame_b_size: UInt32 = zero_init[UInt32](),
    ):
        self.frame_i_size = frame_i_size
        self.frame_p_size = frame_p_size
        self.frame_b_size = frame_b_size


struct VideoEncodeH264GopRemainingFrameInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_gop_remaining_frames: Bool32
    var gop_remaining_i: UInt32
    var gop_remaining_p: UInt32
    var gop_remaining_b: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_gop_remaining_frames: Bool32 = zero_init[Bool32](),
        gop_remaining_i: UInt32 = zero_init[UInt32](),
        gop_remaining_p: UInt32 = zero_init[UInt32](),
        gop_remaining_b: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_GOP_REMAINING_FRAME_INFO_KHR
        self.p_next = p_next
        self.use_gop_remaining_frames = use_gop_remaining_frames
        self.gop_remaining_i = gop_remaining_i
        self.gop_remaining_p = gop_remaining_p
        self.gop_remaining_b = gop_remaining_b


struct VideoEncodeH264RateControlLayerInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_min_qp: Bool32
    var min_qp: VideoEncodeH264QpKHR
    var use_max_qp: Bool32
    var max_qp: VideoEncodeH264QpKHR
    var use_max_frame_size: Bool32
    var max_frame_size: VideoEncodeH264FrameSizeKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_min_qp: Bool32 = zero_init[Bool32](),
        min_qp: VideoEncodeH264QpKHR = zero_init[VideoEncodeH264QpKHR](),
        use_max_qp: Bool32 = zero_init[Bool32](),
        max_qp: VideoEncodeH264QpKHR = zero_init[VideoEncodeH264QpKHR](),
        use_max_frame_size: Bool32 = zero_init[Bool32](),
        max_frame_size: VideoEncodeH264FrameSizeKHR = zero_init[VideoEncodeH264FrameSizeKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H264_RATE_CONTROL_LAYER_INFO_KHR
        self.p_next = p_next
        self.use_min_qp = use_min_qp
        self.min_qp = min_qp
        self.use_max_qp = use_max_qp
        self.max_qp = max_qp
        self.use_max_frame_size = use_max_frame_size
        self.max_frame_size = max_frame_size


struct VideoEncodeH265CapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEncodeH265CapabilityFlagsKHR
    var max_level_idc: StdVideoH265LevelIdc
    var max_slice_segment_count: UInt32
    var max_tiles: Extent2D
    var ctb_sizes: VideoEncodeH265CtbSizeFlagsKHR
    var transform_block_sizes: VideoEncodeH265TransformBlockSizeFlagsKHR
    var max_p_picture_l0_reference_count: UInt32
    var max_b_picture_l0_reference_count: UInt32
    var max_l1_reference_count: UInt32
    var max_sub_layer_count: UInt32
    var expect_dyadic_temporal_sub_layer_pattern: Bool32
    var min_qp: Int32
    var max_qp: Int32
    var prefers_gop_remaining_frames: Bool32
    var requires_gop_remaining_frames: Bool32
    var std_syntax_flags: VideoEncodeH265StdFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEncodeH265CapabilityFlagsKHR = zero_init[VideoEncodeH265CapabilityFlagsKHR](),
        max_level_idc: StdVideoH265LevelIdc = zero_init[StdVideoH265LevelIdc](),
        max_slice_segment_count: UInt32 = zero_init[UInt32](),
        max_tiles: Extent2D = zero_init[Extent2D](),
        ctb_sizes: VideoEncodeH265CtbSizeFlagsKHR = zero_init[VideoEncodeH265CtbSizeFlagsKHR](),
        transform_block_sizes: VideoEncodeH265TransformBlockSizeFlagsKHR = zero_init[VideoEncodeH265TransformBlockSizeFlagsKHR](),
        max_p_picture_l0_reference_count: UInt32 = zero_init[UInt32](),
        max_b_picture_l0_reference_count: UInt32 = zero_init[UInt32](),
        max_l1_reference_count: UInt32 = zero_init[UInt32](),
        max_sub_layer_count: UInt32 = zero_init[UInt32](),
        expect_dyadic_temporal_sub_layer_pattern: Bool32 = zero_init[Bool32](),
        min_qp: Int32 = zero_init[Int32](),
        max_qp: Int32 = zero_init[Int32](),
        prefers_gop_remaining_frames: Bool32 = zero_init[Bool32](),
        requires_gop_remaining_frames: Bool32 = zero_init[Bool32](),
        std_syntax_flags: VideoEncodeH265StdFlagsKHR = zero_init[VideoEncodeH265StdFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_CAPABILITIES_KHR
        self.p_next = p_next
        self.flags = flags
        self.max_level_idc = max_level_idc
        self.max_slice_segment_count = max_slice_segment_count
        self.max_tiles = max_tiles
        self.ctb_sizes = ctb_sizes
        self.transform_block_sizes = transform_block_sizes
        self.max_p_picture_l0_reference_count = max_p_picture_l0_reference_count
        self.max_b_picture_l0_reference_count = max_b_picture_l0_reference_count
        self.max_l1_reference_count = max_l1_reference_count
        self.max_sub_layer_count = max_sub_layer_count
        self.expect_dyadic_temporal_sub_layer_pattern = expect_dyadic_temporal_sub_layer_pattern
        self.min_qp = min_qp
        self.max_qp = max_qp
        self.prefers_gop_remaining_frames = prefers_gop_remaining_frames
        self.requires_gop_remaining_frames = requires_gop_remaining_frames
        self.std_syntax_flags = std_syntax_flags


struct VideoEncodeH265QualityLevelPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var preferred_rate_control_flags: VideoEncodeH265RateControlFlagsKHR
    var preferred_gop_frame_count: UInt32
    var preferred_idr_period: UInt32
    var preferred_consecutive_b_frame_count: UInt32
    var preferred_sub_layer_count: UInt32
    var preferred_constant_qp: VideoEncodeH265QpKHR
    var preferred_max_l0_reference_count: UInt32
    var preferred_max_l1_reference_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        preferred_rate_control_flags: VideoEncodeH265RateControlFlagsKHR = zero_init[VideoEncodeH265RateControlFlagsKHR](),
        preferred_gop_frame_count: UInt32 = zero_init[UInt32](),
        preferred_idr_period: UInt32 = zero_init[UInt32](),
        preferred_consecutive_b_frame_count: UInt32 = zero_init[UInt32](),
        preferred_sub_layer_count: UInt32 = zero_init[UInt32](),
        preferred_constant_qp: VideoEncodeH265QpKHR = zero_init[VideoEncodeH265QpKHR](),
        preferred_max_l0_reference_count: UInt32 = zero_init[UInt32](),
        preferred_max_l1_reference_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_QUALITY_LEVEL_PROPERTIES_KHR
        self.p_next = p_next
        self.preferred_rate_control_flags = preferred_rate_control_flags
        self.preferred_gop_frame_count = preferred_gop_frame_count
        self.preferred_idr_period = preferred_idr_period
        self.preferred_consecutive_b_frame_count = preferred_consecutive_b_frame_count
        self.preferred_sub_layer_count = preferred_sub_layer_count
        self.preferred_constant_qp = preferred_constant_qp
        self.preferred_max_l0_reference_count = preferred_max_l0_reference_count
        self.preferred_max_l1_reference_count = preferred_max_l1_reference_count


struct VideoEncodeH265SessionCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_max_level_idc: Bool32
    var max_level_idc: StdVideoH265LevelIdc

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_max_level_idc: Bool32 = zero_init[Bool32](),
        max_level_idc: StdVideoH265LevelIdc = zero_init[StdVideoH265LevelIdc](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_SESSION_CREATE_INFO_KHR
        self.p_next = p_next
        self.use_max_level_idc = use_max_level_idc
        self.max_level_idc = max_level_idc


struct VideoEncodeH265SessionParametersAddInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_vps_count: UInt32
    var p_std_vp_ss: Ptr[StdVideoH265VideoParameterSet]
    var std_sps_count: UInt32
    var p_std_sp_ss: Ptr[StdVideoH265SequenceParameterSet]
    var std_pps_count: UInt32
    var p_std_pp_ss: Ptr[StdVideoH265PictureParameterSet]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_vps_count: UInt32 = zero_init[UInt32](),
        p_std_vp_ss: Ptr[StdVideoH265VideoParameterSet] = zero_init[Ptr[StdVideoH265VideoParameterSet]](),
        std_sps_count: UInt32 = zero_init[UInt32](),
        p_std_sp_ss: Ptr[StdVideoH265SequenceParameterSet] = zero_init[Ptr[StdVideoH265SequenceParameterSet]](),
        std_pps_count: UInt32 = zero_init[UInt32](),
        p_std_pp_ss: Ptr[StdVideoH265PictureParameterSet] = zero_init[Ptr[StdVideoH265PictureParameterSet]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_SESSION_PARAMETERS_ADD_INFO_KHR
        self.p_next = p_next
        self.std_vps_count = std_vps_count
        self.p_std_vp_ss = p_std_vp_ss
        self.std_sps_count = std_sps_count
        self.p_std_sp_ss = p_std_sp_ss
        self.std_pps_count = std_pps_count
        self.p_std_pp_ss = p_std_pp_ss


struct VideoEncodeH265SessionParametersCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_std_vps_count: UInt32
    var max_std_sps_count: UInt32
    var max_std_pps_count: UInt32
    var p_parameters_add_info: Ptr[VideoEncodeH265SessionParametersAddInfoKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_std_vps_count: UInt32 = zero_init[UInt32](),
        max_std_sps_count: UInt32 = zero_init[UInt32](),
        max_std_pps_count: UInt32 = zero_init[UInt32](),
        p_parameters_add_info: Ptr[VideoEncodeH265SessionParametersAddInfoKHR] = zero_init[Ptr[VideoEncodeH265SessionParametersAddInfoKHR]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_SESSION_PARAMETERS_CREATE_INFO_KHR
        self.p_next = p_next
        self.max_std_vps_count = max_std_vps_count
        self.max_std_sps_count = max_std_sps_count
        self.max_std_pps_count = max_std_pps_count
        self.p_parameters_add_info = p_parameters_add_info


struct VideoEncodeH265SessionParametersGetInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var write_std_vps: Bool32
    var write_std_sps: Bool32
    var write_std_pps: Bool32
    var std_vps_id: UInt32
    var std_sps_id: UInt32
    var std_pps_id: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        write_std_vps: Bool32 = zero_init[Bool32](),
        write_std_sps: Bool32 = zero_init[Bool32](),
        write_std_pps: Bool32 = zero_init[Bool32](),
        std_vps_id: UInt32 = zero_init[UInt32](),
        std_sps_id: UInt32 = zero_init[UInt32](),
        std_pps_id: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_SESSION_PARAMETERS_GET_INFO_KHR
        self.p_next = p_next
        self.write_std_vps = write_std_vps
        self.write_std_sps = write_std_sps
        self.write_std_pps = write_std_pps
        self.std_vps_id = std_vps_id
        self.std_sps_id = std_sps_id
        self.std_pps_id = std_pps_id


struct VideoEncodeH265SessionParametersFeedbackInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var has_std_vps_overrides: Bool32
    var has_std_sps_overrides: Bool32
    var has_std_pps_overrides: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        has_std_vps_overrides: Bool32 = zero_init[Bool32](),
        has_std_sps_overrides: Bool32 = zero_init[Bool32](),
        has_std_pps_overrides: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_SESSION_PARAMETERS_FEEDBACK_INFO_KHR
        self.p_next = p_next
        self.has_std_vps_overrides = has_std_vps_overrides
        self.has_std_sps_overrides = has_std_sps_overrides
        self.has_std_pps_overrides = has_std_pps_overrides


struct VideoEncodeH265PictureInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var nalu_slice_segment_entry_count: UInt32
    var p_nalu_slice_segment_entries: Ptr[VideoEncodeH265NaluSliceSegmentInfoKHR]
    var p_std_picture_info: Ptr[StdVideoEncodeH265PictureInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        nalu_slice_segment_entry_count: UInt32 = zero_init[UInt32](),
        p_nalu_slice_segment_entries: Ptr[VideoEncodeH265NaluSliceSegmentInfoKHR] = zero_init[Ptr[VideoEncodeH265NaluSliceSegmentInfoKHR]](),
        p_std_picture_info: Ptr[StdVideoEncodeH265PictureInfo] = zero_init[Ptr[StdVideoEncodeH265PictureInfo]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_PICTURE_INFO_KHR
        self.p_next = p_next
        self.nalu_slice_segment_entry_count = nalu_slice_segment_entry_count
        self.p_nalu_slice_segment_entries = p_nalu_slice_segment_entries
        self.p_std_picture_info = p_std_picture_info


struct VideoEncodeH265NaluSliceSegmentInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var constant_qp: Int32
    var p_std_slice_segment_header: Ptr[StdVideoEncodeH265SliceSegmentHeader]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        constant_qp: Int32 = zero_init[Int32](),
        p_std_slice_segment_header: Ptr[StdVideoEncodeH265SliceSegmentHeader] = zero_init[Ptr[StdVideoEncodeH265SliceSegmentHeader]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_NALU_SLICE_SEGMENT_INFO_KHR
        self.p_next = p_next
        self.constant_qp = constant_qp
        self.p_std_slice_segment_header = p_std_slice_segment_header


struct VideoEncodeH265RateControlInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEncodeH265RateControlFlagsKHR
    var gop_frame_count: UInt32
    var idr_period: UInt32
    var consecutive_b_frame_count: UInt32
    var sub_layer_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEncodeH265RateControlFlagsKHR = zero_init[VideoEncodeH265RateControlFlagsKHR](),
        gop_frame_count: UInt32 = zero_init[UInt32](),
        idr_period: UInt32 = zero_init[UInt32](),
        consecutive_b_frame_count: UInt32 = zero_init[UInt32](),
        sub_layer_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_RATE_CONTROL_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.gop_frame_count = gop_frame_count
        self.idr_period = idr_period
        self.consecutive_b_frame_count = consecutive_b_frame_count
        self.sub_layer_count = sub_layer_count


struct VideoEncodeH265QpKHR(ImplicitlyCopyable, Movable):
    var qp_i: Int32
    var qp_p: Int32
    var qp_b: Int32

    fn __init__(
        out self,
        qp_i: Int32 = zero_init[Int32](),
        qp_p: Int32 = zero_init[Int32](),
        qp_b: Int32 = zero_init[Int32](),
    ):
        self.qp_i = qp_i
        self.qp_p = qp_p
        self.qp_b = qp_b


struct VideoEncodeH265FrameSizeKHR(ImplicitlyCopyable, Movable):
    var frame_i_size: UInt32
    var frame_p_size: UInt32
    var frame_b_size: UInt32

    fn __init__(
        out self,
        frame_i_size: UInt32 = zero_init[UInt32](),
        frame_p_size: UInt32 = zero_init[UInt32](),
        frame_b_size: UInt32 = zero_init[UInt32](),
    ):
        self.frame_i_size = frame_i_size
        self.frame_p_size = frame_p_size
        self.frame_b_size = frame_b_size


struct VideoEncodeH265GopRemainingFrameInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_gop_remaining_frames: Bool32
    var gop_remaining_i: UInt32
    var gop_remaining_p: UInt32
    var gop_remaining_b: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_gop_remaining_frames: Bool32 = zero_init[Bool32](),
        gop_remaining_i: UInt32 = zero_init[UInt32](),
        gop_remaining_p: UInt32 = zero_init[UInt32](),
        gop_remaining_b: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_GOP_REMAINING_FRAME_INFO_KHR
        self.p_next = p_next
        self.use_gop_remaining_frames = use_gop_remaining_frames
        self.gop_remaining_i = gop_remaining_i
        self.gop_remaining_p = gop_remaining_p
        self.gop_remaining_b = gop_remaining_b


struct VideoEncodeH265RateControlLayerInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_min_qp: Bool32
    var min_qp: VideoEncodeH265QpKHR
    var use_max_qp: Bool32
    var max_qp: VideoEncodeH265QpKHR
    var use_max_frame_size: Bool32
    var max_frame_size: VideoEncodeH265FrameSizeKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_min_qp: Bool32 = zero_init[Bool32](),
        min_qp: VideoEncodeH265QpKHR = zero_init[VideoEncodeH265QpKHR](),
        use_max_qp: Bool32 = zero_init[Bool32](),
        max_qp: VideoEncodeH265QpKHR = zero_init[VideoEncodeH265QpKHR](),
        use_max_frame_size: Bool32 = zero_init[Bool32](),
        max_frame_size: VideoEncodeH265FrameSizeKHR = zero_init[VideoEncodeH265FrameSizeKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_RATE_CONTROL_LAYER_INFO_KHR
        self.p_next = p_next
        self.use_min_qp = use_min_qp
        self.min_qp = min_qp
        self.use_max_qp = use_max_qp
        self.max_qp = max_qp
        self.use_max_frame_size = use_max_frame_size
        self.max_frame_size = max_frame_size


struct VideoEncodeH265ProfileInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_profile_idc: StdVideoH265ProfileIdc

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_profile_idc: StdVideoH265ProfileIdc = zero_init[StdVideoH265ProfileIdc](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_PROFILE_INFO_KHR
        self.p_next = p_next
        self.std_profile_idc = std_profile_idc


struct VideoEncodeH265DpbSlotInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_reference_info: Ptr[StdVideoEncodeH265ReferenceInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_reference_info: Ptr[StdVideoEncodeH265ReferenceInfo] = zero_init[Ptr[StdVideoEncodeH265ReferenceInfo]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_H265_DPB_SLOT_INFO_KHR
        self.p_next = p_next
        self.p_std_reference_info = p_std_reference_info


struct VideoEncodeAV1CapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEncodeAV1CapabilityFlagsKHR
    var max_level: StdVideoAV1Level
    var coded_picture_alignment: Extent2D
    var max_tiles: Extent2D
    var min_tile_size: Extent2D
    var max_tile_size: Extent2D
    var superblock_sizes: VideoEncodeAV1SuperblockSizeFlagsKHR
    var max_single_reference_count: UInt32
    var single_reference_name_mask: UInt32
    var max_unidirectional_compound_reference_count: UInt32
    var max_unidirectional_compound_group_1_reference_count: UInt32
    var unidirectional_compound_reference_name_mask: UInt32
    var max_bidirectional_compound_reference_count: UInt32
    var max_bidirectional_compound_group_1_reference_count: UInt32
    var max_bidirectional_compound_group_2_reference_count: UInt32
    var bidirectional_compound_reference_name_mask: UInt32
    var max_temporal_layer_count: UInt32
    var max_spatial_layer_count: UInt32
    var max_operating_points: UInt32
    var min_q_index: UInt32
    var max_q_index: UInt32
    var prefers_gop_remaining_frames: Bool32
    var requires_gop_remaining_frames: Bool32
    var std_syntax_flags: VideoEncodeAV1StdFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEncodeAV1CapabilityFlagsKHR = zero_init[VideoEncodeAV1CapabilityFlagsKHR](),
        max_level: StdVideoAV1Level = zero_init[StdVideoAV1Level](),
        coded_picture_alignment: Extent2D = zero_init[Extent2D](),
        max_tiles: Extent2D = zero_init[Extent2D](),
        min_tile_size: Extent2D = zero_init[Extent2D](),
        max_tile_size: Extent2D = zero_init[Extent2D](),
        superblock_sizes: VideoEncodeAV1SuperblockSizeFlagsKHR = zero_init[VideoEncodeAV1SuperblockSizeFlagsKHR](),
        max_single_reference_count: UInt32 = zero_init[UInt32](),
        single_reference_name_mask: UInt32 = zero_init[UInt32](),
        max_unidirectional_compound_reference_count: UInt32 = zero_init[UInt32](),
        max_unidirectional_compound_group_1_reference_count: UInt32 = zero_init[UInt32](),
        unidirectional_compound_reference_name_mask: UInt32 = zero_init[UInt32](),
        max_bidirectional_compound_reference_count: UInt32 = zero_init[UInt32](),
        max_bidirectional_compound_group_1_reference_count: UInt32 = zero_init[UInt32](),
        max_bidirectional_compound_group_2_reference_count: UInt32 = zero_init[UInt32](),
        bidirectional_compound_reference_name_mask: UInt32 = zero_init[UInt32](),
        max_temporal_layer_count: UInt32 = zero_init[UInt32](),
        max_spatial_layer_count: UInt32 = zero_init[UInt32](),
        max_operating_points: UInt32 = zero_init[UInt32](),
        min_q_index: UInt32 = zero_init[UInt32](),
        max_q_index: UInt32 = zero_init[UInt32](),
        prefers_gop_remaining_frames: Bool32 = zero_init[Bool32](),
        requires_gop_remaining_frames: Bool32 = zero_init[Bool32](),
        std_syntax_flags: VideoEncodeAV1StdFlagsKHR = zero_init[VideoEncodeAV1StdFlagsKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_CAPABILITIES_KHR
        self.p_next = p_next
        self.flags = flags
        self.max_level = max_level
        self.coded_picture_alignment = coded_picture_alignment
        self.max_tiles = max_tiles
        self.min_tile_size = min_tile_size
        self.max_tile_size = max_tile_size
        self.superblock_sizes = superblock_sizes
        self.max_single_reference_count = max_single_reference_count
        self.single_reference_name_mask = single_reference_name_mask
        self.max_unidirectional_compound_reference_count = max_unidirectional_compound_reference_count
        self.max_unidirectional_compound_group_1_reference_count = max_unidirectional_compound_group_1_reference_count
        self.unidirectional_compound_reference_name_mask = unidirectional_compound_reference_name_mask
        self.max_bidirectional_compound_reference_count = max_bidirectional_compound_reference_count
        self.max_bidirectional_compound_group_1_reference_count = max_bidirectional_compound_group_1_reference_count
        self.max_bidirectional_compound_group_2_reference_count = max_bidirectional_compound_group_2_reference_count
        self.bidirectional_compound_reference_name_mask = bidirectional_compound_reference_name_mask
        self.max_temporal_layer_count = max_temporal_layer_count
        self.max_spatial_layer_count = max_spatial_layer_count
        self.max_operating_points = max_operating_points
        self.min_q_index = min_q_index
        self.max_q_index = max_q_index
        self.prefers_gop_remaining_frames = prefers_gop_remaining_frames
        self.requires_gop_remaining_frames = requires_gop_remaining_frames
        self.std_syntax_flags = std_syntax_flags


struct VideoEncodeAV1QualityLevelPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var preferred_rate_control_flags: VideoEncodeAV1RateControlFlagsKHR
    var preferred_gop_frame_count: UInt32
    var preferred_key_frame_period: UInt32
    var preferred_consecutive_bipredictive_frame_count: UInt32
    var preferred_temporal_layer_count: UInt32
    var preferred_constant_q_index: VideoEncodeAV1QIndexKHR
    var preferred_max_single_reference_count: UInt32
    var preferred_single_reference_name_mask: UInt32
    var preferred_max_unidirectional_compound_reference_count: UInt32
    var preferred_max_unidirectional_compound_group_1_reference_count: UInt32
    var preferred_unidirectional_compound_reference_name_mask: UInt32
    var preferred_max_bidirectional_compound_reference_count: UInt32
    var preferred_max_bidirectional_compound_group_1_reference_count: UInt32
    var preferred_max_bidirectional_compound_group_2_reference_count: UInt32
    var preferred_bidirectional_compound_reference_name_mask: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        preferred_rate_control_flags: VideoEncodeAV1RateControlFlagsKHR = zero_init[VideoEncodeAV1RateControlFlagsKHR](),
        preferred_gop_frame_count: UInt32 = zero_init[UInt32](),
        preferred_key_frame_period: UInt32 = zero_init[UInt32](),
        preferred_consecutive_bipredictive_frame_count: UInt32 = zero_init[UInt32](),
        preferred_temporal_layer_count: UInt32 = zero_init[UInt32](),
        preferred_constant_q_index: VideoEncodeAV1QIndexKHR = zero_init[VideoEncodeAV1QIndexKHR](),
        preferred_max_single_reference_count: UInt32 = zero_init[UInt32](),
        preferred_single_reference_name_mask: UInt32 = zero_init[UInt32](),
        preferred_max_unidirectional_compound_reference_count: UInt32 = zero_init[UInt32](),
        preferred_max_unidirectional_compound_group_1_reference_count: UInt32 = zero_init[UInt32](),
        preferred_unidirectional_compound_reference_name_mask: UInt32 = zero_init[UInt32](),
        preferred_max_bidirectional_compound_reference_count: UInt32 = zero_init[UInt32](),
        preferred_max_bidirectional_compound_group_1_reference_count: UInt32 = zero_init[UInt32](),
        preferred_max_bidirectional_compound_group_2_reference_count: UInt32 = zero_init[UInt32](),
        preferred_bidirectional_compound_reference_name_mask: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_QUALITY_LEVEL_PROPERTIES_KHR
        self.p_next = p_next
        self.preferred_rate_control_flags = preferred_rate_control_flags
        self.preferred_gop_frame_count = preferred_gop_frame_count
        self.preferred_key_frame_period = preferred_key_frame_period
        self.preferred_consecutive_bipredictive_frame_count = preferred_consecutive_bipredictive_frame_count
        self.preferred_temporal_layer_count = preferred_temporal_layer_count
        self.preferred_constant_q_index = preferred_constant_q_index
        self.preferred_max_single_reference_count = preferred_max_single_reference_count
        self.preferred_single_reference_name_mask = preferred_single_reference_name_mask
        self.preferred_max_unidirectional_compound_reference_count = preferred_max_unidirectional_compound_reference_count
        self.preferred_max_unidirectional_compound_group_1_reference_count = preferred_max_unidirectional_compound_group_1_reference_count
        self.preferred_unidirectional_compound_reference_name_mask = preferred_unidirectional_compound_reference_name_mask
        self.preferred_max_bidirectional_compound_reference_count = preferred_max_bidirectional_compound_reference_count
        self.preferred_max_bidirectional_compound_group_1_reference_count = preferred_max_bidirectional_compound_group_1_reference_count
        self.preferred_max_bidirectional_compound_group_2_reference_count = preferred_max_bidirectional_compound_group_2_reference_count
        self.preferred_bidirectional_compound_reference_name_mask = preferred_bidirectional_compound_reference_name_mask


struct PhysicalDeviceVideoEncodeAV1FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_encode_av1: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_encode_av1: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR
        self.p_next = p_next
        self.video_encode_av1 = video_encode_av1


struct VideoEncodeAV1SessionCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_max_level: Bool32
    var max_level: StdVideoAV1Level

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_max_level: Bool32 = zero_init[Bool32](),
        max_level: StdVideoAV1Level = zero_init[StdVideoAV1Level](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_SESSION_CREATE_INFO_KHR
        self.p_next = p_next
        self.use_max_level = use_max_level
        self.max_level = max_level


struct VideoEncodeAV1SessionParametersCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_sequence_header: Ptr[StdVideoAV1SequenceHeader]
    var p_std_decoder_model_info: Ptr[StdVideoEncodeAV1DecoderModelInfo]
    var std_operating_point_count: UInt32
    var p_std_operating_points: Ptr[StdVideoEncodeAV1OperatingPointInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_sequence_header: Ptr[StdVideoAV1SequenceHeader] = zero_init[Ptr[StdVideoAV1SequenceHeader]](),
        p_std_decoder_model_info: Ptr[StdVideoEncodeAV1DecoderModelInfo] = zero_init[Ptr[StdVideoEncodeAV1DecoderModelInfo]](),
        std_operating_point_count: UInt32 = zero_init[UInt32](),
        p_std_operating_points: Ptr[StdVideoEncodeAV1OperatingPointInfo] = zero_init[Ptr[StdVideoEncodeAV1OperatingPointInfo]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_SESSION_PARAMETERS_CREATE_INFO_KHR
        self.p_next = p_next
        self.p_std_sequence_header = p_std_sequence_header
        self.p_std_decoder_model_info = p_std_decoder_model_info
        self.std_operating_point_count = std_operating_point_count
        self.p_std_operating_points = p_std_operating_points


struct VideoEncodeAV1DpbSlotInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_std_reference_info: Ptr[StdVideoEncodeAV1ReferenceInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_std_reference_info: Ptr[StdVideoEncodeAV1ReferenceInfo] = zero_init[Ptr[StdVideoEncodeAV1ReferenceInfo]](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_DPB_SLOT_INFO_KHR
        self.p_next = p_next
        self.p_std_reference_info = p_std_reference_info


struct VideoEncodeAV1PictureInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var prediction_mode: VideoEncodeAV1PredictionModeKHR
    var rate_control_group: VideoEncodeAV1RateControlGroupKHR
    var constant_q_index: UInt32
    var p_std_picture_info: Ptr[StdVideoEncodeAV1PictureInfo]
    var reference_name_slot_indices: InlineArray[Int32, Int(MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR)]
    var primary_reference_cdf_only: Bool32
    var generate_obu_extension_header: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        prediction_mode: VideoEncodeAV1PredictionModeKHR = zero_init[VideoEncodeAV1PredictionModeKHR](),
        rate_control_group: VideoEncodeAV1RateControlGroupKHR = zero_init[VideoEncodeAV1RateControlGroupKHR](),
        constant_q_index: UInt32 = zero_init[UInt32](),
        p_std_picture_info: Ptr[StdVideoEncodeAV1PictureInfo] = zero_init[Ptr[StdVideoEncodeAV1PictureInfo]](),
        reference_name_slot_indices: InlineArray[Int32, Int(MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR)] = zero_init[InlineArray[Int32, Int(MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR)]](),
        primary_reference_cdf_only: Bool32 = zero_init[Bool32](),
        generate_obu_extension_header: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_PICTURE_INFO_KHR
        self.p_next = p_next
        self.prediction_mode = prediction_mode
        self.rate_control_group = rate_control_group
        self.constant_q_index = constant_q_index
        self.p_std_picture_info = p_std_picture_info
        self.reference_name_slot_indices = reference_name_slot_indices
        self.primary_reference_cdf_only = primary_reference_cdf_only
        self.generate_obu_extension_header = generate_obu_extension_header


struct VideoEncodeAV1ProfileInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var std_profile: StdVideoAV1Profile

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        std_profile: StdVideoAV1Profile = zero_init[StdVideoAV1Profile](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_PROFILE_INFO_KHR
        self.p_next = p_next
        self.std_profile = std_profile


struct VideoEncodeAV1RateControlInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: VideoEncodeAV1RateControlFlagsKHR
    var gop_frame_count: UInt32
    var key_frame_period: UInt32
    var consecutive_bipredictive_frame_count: UInt32
    var temporal_layer_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: VideoEncodeAV1RateControlFlagsKHR = zero_init[VideoEncodeAV1RateControlFlagsKHR](),
        gop_frame_count: UInt32 = zero_init[UInt32](),
        key_frame_period: UInt32 = zero_init[UInt32](),
        consecutive_bipredictive_frame_count: UInt32 = zero_init[UInt32](),
        temporal_layer_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_RATE_CONTROL_INFO_KHR
        self.p_next = p_next
        self.flags = flags
        self.gop_frame_count = gop_frame_count
        self.key_frame_period = key_frame_period
        self.consecutive_bipredictive_frame_count = consecutive_bipredictive_frame_count
        self.temporal_layer_count = temporal_layer_count


struct VideoEncodeAV1QIndexKHR(ImplicitlyCopyable, Movable):
    var intra_q_index: UInt32
    var predictive_q_index: UInt32
    var bipredictive_q_index: UInt32

    fn __init__(
        out self,
        intra_q_index: UInt32 = zero_init[UInt32](),
        predictive_q_index: UInt32 = zero_init[UInt32](),
        bipredictive_q_index: UInt32 = zero_init[UInt32](),
    ):
        self.intra_q_index = intra_q_index
        self.predictive_q_index = predictive_q_index
        self.bipredictive_q_index = bipredictive_q_index


struct VideoEncodeAV1FrameSizeKHR(ImplicitlyCopyable, Movable):
    var intra_frame_size: UInt32
    var predictive_frame_size: UInt32
    var bipredictive_frame_size: UInt32

    fn __init__(
        out self,
        intra_frame_size: UInt32 = zero_init[UInt32](),
        predictive_frame_size: UInt32 = zero_init[UInt32](),
        bipredictive_frame_size: UInt32 = zero_init[UInt32](),
    ):
        self.intra_frame_size = intra_frame_size
        self.predictive_frame_size = predictive_frame_size
        self.bipredictive_frame_size = bipredictive_frame_size


struct VideoEncodeAV1GopRemainingFrameInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_gop_remaining_frames: Bool32
    var gop_remaining_intra: UInt32
    var gop_remaining_predictive: UInt32
    var gop_remaining_bipredictive: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_gop_remaining_frames: Bool32 = zero_init[Bool32](),
        gop_remaining_intra: UInt32 = zero_init[UInt32](),
        gop_remaining_predictive: UInt32 = zero_init[UInt32](),
        gop_remaining_bipredictive: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_GOP_REMAINING_FRAME_INFO_KHR
        self.p_next = p_next
        self.use_gop_remaining_frames = use_gop_remaining_frames
        self.gop_remaining_intra = gop_remaining_intra
        self.gop_remaining_predictive = gop_remaining_predictive
        self.gop_remaining_bipredictive = gop_remaining_bipredictive


struct VideoEncodeAV1RateControlLayerInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_min_q_index: Bool32
    var min_q_index: VideoEncodeAV1QIndexKHR
    var use_max_q_index: Bool32
    var max_q_index: VideoEncodeAV1QIndexKHR
    var use_max_frame_size: Bool32
    var max_frame_size: VideoEncodeAV1FrameSizeKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_min_q_index: Bool32 = zero_init[Bool32](),
        min_q_index: VideoEncodeAV1QIndexKHR = zero_init[VideoEncodeAV1QIndexKHR](),
        use_max_q_index: Bool32 = zero_init[Bool32](),
        max_q_index: VideoEncodeAV1QIndexKHR = zero_init[VideoEncodeAV1QIndexKHR](),
        use_max_frame_size: Bool32 = zero_init[Bool32](),
        max_frame_size: VideoEncodeAV1FrameSizeKHR = zero_init[VideoEncodeAV1FrameSizeKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_AV1_RATE_CONTROL_LAYER_INFO_KHR
        self.p_next = p_next
        self.use_min_q_index = use_min_q_index
        self.min_q_index = min_q_index
        self.use_max_q_index = use_max_q_index
        self.max_q_index = max_q_index
        self.use_max_frame_size = use_max_frame_size
        self.max_frame_size = max_frame_size


struct PhysicalDeviceInheritedViewportScissorFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var inherited_viewport_scissor_2_d: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        inherited_viewport_scissor_2_d: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV
        self.p_next = p_next
        self.inherited_viewport_scissor_2_d = inherited_viewport_scissor_2_d


struct CommandBufferInheritanceViewportScissorInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var viewport_scissor_2_d: Bool32
    var viewport_depth_count: UInt32
    var p_viewport_depths: Ptr[Viewport]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        viewport_scissor_2_d: Bool32 = zero_init[Bool32](),
        viewport_depth_count: UInt32 = zero_init[UInt32](),
        p_viewport_depths: Ptr[Viewport] = zero_init[Ptr[Viewport]](),
    ):
        self.s_type = StructureType.COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV
        self.p_next = p_next
        self.viewport_scissor_2_d = viewport_scissor_2_d
        self.viewport_depth_count = viewport_depth_count
        self.p_viewport_depths = p_viewport_depths


struct PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ycbcr_2_plane_444_formats: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ycbcr_2_plane_444_formats: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT
        self.p_next = p_next
        self.ycbcr_2_plane_444_formats = ycbcr_2_plane_444_formats


struct PhysicalDeviceProvokingVertexFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var provoking_vertex_last: Bool32
    var transform_feedback_preserves_provoking_vertex: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        provoking_vertex_last: Bool32 = zero_init[Bool32](),
        transform_feedback_preserves_provoking_vertex: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT
        self.p_next = p_next
        self.provoking_vertex_last = provoking_vertex_last
        self.transform_feedback_preserves_provoking_vertex = transform_feedback_preserves_provoking_vertex


struct PhysicalDeviceProvokingVertexPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var provoking_vertex_mode_per_pipeline: Bool32
    var transform_feedback_preserves_triangle_fan_provoking_vertex: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        provoking_vertex_mode_per_pipeline: Bool32 = zero_init[Bool32](),
        transform_feedback_preserves_triangle_fan_provoking_vertex: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT
        self.p_next = p_next
        self.provoking_vertex_mode_per_pipeline = provoking_vertex_mode_per_pipeline
        self.transform_feedback_preserves_triangle_fan_provoking_vertex = transform_feedback_preserves_triangle_fan_provoking_vertex


struct PipelineRasterizationProvokingVertexStateCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var provoking_vertex_mode: ProvokingVertexModeEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        provoking_vertex_mode: ProvokingVertexModeEXT = zero_init[ProvokingVertexModeEXT](),
    ):
        self.s_type = StructureType.PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT
        self.p_next = p_next
        self.provoking_vertex_mode = provoking_vertex_mode


struct VideoEncodeIntraRefreshCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var intra_refresh_modes: VideoEncodeIntraRefreshModeFlagsKHR
    var max_intra_refresh_cycle_duration: UInt32
    var max_intra_refresh_active_reference_pictures: UInt32
    var partition_independent_intra_refresh_regions: Bool32
    var non_rectangular_intra_refresh_regions: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        intra_refresh_modes: VideoEncodeIntraRefreshModeFlagsKHR = zero_init[VideoEncodeIntraRefreshModeFlagsKHR](),
        max_intra_refresh_cycle_duration: UInt32 = zero_init[UInt32](),
        max_intra_refresh_active_reference_pictures: UInt32 = zero_init[UInt32](),
        partition_independent_intra_refresh_regions: Bool32 = zero_init[Bool32](),
        non_rectangular_intra_refresh_regions: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_INTRA_REFRESH_CAPABILITIES_KHR
        self.p_next = p_next
        self.intra_refresh_modes = intra_refresh_modes
        self.max_intra_refresh_cycle_duration = max_intra_refresh_cycle_duration
        self.max_intra_refresh_active_reference_pictures = max_intra_refresh_active_reference_pictures
        self.partition_independent_intra_refresh_regions = partition_independent_intra_refresh_regions
        self.non_rectangular_intra_refresh_regions = non_rectangular_intra_refresh_regions


struct VideoEncodeSessionIntraRefreshCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var intra_refresh_mode: VideoEncodeIntraRefreshModeFlagBitsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        intra_refresh_mode: VideoEncodeIntraRefreshModeFlagBitsKHR = zero_init[VideoEncodeIntraRefreshModeFlagBitsKHR](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_SESSION_INTRA_REFRESH_CREATE_INFO_KHR
        self.p_next = p_next
        self.intra_refresh_mode = intra_refresh_mode


struct VideoEncodeIntraRefreshInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var intra_refresh_cycle_duration: UInt32
    var intra_refresh_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        intra_refresh_cycle_duration: UInt32 = zero_init[UInt32](),
        intra_refresh_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_INTRA_REFRESH_INFO_KHR
        self.p_next = p_next
        self.intra_refresh_cycle_duration = intra_refresh_cycle_duration
        self.intra_refresh_index = intra_refresh_index


struct VideoReferenceIntraRefreshInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dirty_intra_refresh_regions: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dirty_intra_refresh_regions: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.VIDEO_REFERENCE_INTRA_REFRESH_INFO_KHR
        self.p_next = p_next
        self.dirty_intra_refresh_regions = dirty_intra_refresh_regions


struct PhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_encode_intra_refresh: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_encode_intra_refresh: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VIDEO_ENCODE_INTRA_REFRESH_FEATURES_KHR
        self.p_next = p_next
        self.video_encode_intra_refresh = video_encode_intra_refresh


struct CuModuleCreateInfoNVX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var data_size: UInt
    var p_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        data_size: UInt = zero_init[UInt](),
        p_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.CU_MODULE_CREATE_INFO_NVX
        self.p_next = p_next
        self.data_size = data_size
        self.p_data = p_data


struct CuModuleTexturingModeCreateInfoNVX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var use_64_bit_texturing: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        use_64_bit_texturing: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.CU_MODULE_TEXTURING_MODE_CREATE_INFO_NVX
        self.p_next = p_next
        self.use_64_bit_texturing = use_64_bit_texturing


struct CuFunctionCreateInfoNVX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var module: CuModuleNVX
    var p_name: Ptr[UInt8]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        module: CuModuleNVX = zero_init[CuModuleNVX](),
        p_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
    ):
        self.s_type = StructureType.CU_FUNCTION_CREATE_INFO_NVX
        self.p_next = p_next
        self.module = module
        self.p_name = p_name


struct CuLaunchInfoNVX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var function: CuFunctionNVX
    var grid_dim_x: UInt32
    var grid_dim_y: UInt32
    var grid_dim_z: UInt32
    var block_dim_x: UInt32
    var block_dim_y: UInt32
    var block_dim_z: UInt32
    var shared_mem_bytes: UInt32
    var param_count: UInt
    var p_params: Ptr[Ptr[NoneType]]
    var extra_count: UInt
    var p_extras: Ptr[Ptr[NoneType]]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        function: CuFunctionNVX = zero_init[CuFunctionNVX](),
        grid_dim_x: UInt32 = zero_init[UInt32](),
        grid_dim_y: UInt32 = zero_init[UInt32](),
        grid_dim_z: UInt32 = zero_init[UInt32](),
        block_dim_x: UInt32 = zero_init[UInt32](),
        block_dim_y: UInt32 = zero_init[UInt32](),
        block_dim_z: UInt32 = zero_init[UInt32](),
        shared_mem_bytes: UInt32 = zero_init[UInt32](),
        param_count: UInt = zero_init[UInt](),
        p_params: Ptr[Ptr[NoneType]] = zero_init[Ptr[Ptr[NoneType]]](),
        extra_count: UInt = zero_init[UInt](),
        p_extras: Ptr[Ptr[NoneType]] = zero_init[Ptr[Ptr[NoneType]]](),
    ):
        self.s_type = StructureType.CU_LAUNCH_INFO_NVX
        self.p_next = p_next
        self.function = function
        self.grid_dim_x = grid_dim_x
        self.grid_dim_y = grid_dim_y
        self.grid_dim_z = grid_dim_z
        self.block_dim_x = block_dim_x
        self.block_dim_y = block_dim_y
        self.block_dim_z = block_dim_z
        self.shared_mem_bytes = shared_mem_bytes
        self.param_count = param_count
        self.p_params = p_params
        self.extra_count = extra_count
        self.p_extras = p_extras


struct PhysicalDeviceDescriptorBufferFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_buffer: Bool32
    var descriptor_buffer_capture_replay: Bool32
    var descriptor_buffer_image_layout_ignored: Bool32
    var descriptor_buffer_push_descriptors: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_buffer: Bool32 = zero_init[Bool32](),
        descriptor_buffer_capture_replay: Bool32 = zero_init[Bool32](),
        descriptor_buffer_image_layout_ignored: Bool32 = zero_init[Bool32](),
        descriptor_buffer_push_descriptors: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT
        self.p_next = p_next
        self.descriptor_buffer = descriptor_buffer
        self.descriptor_buffer_capture_replay = descriptor_buffer_capture_replay
        self.descriptor_buffer_image_layout_ignored = descriptor_buffer_image_layout_ignored
        self.descriptor_buffer_push_descriptors = descriptor_buffer_push_descriptors


struct PhysicalDeviceDescriptorBufferPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var combined_image_sampler_descriptor_single_array: Bool32
    var bufferless_push_descriptors: Bool32
    var allow_sampler_image_view_post_submit_creation: Bool32
    var descriptor_buffer_offset_alignment: DeviceSize
    var max_descriptor_buffer_bindings: UInt32
    var max_resource_descriptor_buffer_bindings: UInt32
    var max_sampler_descriptor_buffer_bindings: UInt32
    var max_embedded_immutable_sampler_bindings: UInt32
    var max_embedded_immutable_samplers: UInt32
    var buffer_capture_replay_descriptor_data_size: UInt
    var image_capture_replay_descriptor_data_size: UInt
    var image_view_capture_replay_descriptor_data_size: UInt
    var sampler_capture_replay_descriptor_data_size: UInt
    var acceleration_structure_capture_replay_descriptor_data_size: UInt
    var sampler_descriptor_size: UInt
    var combined_image_sampler_descriptor_size: UInt
    var sampled_image_descriptor_size: UInt
    var storage_image_descriptor_size: UInt
    var uniform_texel_buffer_descriptor_size: UInt
    var robust_uniform_texel_buffer_descriptor_size: UInt
    var storage_texel_buffer_descriptor_size: UInt
    var robust_storage_texel_buffer_descriptor_size: UInt
    var uniform_buffer_descriptor_size: UInt
    var robust_uniform_buffer_descriptor_size: UInt
    var storage_buffer_descriptor_size: UInt
    var robust_storage_buffer_descriptor_size: UInt
    var input_attachment_descriptor_size: UInt
    var acceleration_structure_descriptor_size: UInt
    var max_sampler_descriptor_buffer_range: DeviceSize
    var max_resource_descriptor_buffer_range: DeviceSize
    var sampler_descriptor_buffer_address_space_size: DeviceSize
    var resource_descriptor_buffer_address_space_size: DeviceSize
    var descriptor_buffer_address_space_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        combined_image_sampler_descriptor_single_array: Bool32 = zero_init[Bool32](),
        bufferless_push_descriptors: Bool32 = zero_init[Bool32](),
        allow_sampler_image_view_post_submit_creation: Bool32 = zero_init[Bool32](),
        descriptor_buffer_offset_alignment: DeviceSize = zero_init[DeviceSize](),
        max_descriptor_buffer_bindings: UInt32 = zero_init[UInt32](),
        max_resource_descriptor_buffer_bindings: UInt32 = zero_init[UInt32](),
        max_sampler_descriptor_buffer_bindings: UInt32 = zero_init[UInt32](),
        max_embedded_immutable_sampler_bindings: UInt32 = zero_init[UInt32](),
        max_embedded_immutable_samplers: UInt32 = zero_init[UInt32](),
        buffer_capture_replay_descriptor_data_size: UInt = zero_init[UInt](),
        image_capture_replay_descriptor_data_size: UInt = zero_init[UInt](),
        image_view_capture_replay_descriptor_data_size: UInt = zero_init[UInt](),
        sampler_capture_replay_descriptor_data_size: UInt = zero_init[UInt](),
        acceleration_structure_capture_replay_descriptor_data_size: UInt = zero_init[UInt](),
        sampler_descriptor_size: UInt = zero_init[UInt](),
        combined_image_sampler_descriptor_size: UInt = zero_init[UInt](),
        sampled_image_descriptor_size: UInt = zero_init[UInt](),
        storage_image_descriptor_size: UInt = zero_init[UInt](),
        uniform_texel_buffer_descriptor_size: UInt = zero_init[UInt](),
        robust_uniform_texel_buffer_descriptor_size: UInt = zero_init[UInt](),
        storage_texel_buffer_descriptor_size: UInt = zero_init[UInt](),
        robust_storage_texel_buffer_descriptor_size: UInt = zero_init[UInt](),
        uniform_buffer_descriptor_size: UInt = zero_init[UInt](),
        robust_uniform_buffer_descriptor_size: UInt = zero_init[UInt](),
        storage_buffer_descriptor_size: UInt = zero_init[UInt](),
        robust_storage_buffer_descriptor_size: UInt = zero_init[UInt](),
        input_attachment_descriptor_size: UInt = zero_init[UInt](),
        acceleration_structure_descriptor_size: UInt = zero_init[UInt](),
        max_sampler_descriptor_buffer_range: DeviceSize = zero_init[DeviceSize](),
        max_resource_descriptor_buffer_range: DeviceSize = zero_init[DeviceSize](),
        sampler_descriptor_buffer_address_space_size: DeviceSize = zero_init[DeviceSize](),
        resource_descriptor_buffer_address_space_size: DeviceSize = zero_init[DeviceSize](),
        descriptor_buffer_address_space_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_PROPERTIES_EXT
        self.p_next = p_next
        self.combined_image_sampler_descriptor_single_array = combined_image_sampler_descriptor_single_array
        self.bufferless_push_descriptors = bufferless_push_descriptors
        self.allow_sampler_image_view_post_submit_creation = allow_sampler_image_view_post_submit_creation
        self.descriptor_buffer_offset_alignment = descriptor_buffer_offset_alignment
        self.max_descriptor_buffer_bindings = max_descriptor_buffer_bindings
        self.max_resource_descriptor_buffer_bindings = max_resource_descriptor_buffer_bindings
        self.max_sampler_descriptor_buffer_bindings = max_sampler_descriptor_buffer_bindings
        self.max_embedded_immutable_sampler_bindings = max_embedded_immutable_sampler_bindings
        self.max_embedded_immutable_samplers = max_embedded_immutable_samplers
        self.buffer_capture_replay_descriptor_data_size = buffer_capture_replay_descriptor_data_size
        self.image_capture_replay_descriptor_data_size = image_capture_replay_descriptor_data_size
        self.image_view_capture_replay_descriptor_data_size = image_view_capture_replay_descriptor_data_size
        self.sampler_capture_replay_descriptor_data_size = sampler_capture_replay_descriptor_data_size
        self.acceleration_structure_capture_replay_descriptor_data_size = acceleration_structure_capture_replay_descriptor_data_size
        self.sampler_descriptor_size = sampler_descriptor_size
        self.combined_image_sampler_descriptor_size = combined_image_sampler_descriptor_size
        self.sampled_image_descriptor_size = sampled_image_descriptor_size
        self.storage_image_descriptor_size = storage_image_descriptor_size
        self.uniform_texel_buffer_descriptor_size = uniform_texel_buffer_descriptor_size
        self.robust_uniform_texel_buffer_descriptor_size = robust_uniform_texel_buffer_descriptor_size
        self.storage_texel_buffer_descriptor_size = storage_texel_buffer_descriptor_size
        self.robust_storage_texel_buffer_descriptor_size = robust_storage_texel_buffer_descriptor_size
        self.uniform_buffer_descriptor_size = uniform_buffer_descriptor_size
        self.robust_uniform_buffer_descriptor_size = robust_uniform_buffer_descriptor_size
        self.storage_buffer_descriptor_size = storage_buffer_descriptor_size
        self.robust_storage_buffer_descriptor_size = robust_storage_buffer_descriptor_size
        self.input_attachment_descriptor_size = input_attachment_descriptor_size
        self.acceleration_structure_descriptor_size = acceleration_structure_descriptor_size
        self.max_sampler_descriptor_buffer_range = max_sampler_descriptor_buffer_range
        self.max_resource_descriptor_buffer_range = max_resource_descriptor_buffer_range
        self.sampler_descriptor_buffer_address_space_size = sampler_descriptor_buffer_address_space_size
        self.resource_descriptor_buffer_address_space_size = resource_descriptor_buffer_address_space_size
        self.descriptor_buffer_address_space_size = descriptor_buffer_address_space_size


struct PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var combined_image_sampler_density_map_descriptor_size: UInt

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        combined_image_sampler_density_map_descriptor_size: UInt = zero_init[UInt](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_DENSITY_MAP_PROPERTIES_EXT
        self.p_next = p_next
        self.combined_image_sampler_density_map_descriptor_size = combined_image_sampler_density_map_descriptor_size


struct DescriptorAddressInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var address: DeviceAddress
    var range: DeviceSize
    var format: Format

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        address: DeviceAddress = zero_init[DeviceAddress](),
        range: DeviceSize = zero_init[DeviceSize](),
        format: Format = zero_init[Format](),
    ):
        self.s_type = StructureType.DESCRIPTOR_ADDRESS_INFO_EXT
        self.p_next = p_next
        self.address = address
        self.range = range
        self.format = format


struct DescriptorBufferBindingInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var address: DeviceAddress
    var usage: BufferUsageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        address: DeviceAddress = zero_init[DeviceAddress](),
        usage: BufferUsageFlags = zero_init[BufferUsageFlags](),
    ):
        self.s_type = StructureType.DESCRIPTOR_BUFFER_BINDING_INFO_EXT
        self.p_next = p_next
        self.address = address
        self.usage = usage


struct DescriptorBufferBindingPushDescriptorBufferHandleEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer: Buffer

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer: Buffer = zero_init[Buffer](),
    ):
        self.s_type = StructureType.DESCRIPTOR_BUFFER_BINDING_PUSH_DESCRIPTOR_BUFFER_HANDLE_EXT
        self.p_next = p_next
        self.buffer = buffer


struct DescriptorGetInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: DescriptorType
    var data: DescriptorDataEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: DescriptorType = zero_init[DescriptorType](),
        data: DescriptorDataEXT = zero_init[DescriptorDataEXT](),
    ):
        self.s_type = StructureType.DESCRIPTOR_GET_INFO_EXT
        self.p_next = p_next
        self.type = type
        self.data = data


struct BufferCaptureDescriptorDataInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer: Buffer

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer: Buffer = zero_init[Buffer](),
    ):
        self.s_type = StructureType.BUFFER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT
        self.p_next = p_next
        self.buffer = buffer


struct ImageCaptureDescriptorDataInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image: Image

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image: Image = zero_init[Image](),
    ):
        self.s_type = StructureType.IMAGE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT
        self.p_next = p_next
        self.image = image


struct ImageViewCaptureDescriptorDataInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_view: ImageView

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_view: ImageView = zero_init[ImageView](),
    ):
        self.s_type = StructureType.IMAGE_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_EXT
        self.p_next = p_next
        self.image_view = image_view


struct SamplerCaptureDescriptorDataInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var sampler: Sampler

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        sampler: Sampler = zero_init[Sampler](),
    ):
        self.s_type = StructureType.SAMPLER_CAPTURE_DESCRIPTOR_DATA_INFO_EXT
        self.p_next = p_next
        self.sampler = sampler


struct AccelerationStructureCaptureDescriptorDataInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acceleration_structure: AccelerationStructureKHR
    var acceleration_structure_nv: AccelerationStructureNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acceleration_structure: AccelerationStructureKHR = zero_init[AccelerationStructureKHR](),
        acceleration_structure_nv: AccelerationStructureNV = zero_init[AccelerationStructureNV](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_CAPTURE_DESCRIPTOR_DATA_INFO_EXT
        self.p_next = p_next
        self.acceleration_structure = acceleration_structure
        self.acceleration_structure_nv = acceleration_structure_nv


struct OpaqueCaptureDescriptorDataCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var opaque_capture_descriptor_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        opaque_capture_descriptor_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.OPAQUE_CAPTURE_DESCRIPTOR_DATA_CREATE_INFO_EXT
        self.p_next = p_next
        self.opaque_capture_descriptor_data = opaque_capture_descriptor_data


struct PhysicalDeviceShaderIntegerDotProductFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_integer_dot_product: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_integer_dot_product: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES
        self.p_next = p_next
        self.shader_integer_dot_product = shader_integer_dot_product


struct PhysicalDeviceShaderIntegerDotProductProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var integer_dot_product_8_bit_unsigned_accelerated: Bool32
    var integer_dot_product_8_bit_signed_accelerated: Bool32
    var integer_dot_product_8_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_4_x_8_bit_packed_unsigned_accelerated: Bool32
    var integer_dot_product_4_x_8_bit_packed_signed_accelerated: Bool32
    var integer_dot_product_4_x_8_bit_packed_mixed_signedness_accelerated: Bool32
    var integer_dot_product_16_bit_unsigned_accelerated: Bool32
    var integer_dot_product_16_bit_signed_accelerated: Bool32
    var integer_dot_product_16_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_32_bit_unsigned_accelerated: Bool32
    var integer_dot_product_32_bit_signed_accelerated: Bool32
    var integer_dot_product_32_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_64_bit_unsigned_accelerated: Bool32
    var integer_dot_product_64_bit_signed_accelerated: Bool32
    var integer_dot_product_64_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_8_bit_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_8_bit_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_8_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_4_x_8_bit_packed_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_4_x_8_bit_packed_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_4_x_8_bit_packed_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_16_bit_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_16_bit_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_16_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_32_bit_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_32_bit_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_32_bit_mixed_signedness_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_64_bit_unsigned_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_64_bit_signed_accelerated: Bool32
    var integer_dot_product_accumulating_saturating_64_bit_mixed_signedness_accelerated: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        integer_dot_product_8_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_8_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_8_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_4_x_8_bit_packed_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_4_x_8_bit_packed_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_4_x_8_bit_packed_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_16_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_16_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_16_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_32_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_32_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_32_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_64_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_64_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_64_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_8_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_8_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_8_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_4_x_8_bit_packed_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_4_x_8_bit_packed_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_4_x_8_bit_packed_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_16_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_16_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_16_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_32_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_32_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_32_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_64_bit_unsigned_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_64_bit_signed_accelerated: Bool32 = zero_init[Bool32](),
        integer_dot_product_accumulating_saturating_64_bit_mixed_signedness_accelerated: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES
        self.p_next = p_next
        self.integer_dot_product_8_bit_unsigned_accelerated = integer_dot_product_8_bit_unsigned_accelerated
        self.integer_dot_product_8_bit_signed_accelerated = integer_dot_product_8_bit_signed_accelerated
        self.integer_dot_product_8_bit_mixed_signedness_accelerated = integer_dot_product_8_bit_mixed_signedness_accelerated
        self.integer_dot_product_4_x_8_bit_packed_unsigned_accelerated = integer_dot_product_4_x_8_bit_packed_unsigned_accelerated
        self.integer_dot_product_4_x_8_bit_packed_signed_accelerated = integer_dot_product_4_x_8_bit_packed_signed_accelerated
        self.integer_dot_product_4_x_8_bit_packed_mixed_signedness_accelerated = integer_dot_product_4_x_8_bit_packed_mixed_signedness_accelerated
        self.integer_dot_product_16_bit_unsigned_accelerated = integer_dot_product_16_bit_unsigned_accelerated
        self.integer_dot_product_16_bit_signed_accelerated = integer_dot_product_16_bit_signed_accelerated
        self.integer_dot_product_16_bit_mixed_signedness_accelerated = integer_dot_product_16_bit_mixed_signedness_accelerated
        self.integer_dot_product_32_bit_unsigned_accelerated = integer_dot_product_32_bit_unsigned_accelerated
        self.integer_dot_product_32_bit_signed_accelerated = integer_dot_product_32_bit_signed_accelerated
        self.integer_dot_product_32_bit_mixed_signedness_accelerated = integer_dot_product_32_bit_mixed_signedness_accelerated
        self.integer_dot_product_64_bit_unsigned_accelerated = integer_dot_product_64_bit_unsigned_accelerated
        self.integer_dot_product_64_bit_signed_accelerated = integer_dot_product_64_bit_signed_accelerated
        self.integer_dot_product_64_bit_mixed_signedness_accelerated = integer_dot_product_64_bit_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_8_bit_unsigned_accelerated = integer_dot_product_accumulating_saturating_8_bit_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_8_bit_signed_accelerated = integer_dot_product_accumulating_saturating_8_bit_signed_accelerated
        self.integer_dot_product_accumulating_saturating_8_bit_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_8_bit_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_4_x_8_bit_packed_unsigned_accelerated = integer_dot_product_accumulating_saturating_4_x_8_bit_packed_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_4_x_8_bit_packed_signed_accelerated = integer_dot_product_accumulating_saturating_4_x_8_bit_packed_signed_accelerated
        self.integer_dot_product_accumulating_saturating_4_x_8_bit_packed_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_4_x_8_bit_packed_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_16_bit_unsigned_accelerated = integer_dot_product_accumulating_saturating_16_bit_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_16_bit_signed_accelerated = integer_dot_product_accumulating_saturating_16_bit_signed_accelerated
        self.integer_dot_product_accumulating_saturating_16_bit_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_16_bit_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_32_bit_unsigned_accelerated = integer_dot_product_accumulating_saturating_32_bit_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_32_bit_signed_accelerated = integer_dot_product_accumulating_saturating_32_bit_signed_accelerated
        self.integer_dot_product_accumulating_saturating_32_bit_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_32_bit_mixed_signedness_accelerated
        self.integer_dot_product_accumulating_saturating_64_bit_unsigned_accelerated = integer_dot_product_accumulating_saturating_64_bit_unsigned_accelerated
        self.integer_dot_product_accumulating_saturating_64_bit_signed_accelerated = integer_dot_product_accumulating_saturating_64_bit_signed_accelerated
        self.integer_dot_product_accumulating_saturating_64_bit_mixed_signedness_accelerated = integer_dot_product_accumulating_saturating_64_bit_mixed_signedness_accelerated


struct PhysicalDeviceDrmPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var has_primary: Bool32
    var has_render: Bool32
    var primary_major: Int64
    var primary_minor: Int64
    var render_major: Int64
    var render_minor: Int64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        has_primary: Bool32 = zero_init[Bool32](),
        has_render: Bool32 = zero_init[Bool32](),
        primary_major: Int64 = zero_init[Int64](),
        primary_minor: Int64 = zero_init[Int64](),
        render_major: Int64 = zero_init[Int64](),
        render_minor: Int64 = zero_init[Int64](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DRM_PROPERTIES_EXT
        self.p_next = p_next
        self.has_primary = has_primary
        self.has_render = has_render
        self.primary_major = primary_major
        self.primary_minor = primary_minor
        self.render_major = render_major
        self.render_minor = render_minor


struct PhysicalDeviceFragmentShaderBarycentricFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_shader_barycentric: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_shader_barycentric: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR
        self.p_next = p_next
        self.fragment_shader_barycentric = fragment_shader_barycentric


struct PhysicalDeviceFragmentShaderBarycentricPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tri_strip_vertex_order_independent_of_provoking_vertex: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tri_strip_vertex_order_independent_of_provoking_vertex: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR
        self.p_next = p_next
        self.tri_strip_vertex_order_independent_of_provoking_vertex = tri_strip_vertex_order_independent_of_provoking_vertex


struct PhysicalDeviceRayTracingMotionBlurFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ray_tracing_motion_blur: Bool32
    var ray_tracing_motion_blur_pipeline_trace_rays_indirect: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ray_tracing_motion_blur: Bool32 = zero_init[Bool32](),
        ray_tracing_motion_blur_pipeline_trace_rays_indirect: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV
        self.p_next = p_next
        self.ray_tracing_motion_blur = ray_tracing_motion_blur
        self.ray_tracing_motion_blur_pipeline_trace_rays_indirect = ray_tracing_motion_blur_pipeline_trace_rays_indirect


struct PhysicalDeviceRayTracingValidationFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ray_tracing_validation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ray_tracing_validation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV
        self.p_next = p_next
        self.ray_tracing_validation = ray_tracing_validation


struct PhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var spheres: Bool32
    var linear_swept_spheres: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        spheres: Bool32 = zero_init[Bool32](),
        linear_swept_spheres: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV
        self.p_next = p_next
        self.spheres = spheres
        self.linear_swept_spheres = linear_swept_spheres


struct AccelerationStructureGeometryMotionTrianglesDataNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_data: DeviceOrHostAddressConstKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV
        self.p_next = p_next
        self.vertex_data = vertex_data


struct AccelerationStructureMotionInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_instances: UInt32
    var flags: AccelerationStructureMotionInfoFlagsNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_instances: UInt32 = zero_init[UInt32](),
        flags: AccelerationStructureMotionInfoFlagsNV = zero_init[AccelerationStructureMotionInfoFlagsNV](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_MOTION_INFO_NV
        self.p_next = p_next
        self.max_instances = max_instances
        self.flags = flags


struct SRTDataNV(ImplicitlyCopyable, Movable):
    var sx: Float32
    var a: Float32
    var b: Float32
    var pvx: Float32
    var sy: Float32
    var c: Float32
    var pvy: Float32
    var sz: Float32
    var pvz: Float32
    var qx: Float32
    var qy: Float32
    var qz: Float32
    var qw: Float32
    var tx: Float32
    var ty: Float32
    var tz: Float32

    fn __init__(
        out self,
        sx: Float32 = zero_init[Float32](),
        a: Float32 = zero_init[Float32](),
        b: Float32 = zero_init[Float32](),
        pvx: Float32 = zero_init[Float32](),
        sy: Float32 = zero_init[Float32](),
        c: Float32 = zero_init[Float32](),
        pvy: Float32 = zero_init[Float32](),
        sz: Float32 = zero_init[Float32](),
        pvz: Float32 = zero_init[Float32](),
        qx: Float32 = zero_init[Float32](),
        qy: Float32 = zero_init[Float32](),
        qz: Float32 = zero_init[Float32](),
        qw: Float32 = zero_init[Float32](),
        tx: Float32 = zero_init[Float32](),
        ty: Float32 = zero_init[Float32](),
        tz: Float32 = zero_init[Float32](),
    ):
        self.sx = sx
        self.a = a
        self.b = b
        self.pvx = pvx
        self.sy = sy
        self.c = c
        self.pvy = pvy
        self.sz = sz
        self.pvz = pvz
        self.qx = qx
        self.qy = qy
        self.qz = qz
        self.qw = qw
        self.tx = tx
        self.ty = ty
        self.tz = tz


struct AccelerationStructureSRTMotionInstanceNV(ImplicitlyCopyable, Movable):
    var transform_t0: SRTDataNV
    var transform_t1: SRTDataNV
    var instance_custom_index: UInt32
    var mask: UInt32
    var instance_shader_binding_table_record_offset: UInt32
    var flags: GeometryInstanceFlagsKHR
    var acceleration_structure_reference: UInt64

    fn __init__(
        out self,
        transform_t0: SRTDataNV = zero_init[SRTDataNV](),
        transform_t1: SRTDataNV = zero_init[SRTDataNV](),
        instance_custom_index: UInt32 = zero_init[UInt32](),
        mask: UInt32 = zero_init[UInt32](),
        instance_shader_binding_table_record_offset: UInt32 = zero_init[UInt32](),
        flags: GeometryInstanceFlagsKHR = zero_init[GeometryInstanceFlagsKHR](),
        acceleration_structure_reference: UInt64 = zero_init[UInt64](),
    ):
        self.transform_t0 = transform_t0
        self.transform_t1 = transform_t1
        self.instance_custom_index = instance_custom_index
        self.mask = mask
        self.instance_shader_binding_table_record_offset = instance_shader_binding_table_record_offset
        self.flags = flags
        self.acceleration_structure_reference = acceleration_structure_reference


struct AccelerationStructureMatrixMotionInstanceNV(ImplicitlyCopyable, Movable):
    var transform_t0: TransformMatrixKHR
    var transform_t1: TransformMatrixKHR
    var instance_custom_index: UInt32
    var mask: UInt32
    var instance_shader_binding_table_record_offset: UInt32
    var flags: GeometryInstanceFlagsKHR
    var acceleration_structure_reference: UInt64

    fn __init__(
        out self,
        transform_t0: TransformMatrixKHR = zero_init[TransformMatrixKHR](),
        transform_t1: TransformMatrixKHR = zero_init[TransformMatrixKHR](),
        instance_custom_index: UInt32 = zero_init[UInt32](),
        mask: UInt32 = zero_init[UInt32](),
        instance_shader_binding_table_record_offset: UInt32 = zero_init[UInt32](),
        flags: GeometryInstanceFlagsKHR = zero_init[GeometryInstanceFlagsKHR](),
        acceleration_structure_reference: UInt64 = zero_init[UInt64](),
    ):
        self.transform_t0 = transform_t0
        self.transform_t1 = transform_t1
        self.instance_custom_index = instance_custom_index
        self.mask = mask
        self.instance_shader_binding_table_record_offset = instance_shader_binding_table_record_offset
        self.flags = flags
        self.acceleration_structure_reference = acceleration_structure_reference


struct AccelerationStructureMotionInstanceNV(ImplicitlyCopyable, Movable):
    var type: AccelerationStructureMotionInstanceTypeNV
    var flags: AccelerationStructureMotionInstanceFlagsNV
    var data: AccelerationStructureMotionInstanceDataNV

    fn __init__(
        out self,
        type: AccelerationStructureMotionInstanceTypeNV = zero_init[AccelerationStructureMotionInstanceTypeNV](),
        flags: AccelerationStructureMotionInstanceFlagsNV = zero_init[AccelerationStructureMotionInstanceFlagsNV](),
        data: AccelerationStructureMotionInstanceDataNV = zero_init[AccelerationStructureMotionInstanceDataNV](),
    ):
        self.type = type
        self.flags = flags
        self.data = data


struct MemoryGetRemoteAddressInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory
    var handle_type: ExternalMemoryHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.MEMORY_GET_REMOTE_ADDRESS_INFO_NV
        self.p_next = p_next
        self.memory = memory
        self.handle_type = handle_type


struct ImportMemoryBufferCollectionFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var collection: BufferCollectionFUCHSIA
    var index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        collection: BufferCollectionFUCHSIA = zero_init[BufferCollectionFUCHSIA](),
        index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA
        self.p_next = p_next
        self.collection = collection
        self.index = index


struct BufferCollectionImageCreateInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var collection: BufferCollectionFUCHSIA
    var index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        collection: BufferCollectionFUCHSIA = zero_init[BufferCollectionFUCHSIA](),
        index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA
        self.p_next = p_next
        self.collection = collection
        self.index = index


struct BufferCollectionBufferCreateInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var collection: BufferCollectionFUCHSIA
    var index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        collection: BufferCollectionFUCHSIA = zero_init[BufferCollectionFUCHSIA](),
        index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA
        self.p_next = p_next
        self.collection = collection
        self.index = index


struct BufferCollectionCreateInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var collection_token: zx_handle_t

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        collection_token: zx_handle_t = zero_init[zx_handle_t](),
    ):
        self.s_type = StructureType.BUFFER_COLLECTION_CREATE_INFO_FUCHSIA
        self.p_next = p_next
        self.collection_token = collection_token


struct BufferCollectionPropertiesFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_type_bits: UInt32
    var buffer_count: UInt32
    var create_info_index: UInt32
    var sysmem_pixel_format: UInt64
    var format_features: FormatFeatureFlags
    var sysmem_color_space_index: SysmemColorSpaceFUCHSIA
    var sampler_ycbcr_conversion_components: ComponentMapping
    var suggested_ycbcr_model: SamplerYcbcrModelConversion
    var suggested_ycbcr_range: SamplerYcbcrRange
    var suggested_x_chroma_offset: ChromaLocation
    var suggested_y_chroma_offset: ChromaLocation

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
        buffer_count: UInt32 = zero_init[UInt32](),
        create_info_index: UInt32 = zero_init[UInt32](),
        sysmem_pixel_format: UInt64 = zero_init[UInt64](),
        format_features: FormatFeatureFlags = zero_init[FormatFeatureFlags](),
        sysmem_color_space_index: SysmemColorSpaceFUCHSIA = zero_init[SysmemColorSpaceFUCHSIA](),
        sampler_ycbcr_conversion_components: ComponentMapping = zero_init[ComponentMapping](),
        suggested_ycbcr_model: SamplerYcbcrModelConversion = zero_init[SamplerYcbcrModelConversion](),
        suggested_ycbcr_range: SamplerYcbcrRange = zero_init[SamplerYcbcrRange](),
        suggested_x_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
        suggested_y_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
    ):
        self.s_type = StructureType.BUFFER_COLLECTION_PROPERTIES_FUCHSIA
        self.p_next = p_next
        self.memory_type_bits = memory_type_bits
        self.buffer_count = buffer_count
        self.create_info_index = create_info_index
        self.sysmem_pixel_format = sysmem_pixel_format
        self.format_features = format_features
        self.sysmem_color_space_index = sysmem_color_space_index
        self.sampler_ycbcr_conversion_components = sampler_ycbcr_conversion_components
        self.suggested_ycbcr_model = suggested_ycbcr_model
        self.suggested_ycbcr_range = suggested_ycbcr_range
        self.suggested_x_chroma_offset = suggested_x_chroma_offset
        self.suggested_y_chroma_offset = suggested_y_chroma_offset


struct BufferConstraintsInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var create_info: BufferCreateInfo
    var required_format_features: FormatFeatureFlags
    var buffer_collection_constraints: BufferCollectionConstraintsInfoFUCHSIA

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        create_info: BufferCreateInfo = zero_init[BufferCreateInfo](),
        required_format_features: FormatFeatureFlags = zero_init[FormatFeatureFlags](),
        buffer_collection_constraints: BufferCollectionConstraintsInfoFUCHSIA = zero_init[BufferCollectionConstraintsInfoFUCHSIA](),
    ):
        self.s_type = StructureType.BUFFER_CONSTRAINTS_INFO_FUCHSIA
        self.p_next = p_next
        self.create_info = create_info
        self.required_format_features = required_format_features
        self.buffer_collection_constraints = buffer_collection_constraints


struct SysmemColorSpaceFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var color_space: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        color_space: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.SYSMEM_COLOR_SPACE_FUCHSIA
        self.p_next = p_next
        self.color_space = color_space


struct ImageFormatConstraintsInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_create_info: ImageCreateInfo
    var required_format_features: FormatFeatureFlags
    var flags: ImageFormatConstraintsFlagsFUCHSIA
    var sysmem_pixel_format: UInt64
    var color_space_count: UInt32
    var p_color_spaces: Ptr[SysmemColorSpaceFUCHSIA]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_create_info: ImageCreateInfo = zero_init[ImageCreateInfo](),
        required_format_features: FormatFeatureFlags = zero_init[FormatFeatureFlags](),
        flags: ImageFormatConstraintsFlagsFUCHSIA = zero_init[ImageFormatConstraintsFlagsFUCHSIA](),
        sysmem_pixel_format: UInt64 = zero_init[UInt64](),
        color_space_count: UInt32 = zero_init[UInt32](),
        p_color_spaces: Ptr[SysmemColorSpaceFUCHSIA] = zero_init[Ptr[SysmemColorSpaceFUCHSIA]](),
    ):
        self.s_type = StructureType.IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA
        self.p_next = p_next
        self.image_create_info = image_create_info
        self.required_format_features = required_format_features
        self.flags = flags
        self.sysmem_pixel_format = sysmem_pixel_format
        self.color_space_count = color_space_count
        self.p_color_spaces = p_color_spaces


struct ImageConstraintsInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format_constraints_count: UInt32
    var p_format_constraints: Ptr[ImageFormatConstraintsInfoFUCHSIA]
    var buffer_collection_constraints: BufferCollectionConstraintsInfoFUCHSIA
    var flags: ImageConstraintsInfoFlagsFUCHSIA

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format_constraints_count: UInt32 = zero_init[UInt32](),
        p_format_constraints: Ptr[ImageFormatConstraintsInfoFUCHSIA] = zero_init[Ptr[ImageFormatConstraintsInfoFUCHSIA]](),
        buffer_collection_constraints: BufferCollectionConstraintsInfoFUCHSIA = zero_init[BufferCollectionConstraintsInfoFUCHSIA](),
        flags: ImageConstraintsInfoFlagsFUCHSIA = zero_init[ImageConstraintsInfoFlagsFUCHSIA](),
    ):
        self.s_type = StructureType.IMAGE_CONSTRAINTS_INFO_FUCHSIA
        self.p_next = p_next
        self.format_constraints_count = format_constraints_count
        self.p_format_constraints = p_format_constraints
        self.buffer_collection_constraints = buffer_collection_constraints
        self.flags = flags


struct BufferCollectionConstraintsInfoFUCHSIA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_buffer_count: UInt32
    var max_buffer_count: UInt32
    var min_buffer_count_for_camping: UInt32
    var min_buffer_count_for_dedicated_slack: UInt32
    var min_buffer_count_for_shared_slack: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_buffer_count: UInt32 = zero_init[UInt32](),
        max_buffer_count: UInt32 = zero_init[UInt32](),
        min_buffer_count_for_camping: UInt32 = zero_init[UInt32](),
        min_buffer_count_for_dedicated_slack: UInt32 = zero_init[UInt32](),
        min_buffer_count_for_shared_slack: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA
        self.p_next = p_next
        self.min_buffer_count = min_buffer_count
        self.max_buffer_count = max_buffer_count
        self.min_buffer_count_for_camping = min_buffer_count_for_camping
        self.min_buffer_count_for_dedicated_slack = min_buffer_count_for_dedicated_slack
        self.min_buffer_count_for_shared_slack = min_buffer_count_for_shared_slack


struct CudaModuleCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var data_size: UInt
    var p_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        data_size: UInt = zero_init[UInt](),
        p_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.CUDA_MODULE_CREATE_INFO_NV
        self.p_next = p_next
        self.data_size = data_size
        self.p_data = p_data


struct CudaFunctionCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var module: CudaModuleNV
    var p_name: Ptr[UInt8]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        module: CudaModuleNV = zero_init[CudaModuleNV](),
        p_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
    ):
        self.s_type = StructureType.CUDA_FUNCTION_CREATE_INFO_NV
        self.p_next = p_next
        self.module = module
        self.p_name = p_name


struct CudaLaunchInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var function: CudaFunctionNV
    var grid_dim_x: UInt32
    var grid_dim_y: UInt32
    var grid_dim_z: UInt32
    var block_dim_x: UInt32
    var block_dim_y: UInt32
    var block_dim_z: UInt32
    var shared_mem_bytes: UInt32
    var param_count: UInt
    var p_params: Ptr[Ptr[NoneType]]
    var extra_count: UInt
    var p_extras: Ptr[Ptr[NoneType]]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        function: CudaFunctionNV = zero_init[CudaFunctionNV](),
        grid_dim_x: UInt32 = zero_init[UInt32](),
        grid_dim_y: UInt32 = zero_init[UInt32](),
        grid_dim_z: UInt32 = zero_init[UInt32](),
        block_dim_x: UInt32 = zero_init[UInt32](),
        block_dim_y: UInt32 = zero_init[UInt32](),
        block_dim_z: UInt32 = zero_init[UInt32](),
        shared_mem_bytes: UInt32 = zero_init[UInt32](),
        param_count: UInt = zero_init[UInt](),
        p_params: Ptr[Ptr[NoneType]] = zero_init[Ptr[Ptr[NoneType]]](),
        extra_count: UInt = zero_init[UInt](),
        p_extras: Ptr[Ptr[NoneType]] = zero_init[Ptr[Ptr[NoneType]]](),
    ):
        self.s_type = StructureType.CUDA_LAUNCH_INFO_NV
        self.p_next = p_next
        self.function = function
        self.grid_dim_x = grid_dim_x
        self.grid_dim_y = grid_dim_y
        self.grid_dim_z = grid_dim_z
        self.block_dim_x = block_dim_x
        self.block_dim_y = block_dim_y
        self.block_dim_z = block_dim_z
        self.shared_mem_bytes = shared_mem_bytes
        self.param_count = param_count
        self.p_params = p_params
        self.extra_count = extra_count
        self.p_extras = p_extras


struct PhysicalDeviceRGBA10X6FormatsFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format_rgba_10_x_6_without_y_cb_cr_sampler: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format_rgba_10_x_6_without_y_cb_cr_sampler: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT
        self.p_next = p_next
        self.format_rgba_10_x_6_without_y_cb_cr_sampler = format_rgba_10_x_6_without_y_cb_cr_sampler


struct FormatProperties3(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var linear_tiling_features: FormatFeatureFlags2
    var optimal_tiling_features: FormatFeatureFlags2
    var buffer_features: FormatFeatureFlags2

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        linear_tiling_features: FormatFeatureFlags2 = zero_init[FormatFeatureFlags2](),
        optimal_tiling_features: FormatFeatureFlags2 = zero_init[FormatFeatureFlags2](),
        buffer_features: FormatFeatureFlags2 = zero_init[FormatFeatureFlags2](),
    ):
        self.s_type = StructureType.FORMAT_PROPERTIES_3
        self.p_next = p_next
        self.linear_tiling_features = linear_tiling_features
        self.optimal_tiling_features = optimal_tiling_features
        self.buffer_features = buffer_features


struct DrmFormatModifierPropertiesList2EXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var drm_format_modifier_count: UInt32
    var p_drm_format_modifier_properties: Ptr[DrmFormatModifierProperties2EXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        drm_format_modifier_count: UInt32 = zero_init[UInt32](),
        p_drm_format_modifier_properties: Ptr[DrmFormatModifierProperties2EXT] = zero_init[Ptr[DrmFormatModifierProperties2EXT]](),
    ):
        self.s_type = StructureType.DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT
        self.p_next = p_next
        self.drm_format_modifier_count = drm_format_modifier_count
        self.p_drm_format_modifier_properties = p_drm_format_modifier_properties


struct DrmFormatModifierProperties2EXT(ImplicitlyCopyable, Movable):
    var drm_format_modifier: UInt64
    var drm_format_modifier_plane_count: UInt32
    var drm_format_modifier_tiling_features: FormatFeatureFlags2

    fn __init__(
        out self,
        drm_format_modifier: UInt64 = zero_init[UInt64](),
        drm_format_modifier_plane_count: UInt32 = zero_init[UInt32](),
        drm_format_modifier_tiling_features: FormatFeatureFlags2 = zero_init[FormatFeatureFlags2](),
    ):
        self.drm_format_modifier = drm_format_modifier
        self.drm_format_modifier_plane_count = drm_format_modifier_plane_count
        self.drm_format_modifier_tiling_features = drm_format_modifier_tiling_features


struct AndroidHardwareBufferFormatProperties2ANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format: Format
    var external_format: UInt64
    var format_features: FormatFeatureFlags2
    var sampler_ycbcr_conversion_components: ComponentMapping
    var suggested_ycbcr_model: SamplerYcbcrModelConversion
    var suggested_ycbcr_range: SamplerYcbcrRange
    var suggested_x_chroma_offset: ChromaLocation
    var suggested_y_chroma_offset: ChromaLocation

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format: Format = zero_init[Format](),
        external_format: UInt64 = zero_init[UInt64](),
        format_features: FormatFeatureFlags2 = zero_init[FormatFeatureFlags2](),
        sampler_ycbcr_conversion_components: ComponentMapping = zero_init[ComponentMapping](),
        suggested_ycbcr_model: SamplerYcbcrModelConversion = zero_init[SamplerYcbcrModelConversion](),
        suggested_ycbcr_range: SamplerYcbcrRange = zero_init[SamplerYcbcrRange](),
        suggested_x_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
        suggested_y_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
    ):
        self.s_type = StructureType.ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID
        self.p_next = p_next
        self.format = format
        self.external_format = external_format
        self.format_features = format_features
        self.sampler_ycbcr_conversion_components = sampler_ycbcr_conversion_components
        self.suggested_ycbcr_model = suggested_ycbcr_model
        self.suggested_ycbcr_range = suggested_ycbcr_range
        self.suggested_x_chroma_offset = suggested_x_chroma_offset
        self.suggested_y_chroma_offset = suggested_y_chroma_offset


struct PipelineRenderingCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var view_mask: UInt32
    var color_attachment_count: UInt32
    var p_color_attachment_formats: Ptr[Format]
    var depth_attachment_format: Format
    var stencil_attachment_format: Format

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        view_mask: UInt32 = zero_init[UInt32](),
        color_attachment_count: UInt32 = zero_init[UInt32](),
        p_color_attachment_formats: Ptr[Format] = zero_init[Ptr[Format]](),
        depth_attachment_format: Format = zero_init[Format](),
        stencil_attachment_format: Format = zero_init[Format](),
    ):
        self.s_type = StructureType.PIPELINE_RENDERING_CREATE_INFO
        self.p_next = p_next
        self.view_mask = view_mask
        self.color_attachment_count = color_attachment_count
        self.p_color_attachment_formats = p_color_attachment_formats
        self.depth_attachment_format = depth_attachment_format
        self.stencil_attachment_format = stencil_attachment_format


struct RenderingInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: RenderingFlags
    var render_area: Rect2D
    var layer_count: UInt32
    var view_mask: UInt32
    var color_attachment_count: UInt32
    var p_color_attachments: Ptr[RenderingAttachmentInfo]
    var p_depth_attachment: Ptr[RenderingAttachmentInfo]
    var p_stencil_attachment: Ptr[RenderingAttachmentInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: RenderingFlags = zero_init[RenderingFlags](),
        render_area: Rect2D = zero_init[Rect2D](),
        layer_count: UInt32 = zero_init[UInt32](),
        view_mask: UInt32 = zero_init[UInt32](),
        color_attachment_count: UInt32 = zero_init[UInt32](),
        p_color_attachments: Ptr[RenderingAttachmentInfo] = zero_init[Ptr[RenderingAttachmentInfo]](),
        p_depth_attachment: Ptr[RenderingAttachmentInfo] = zero_init[Ptr[RenderingAttachmentInfo]](),
        p_stencil_attachment: Ptr[RenderingAttachmentInfo] = zero_init[Ptr[RenderingAttachmentInfo]](),
    ):
        self.s_type = StructureType.RENDERING_INFO
        self.p_next = p_next
        self.flags = flags
        self.render_area = render_area
        self.layer_count = layer_count
        self.view_mask = view_mask
        self.color_attachment_count = color_attachment_count
        self.p_color_attachments = p_color_attachments
        self.p_depth_attachment = p_depth_attachment
        self.p_stencil_attachment = p_stencil_attachment


struct RenderingEndInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.RENDERING_END_INFO_EXT
        self.p_next = p_next


struct RenderingAttachmentInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_view: ImageView
    var image_layout: ImageLayout
    var resolve_mode: ResolveModeFlagBits
    var resolve_image_view: ImageView
    var resolve_image_layout: ImageLayout
    var load_op: AttachmentLoadOp
    var store_op: AttachmentStoreOp
    var clear_value: ClearValue

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_view: ImageView = zero_init[ImageView](),
        image_layout: ImageLayout = zero_init[ImageLayout](),
        resolve_mode: ResolveModeFlagBits = zero_init[ResolveModeFlagBits](),
        resolve_image_view: ImageView = zero_init[ImageView](),
        resolve_image_layout: ImageLayout = zero_init[ImageLayout](),
        load_op: AttachmentLoadOp = zero_init[AttachmentLoadOp](),
        store_op: AttachmentStoreOp = zero_init[AttachmentStoreOp](),
        clear_value: ClearValue = zero_init[ClearValue](),
    ):
        self.s_type = StructureType.RENDERING_ATTACHMENT_INFO
        self.p_next = p_next
        self.image_view = image_view
        self.image_layout = image_layout
        self.resolve_mode = resolve_mode
        self.resolve_image_view = resolve_image_view
        self.resolve_image_layout = resolve_image_layout
        self.load_op = load_op
        self.store_op = store_op
        self.clear_value = clear_value


struct RenderingFragmentShadingRateAttachmentInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_view: ImageView
    var image_layout: ImageLayout
    var shading_rate_attachment_texel_size: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_view: ImageView = zero_init[ImageView](),
        image_layout: ImageLayout = zero_init[ImageLayout](),
        shading_rate_attachment_texel_size: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR
        self.p_next = p_next
        self.image_view = image_view
        self.image_layout = image_layout
        self.shading_rate_attachment_texel_size = shading_rate_attachment_texel_size


struct RenderingFragmentDensityMapAttachmentInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_view: ImageView
    var image_layout: ImageLayout

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_view: ImageView = zero_init[ImageView](),
        image_layout: ImageLayout = zero_init[ImageLayout](),
    ):
        self.s_type = StructureType.RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT
        self.p_next = p_next
        self.image_view = image_view
        self.image_layout = image_layout


struct PhysicalDeviceDynamicRenderingFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dynamic_rendering: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dynamic_rendering: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES
        self.p_next = p_next
        self.dynamic_rendering = dynamic_rendering


struct CommandBufferInheritanceRenderingInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: RenderingFlags
    var view_mask: UInt32
    var color_attachment_count: UInt32
    var p_color_attachment_formats: Ptr[Format]
    var depth_attachment_format: Format
    var stencil_attachment_format: Format
    var rasterization_samples: SampleCountFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: RenderingFlags = zero_init[RenderingFlags](),
        view_mask: UInt32 = zero_init[UInt32](),
        color_attachment_count: UInt32 = zero_init[UInt32](),
        p_color_attachment_formats: Ptr[Format] = zero_init[Ptr[Format]](),
        depth_attachment_format: Format = zero_init[Format](),
        stencil_attachment_format: Format = zero_init[Format](),
        rasterization_samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
    ):
        self.s_type = StructureType.COMMAND_BUFFER_INHERITANCE_RENDERING_INFO
        self.p_next = p_next
        self.flags = flags
        self.view_mask = view_mask
        self.color_attachment_count = color_attachment_count
        self.p_color_attachment_formats = p_color_attachment_formats
        self.depth_attachment_format = depth_attachment_format
        self.stencil_attachment_format = stencil_attachment_format
        self.rasterization_samples = rasterization_samples


struct AttachmentSampleCountInfoAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var color_attachment_count: UInt32
    var p_color_attachment_samples: Ptr[SampleCountFlagBits]
    var depth_stencil_attachment_samples: SampleCountFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        color_attachment_count: UInt32 = zero_init[UInt32](),
        p_color_attachment_samples: Ptr[SampleCountFlagBits] = zero_init[Ptr[SampleCountFlagBits]](),
        depth_stencil_attachment_samples: SampleCountFlagBits = zero_init[SampleCountFlagBits](),
    ):
        self.s_type = StructureType.ATTACHMENT_SAMPLE_COUNT_INFO_AMD
        self.p_next = p_next
        self.color_attachment_count = color_attachment_count
        self.p_color_attachment_samples = p_color_attachment_samples
        self.depth_stencil_attachment_samples = depth_stencil_attachment_samples


struct MultiviewPerViewAttributesInfoNVX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var per_view_attributes: Bool32
    var per_view_attributes_position_x_only: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        per_view_attributes: Bool32 = zero_init[Bool32](),
        per_view_attributes_position_x_only: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX
        self.p_next = p_next
        self.per_view_attributes = per_view_attributes
        self.per_view_attributes_position_x_only = per_view_attributes_position_x_only


struct PhysicalDeviceImageViewMinLodFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_lod: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_lod: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT
        self.p_next = p_next
        self.min_lod = min_lod


struct ImageViewMinLodCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_lod: Float32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_lod: Float32 = zero_init[Float32](),
    ):
        self.s_type = StructureType.IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT
        self.p_next = p_next
        self.min_lod = min_lod


struct PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var rasterization_order_color_attachment_access: Bool32
    var rasterization_order_depth_attachment_access: Bool32
    var rasterization_order_stencil_attachment_access: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        rasterization_order_color_attachment_access: Bool32 = zero_init[Bool32](),
        rasterization_order_depth_attachment_access: Bool32 = zero_init[Bool32](),
        rasterization_order_stencil_attachment_access: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT
        self.p_next = p_next
        self.rasterization_order_color_attachment_access = rasterization_order_color_attachment_access
        self.rasterization_order_depth_attachment_access = rasterization_order_depth_attachment_access
        self.rasterization_order_stencil_attachment_access = rasterization_order_stencil_attachment_access


struct PhysicalDeviceLinearColorAttachmentFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var linear_color_attachment: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        linear_color_attachment: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV
        self.p_next = p_next
        self.linear_color_attachment = linear_color_attachment


struct PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var graphics_pipeline_library: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        graphics_pipeline_library: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT
        self.p_next = p_next
        self.graphics_pipeline_library = graphics_pipeline_library


struct PhysicalDevicePipelineBinaryFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_binaries: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_binaries: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR
        self.p_next = p_next
        self.pipeline_binaries = pipeline_binaries


struct DevicePipelineBinaryInternalCacheControlKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var disable_internal_cache: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        disable_internal_cache: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.DEVICE_PIPELINE_BINARY_INTERNAL_CACHE_CONTROL_KHR
        self.p_next = p_next
        self.disable_internal_cache = disable_internal_cache


struct PhysicalDevicePipelineBinaryPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_binary_internal_cache: Bool32
    var pipeline_binary_internal_cache_control: Bool32
    var pipeline_binary_prefers_internal_cache: Bool32
    var pipeline_binary_precompiled_internal_cache: Bool32
    var pipeline_binary_compressed_data: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_binary_internal_cache: Bool32 = zero_init[Bool32](),
        pipeline_binary_internal_cache_control: Bool32 = zero_init[Bool32](),
        pipeline_binary_prefers_internal_cache: Bool32 = zero_init[Bool32](),
        pipeline_binary_precompiled_internal_cache: Bool32 = zero_init[Bool32](),
        pipeline_binary_compressed_data: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_BINARY_PROPERTIES_KHR
        self.p_next = p_next
        self.pipeline_binary_internal_cache = pipeline_binary_internal_cache
        self.pipeline_binary_internal_cache_control = pipeline_binary_internal_cache_control
        self.pipeline_binary_prefers_internal_cache = pipeline_binary_prefers_internal_cache
        self.pipeline_binary_precompiled_internal_cache = pipeline_binary_precompiled_internal_cache
        self.pipeline_binary_compressed_data = pipeline_binary_compressed_data


struct PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var graphics_pipeline_library_fast_linking: Bool32
    var graphics_pipeline_library_independent_interpolation_decoration: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        graphics_pipeline_library_fast_linking: Bool32 = zero_init[Bool32](),
        graphics_pipeline_library_independent_interpolation_decoration: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT
        self.p_next = p_next
        self.graphics_pipeline_library_fast_linking = graphics_pipeline_library_fast_linking
        self.graphics_pipeline_library_independent_interpolation_decoration = graphics_pipeline_library_independent_interpolation_decoration


struct GraphicsPipelineLibraryCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: GraphicsPipelineLibraryFlagsEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: GraphicsPipelineLibraryFlagsEXT = zero_init[GraphicsPipelineLibraryFlagsEXT](),
    ):
        self.s_type = StructureType.GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags


struct PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_set_host_mapping: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_set_host_mapping: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE
        self.p_next = p_next
        self.descriptor_set_host_mapping = descriptor_set_host_mapping


struct DescriptorSetBindingReferenceVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_set_layout: DescriptorSetLayout
    var binding: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_set_layout: DescriptorSetLayout = zero_init[DescriptorSetLayout](),
        binding: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DESCRIPTOR_SET_BINDING_REFERENCE_VALVE
        self.p_next = p_next
        self.descriptor_set_layout = descriptor_set_layout
        self.binding = binding


struct DescriptorSetLayoutHostMappingInfoVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_offset: UInt
    var descriptor_size: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_offset: UInt = zero_init[UInt](),
        descriptor_size: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE
        self.p_next = p_next
        self.descriptor_offset = descriptor_offset
        self.descriptor_size = descriptor_size


struct PhysicalDeviceNestedCommandBufferFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var nested_command_buffer: Bool32
    var nested_command_buffer_rendering: Bool32
    var nested_command_buffer_simultaneous_use: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        nested_command_buffer: Bool32 = zero_init[Bool32](),
        nested_command_buffer_rendering: Bool32 = zero_init[Bool32](),
        nested_command_buffer_simultaneous_use: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT
        self.p_next = p_next
        self.nested_command_buffer = nested_command_buffer
        self.nested_command_buffer_rendering = nested_command_buffer_rendering
        self.nested_command_buffer_simultaneous_use = nested_command_buffer_simultaneous_use


struct PhysicalDeviceNestedCommandBufferPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_command_buffer_nesting_level: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_command_buffer_nesting_level: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_PROPERTIES_EXT
        self.p_next = p_next
        self.max_command_buffer_nesting_level = max_command_buffer_nesting_level


struct PhysicalDeviceShaderModuleIdentifierFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_module_identifier: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_module_identifier: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT
        self.p_next = p_next
        self.shader_module_identifier = shader_module_identifier


struct PhysicalDeviceShaderModuleIdentifierPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_module_identifier_algorithm_uuid: InlineArray[UInt8, Int(UUID_SIZE)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_module_identifier_algorithm_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT
        self.p_next = p_next
        self.shader_module_identifier_algorithm_uuid = shader_module_identifier_algorithm_uuid


struct PipelineShaderStageModuleIdentifierCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var identifier_size: UInt32
    var p_identifier: Ptr[UInt8]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        identifier_size: UInt32 = zero_init[UInt32](),
        p_identifier: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
    ):
        self.s_type = StructureType.PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT
        self.p_next = p_next
        self.identifier_size = identifier_size
        self.p_identifier = p_identifier


struct ShaderModuleIdentifierEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var identifier_size: UInt32
    var identifier: InlineArray[UInt8, Int(MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        identifier_size: UInt32 = zero_init[UInt32](),
        identifier: InlineArray[UInt8, Int(MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT)] = zero_init[InlineArray[UInt8, Int(MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT)]](),
    ):
        self.s_type = StructureType.SHADER_MODULE_IDENTIFIER_EXT
        self.p_next = p_next
        self.identifier_size = identifier_size
        self.identifier = identifier


struct ImageCompressionControlEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ImageCompressionFlagsEXT
    var compression_control_plane_count: UInt32
    var p_fixed_rate_flags: Ptr[ImageCompressionFixedRateFlagsEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ImageCompressionFlagsEXT = zero_init[ImageCompressionFlagsEXT](),
        compression_control_plane_count: UInt32 = zero_init[UInt32](),
        p_fixed_rate_flags: Ptr[ImageCompressionFixedRateFlagsEXT] = zero_init[Ptr[ImageCompressionFixedRateFlagsEXT]](),
    ):
        self.s_type = StructureType.IMAGE_COMPRESSION_CONTROL_EXT
        self.p_next = p_next
        self.flags = flags
        self.compression_control_plane_count = compression_control_plane_count
        self.p_fixed_rate_flags = p_fixed_rate_flags


struct PhysicalDeviceImageCompressionControlFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_compression_control: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_compression_control: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT
        self.p_next = p_next
        self.image_compression_control = image_compression_control


struct ImageCompressionPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_compression_flags: ImageCompressionFlagsEXT
    var image_compression_fixed_rate_flags: ImageCompressionFixedRateFlagsEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_compression_flags: ImageCompressionFlagsEXT = zero_init[ImageCompressionFlagsEXT](),
        image_compression_fixed_rate_flags: ImageCompressionFixedRateFlagsEXT = zero_init[ImageCompressionFixedRateFlagsEXT](),
    ):
        self.s_type = StructureType.IMAGE_COMPRESSION_PROPERTIES_EXT
        self.p_next = p_next
        self.image_compression_flags = image_compression_flags
        self.image_compression_fixed_rate_flags = image_compression_fixed_rate_flags


struct PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_compression_control_swapchain: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_compression_control_swapchain: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT
        self.p_next = p_next
        self.image_compression_control_swapchain = image_compression_control_swapchain


struct ImageSubresource2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_subresource: ImageSubresource

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_subresource: ImageSubresource = zero_init[ImageSubresource](),
    ):
        self.s_type = StructureType.IMAGE_SUBRESOURCE_2
        self.p_next = p_next
        self.image_subresource = image_subresource


struct SubresourceLayout2(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var subresource_layout: SubresourceLayout

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        subresource_layout: SubresourceLayout = zero_init[SubresourceLayout](),
    ):
        self.s_type = StructureType.SUBRESOURCE_LAYOUT_2
        self.p_next = p_next
        self.subresource_layout = subresource_layout


struct RenderPassCreationControlEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var disallow_merging: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        disallow_merging: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.RENDER_PASS_CREATION_CONTROL_EXT
        self.p_next = p_next
        self.disallow_merging = disallow_merging


struct RenderPassCreationFeedbackInfoEXT(ImplicitlyCopyable, Movable):
    var post_merge_subpass_count: UInt32

    fn __init__(
        out self,
        post_merge_subpass_count: UInt32 = zero_init[UInt32](),
    ):
        self.post_merge_subpass_count = post_merge_subpass_count


struct RenderPassCreationFeedbackCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_render_pass_feedback: Ptr[RenderPassCreationFeedbackInfoEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_render_pass_feedback: Ptr[RenderPassCreationFeedbackInfoEXT] = zero_init[Ptr[RenderPassCreationFeedbackInfoEXT]](),
    ):
        self.s_type = StructureType.RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT
        self.p_next = p_next
        self.p_render_pass_feedback = p_render_pass_feedback


struct RenderPassSubpassFeedbackInfoEXT(ImplicitlyCopyable, Movable):
    var subpass_merge_status: SubpassMergeStatusEXT
    var description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var post_merge_index: UInt32

    fn __init__(
        out self,
        subpass_merge_status: SubpassMergeStatusEXT = zero_init[SubpassMergeStatusEXT](),
        description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        post_merge_index: UInt32 = zero_init[UInt32](),
    ):
        self.subpass_merge_status = subpass_merge_status
        self.description = description
        self.post_merge_index = post_merge_index

    fn description_slice(self) -> StringSlice[__origin_of(self.description)]:
        return StringSlice[__origin_of(self.description)](unsafe_from_utf8_ptr = self.description.unsafe_ptr())


struct RenderPassSubpassFeedbackCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_subpass_feedback: Ptr[RenderPassSubpassFeedbackInfoEXT]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_subpass_feedback: Ptr[RenderPassSubpassFeedbackInfoEXT] = zero_init[Ptr[RenderPassSubpassFeedbackInfoEXT]](),
    ):
        self.s_type = StructureType.RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT
        self.p_next = p_next
        self.p_subpass_feedback = p_subpass_feedback


struct PhysicalDeviceSubpassMergeFeedbackFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var subpass_merge_feedback: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        subpass_merge_feedback: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT
        self.p_next = p_next
        self.subpass_merge_feedback = subpass_merge_feedback


struct MicromapBuildInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var type: MicromapTypeEXT
    var flags: BuildMicromapFlagsEXT
    var mode: BuildMicromapModeEXT
    var dst_micromap: MicromapEXT
    var usage_counts_count: UInt32
    var p_usage_counts: Ptr[MicromapUsageEXT]
    var pp_usage_counts: Ptr[Ptr[MicromapUsageEXT]]
    var data: DeviceOrHostAddressConstKHR
    var scratch_data: DeviceOrHostAddressKHR
    var triangle_array: DeviceOrHostAddressConstKHR
    var triangle_array_stride: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        type: MicromapTypeEXT = zero_init[MicromapTypeEXT](),
        flags: BuildMicromapFlagsEXT = zero_init[BuildMicromapFlagsEXT](),
        mode: BuildMicromapModeEXT = zero_init[BuildMicromapModeEXT](),
        dst_micromap: MicromapEXT = zero_init[MicromapEXT](),
        usage_counts_count: UInt32 = zero_init[UInt32](),
        p_usage_counts: Ptr[MicromapUsageEXT] = zero_init[Ptr[MicromapUsageEXT]](),
        pp_usage_counts: Ptr[Ptr[MicromapUsageEXT]] = zero_init[Ptr[Ptr[MicromapUsageEXT]]](),
        data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        scratch_data: DeviceOrHostAddressKHR = zero_init[DeviceOrHostAddressKHR](),
        triangle_array: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        triangle_array_stride: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.MICROMAP_BUILD_INFO_EXT
        self.p_next = p_next
        self.type = type
        self.flags = flags
        self.mode = mode
        self.dst_micromap = dst_micromap
        self.usage_counts_count = usage_counts_count
        self.p_usage_counts = p_usage_counts
        self.pp_usage_counts = pp_usage_counts
        self.data = data
        self.scratch_data = scratch_data
        self.triangle_array = triangle_array
        self.triangle_array_stride = triangle_array_stride


struct MicromapCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var create_flags: MicromapCreateFlagsEXT
    var buffer: Buffer
    var offset: DeviceSize
    var size: DeviceSize
    var type: MicromapTypeEXT
    var device_address: DeviceAddress

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        create_flags: MicromapCreateFlagsEXT = zero_init[MicromapCreateFlagsEXT](),
        buffer: Buffer = zero_init[Buffer](),
        offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
        type: MicromapTypeEXT = zero_init[MicromapTypeEXT](),
        device_address: DeviceAddress = zero_init[DeviceAddress](),
    ):
        self.s_type = StructureType.MICROMAP_CREATE_INFO_EXT
        self.p_next = p_next
        self.create_flags = create_flags
        self.buffer = buffer
        self.offset = offset
        self.size = size
        self.type = type
        self.device_address = device_address


struct MicromapVersionInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_version_data: Ptr[UInt8]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_version_data: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
    ):
        self.s_type = StructureType.MICROMAP_VERSION_INFO_EXT
        self.p_next = p_next
        self.p_version_data = p_version_data


struct CopyMicromapInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src: MicromapEXT
    var dst: MicromapEXT
    var mode: CopyMicromapModeEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src: MicromapEXT = zero_init[MicromapEXT](),
        dst: MicromapEXT = zero_init[MicromapEXT](),
        mode: CopyMicromapModeEXT = zero_init[CopyMicromapModeEXT](),
    ):
        self.s_type = StructureType.COPY_MICROMAP_INFO_EXT
        self.p_next = p_next
        self.src = src
        self.dst = dst
        self.mode = mode


struct CopyMicromapToMemoryInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src: MicromapEXT
    var dst: DeviceOrHostAddressKHR
    var mode: CopyMicromapModeEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src: MicromapEXT = zero_init[MicromapEXT](),
        dst: DeviceOrHostAddressKHR = zero_init[DeviceOrHostAddressKHR](),
        mode: CopyMicromapModeEXT = zero_init[CopyMicromapModeEXT](),
    ):
        self.s_type = StructureType.COPY_MICROMAP_TO_MEMORY_INFO_EXT
        self.p_next = p_next
        self.src = src
        self.dst = dst
        self.mode = mode


struct CopyMemoryToMicromapInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src: DeviceOrHostAddressConstKHR
    var dst: MicromapEXT
    var mode: CopyMicromapModeEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        dst: MicromapEXT = zero_init[MicromapEXT](),
        mode: CopyMicromapModeEXT = zero_init[CopyMicromapModeEXT](),
    ):
        self.s_type = StructureType.COPY_MEMORY_TO_MICROMAP_INFO_EXT
        self.p_next = p_next
        self.src = src
        self.dst = dst
        self.mode = mode


struct MicromapBuildSizesInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var micromap_size: DeviceSize
    var build_scratch_size: DeviceSize
    var discardable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        micromap_size: DeviceSize = zero_init[DeviceSize](),
        build_scratch_size: DeviceSize = zero_init[DeviceSize](),
        discardable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.MICROMAP_BUILD_SIZES_INFO_EXT
        self.p_next = p_next
        self.micromap_size = micromap_size
        self.build_scratch_size = build_scratch_size
        self.discardable = discardable


struct MicromapUsageEXT(ImplicitlyCopyable, Movable):
    var count: UInt32
    var subdivision_level: UInt32
    var format: UInt32

    fn __init__(
        out self,
        count: UInt32 = zero_init[UInt32](),
        subdivision_level: UInt32 = zero_init[UInt32](),
        format: UInt32 = zero_init[UInt32](),
    ):
        self.count = count
        self.subdivision_level = subdivision_level
        self.format = format


struct MicromapTriangleEXT(ImplicitlyCopyable, Movable):
    var data_offset: UInt32
    var subdivision_level: UInt16
    var format: UInt16

    fn __init__(
        out self,
        data_offset: UInt32 = zero_init[UInt32](),
        subdivision_level: UInt16 = zero_init[UInt16](),
        format: UInt16 = zero_init[UInt16](),
    ):
        self.data_offset = data_offset
        self.subdivision_level = subdivision_level
        self.format = format


struct PhysicalDeviceOpacityMicromapFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var micromap: Bool32
    var micromap_capture_replay: Bool32
    var micromap_host_commands: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        micromap: Bool32 = zero_init[Bool32](),
        micromap_capture_replay: Bool32 = zero_init[Bool32](),
        micromap_host_commands: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT
        self.p_next = p_next
        self.micromap = micromap
        self.micromap_capture_replay = micromap_capture_replay
        self.micromap_host_commands = micromap_host_commands


struct PhysicalDeviceOpacityMicromapPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_opacity_2_state_subdivision_level: UInt32
    var max_opacity_4_state_subdivision_level: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_opacity_2_state_subdivision_level: UInt32 = zero_init[UInt32](),
        max_opacity_4_state_subdivision_level: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_OPACITY_MICROMAP_PROPERTIES_EXT
        self.p_next = p_next
        self.max_opacity_2_state_subdivision_level = max_opacity_2_state_subdivision_level
        self.max_opacity_4_state_subdivision_level = max_opacity_4_state_subdivision_level


struct AccelerationStructureTrianglesOpacityMicromapEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var index_type: IndexType
    var index_buffer: DeviceOrHostAddressConstKHR
    var index_stride: DeviceSize
    var base_triangle: UInt32
    var usage_counts_count: UInt32
    var p_usage_counts: Ptr[MicromapUsageEXT]
    var pp_usage_counts: Ptr[Ptr[MicromapUsageEXT]]
    var micromap: MicromapEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        index_type: IndexType = zero_init[IndexType](),
        index_buffer: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        index_stride: DeviceSize = zero_init[DeviceSize](),
        base_triangle: UInt32 = zero_init[UInt32](),
        usage_counts_count: UInt32 = zero_init[UInt32](),
        p_usage_counts: Ptr[MicromapUsageEXT] = zero_init[Ptr[MicromapUsageEXT]](),
        pp_usage_counts: Ptr[Ptr[MicromapUsageEXT]] = zero_init[Ptr[Ptr[MicromapUsageEXT]]](),
        micromap: MicromapEXT = zero_init[MicromapEXT](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_TRIANGLES_OPACITY_MICROMAP_EXT
        self.p_next = p_next
        self.index_type = index_type
        self.index_buffer = index_buffer
        self.index_stride = index_stride
        self.base_triangle = base_triangle
        self.usage_counts_count = usage_counts_count
        self.p_usage_counts = p_usage_counts
        self.pp_usage_counts = pp_usage_counts
        self.micromap = micromap


struct PhysicalDeviceDisplacementMicromapFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var displacement_micromap: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        displacement_micromap: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_FEATURES_NV
        self.p_next = p_next
        self.displacement_micromap = displacement_micromap


struct PhysicalDeviceDisplacementMicromapPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_displacement_micromap_subdivision_level: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_displacement_micromap_subdivision_level: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DISPLACEMENT_MICROMAP_PROPERTIES_NV
        self.p_next = p_next
        self.max_displacement_micromap_subdivision_level = max_displacement_micromap_subdivision_level


struct AccelerationStructureTrianglesDisplacementMicromapNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var displacement_bias_and_scale_format: Format
    var displacement_vector_format: Format
    var displacement_bias_and_scale_buffer: DeviceOrHostAddressConstKHR
    var displacement_bias_and_scale_stride: DeviceSize
    var displacement_vector_buffer: DeviceOrHostAddressConstKHR
    var displacement_vector_stride: DeviceSize
    var displaced_micromap_primitive_flags: DeviceOrHostAddressConstKHR
    var displaced_micromap_primitive_flags_stride: DeviceSize
    var index_type: IndexType
    var index_buffer: DeviceOrHostAddressConstKHR
    var index_stride: DeviceSize
    var base_triangle: UInt32
    var usage_counts_count: UInt32
    var p_usage_counts: Ptr[MicromapUsageEXT]
    var pp_usage_counts: Ptr[Ptr[MicromapUsageEXT]]
    var micromap: MicromapEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        displacement_bias_and_scale_format: Format = zero_init[Format](),
        displacement_vector_format: Format = zero_init[Format](),
        displacement_bias_and_scale_buffer: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        displacement_bias_and_scale_stride: DeviceSize = zero_init[DeviceSize](),
        displacement_vector_buffer: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        displacement_vector_stride: DeviceSize = zero_init[DeviceSize](),
        displaced_micromap_primitive_flags: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        displaced_micromap_primitive_flags_stride: DeviceSize = zero_init[DeviceSize](),
        index_type: IndexType = zero_init[IndexType](),
        index_buffer: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        index_stride: DeviceSize = zero_init[DeviceSize](),
        base_triangle: UInt32 = zero_init[UInt32](),
        usage_counts_count: UInt32 = zero_init[UInt32](),
        p_usage_counts: Ptr[MicromapUsageEXT] = zero_init[Ptr[MicromapUsageEXT]](),
        pp_usage_counts: Ptr[Ptr[MicromapUsageEXT]] = zero_init[Ptr[Ptr[MicromapUsageEXT]]](),
        micromap: MicromapEXT = zero_init[MicromapEXT](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_TRIANGLES_DISPLACEMENT_MICROMAP_NV
        self.p_next = p_next
        self.displacement_bias_and_scale_format = displacement_bias_and_scale_format
        self.displacement_vector_format = displacement_vector_format
        self.displacement_bias_and_scale_buffer = displacement_bias_and_scale_buffer
        self.displacement_bias_and_scale_stride = displacement_bias_and_scale_stride
        self.displacement_vector_buffer = displacement_vector_buffer
        self.displacement_vector_stride = displacement_vector_stride
        self.displaced_micromap_primitive_flags = displaced_micromap_primitive_flags
        self.displaced_micromap_primitive_flags_stride = displaced_micromap_primitive_flags_stride
        self.index_type = index_type
        self.index_buffer = index_buffer
        self.index_stride = index_stride
        self.base_triangle = base_triangle
        self.usage_counts_count = usage_counts_count
        self.p_usage_counts = p_usage_counts
        self.pp_usage_counts = pp_usage_counts
        self.micromap = micromap


struct PipelinePropertiesIdentifierEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_identifier: InlineArray[UInt8, Int(UUID_SIZE)]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_identifier: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
    ):
        self.s_type = StructureType.PIPELINE_PROPERTIES_IDENTIFIER_EXT
        self.p_next = p_next
        self.pipeline_identifier = pipeline_identifier


struct PhysicalDevicePipelinePropertiesFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_properties_identifier: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_properties_identifier: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT
        self.p_next = p_next
        self.pipeline_properties_identifier = pipeline_properties_identifier


struct PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_early_and_late_fragment_tests: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_early_and_late_fragment_tests: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD
        self.p_next = p_next
        self.shader_early_and_late_fragment_tests = shader_early_and_late_fragment_tests


struct ExternalMemoryAcquireUnmodifiedEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var acquire_unmodified_memory: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        acquire_unmodified_memory: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.EXTERNAL_MEMORY_ACQUIRE_UNMODIFIED_EXT
        self.p_next = p_next
        self.acquire_unmodified_memory = acquire_unmodified_memory


struct ExportMetalObjectCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var export_object_type: ExportMetalObjectTypeFlagBitsEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        export_object_type: ExportMetalObjectTypeFlagBitsEXT = zero_init[ExportMetalObjectTypeFlagBitsEXT](),
    ):
        self.s_type = StructureType.EXPORT_METAL_OBJECT_CREATE_INFO_EXT
        self.p_next = p_next
        self.export_object_type = export_object_type


struct ExportMetalObjectsInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.EXPORT_METAL_OBJECTS_INFO_EXT
        self.p_next = p_next


struct ExportMetalDeviceInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var mtl_device: MTLDevice_id

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        mtl_device: MTLDevice_id = zero_init[MTLDevice_id](),
    ):
        self.s_type = StructureType.EXPORT_METAL_DEVICE_INFO_EXT
        self.p_next = p_next
        self.mtl_device = mtl_device


struct ExportMetalCommandQueueInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var queue: Queue
    var mtl_command_queue: MTLCommandQueue_id

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        queue: Queue = zero_init[Queue](),
        mtl_command_queue: MTLCommandQueue_id = zero_init[MTLCommandQueue_id](),
    ):
        self.s_type = StructureType.EXPORT_METAL_COMMAND_QUEUE_INFO_EXT
        self.p_next = p_next
        self.queue = queue
        self.mtl_command_queue = mtl_command_queue


struct ExportMetalBufferInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory
    var mtl_buffer: MTLBuffer_id

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        mtl_buffer: MTLBuffer_id = zero_init[MTLBuffer_id](),
    ):
        self.s_type = StructureType.EXPORT_METAL_BUFFER_INFO_EXT
        self.p_next = p_next
        self.memory = memory
        self.mtl_buffer = mtl_buffer


struct ImportMetalBufferInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var mtl_buffer: MTLBuffer_id

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        mtl_buffer: MTLBuffer_id = zero_init[MTLBuffer_id](),
    ):
        self.s_type = StructureType.IMPORT_METAL_BUFFER_INFO_EXT
        self.p_next = p_next
        self.mtl_buffer = mtl_buffer


struct ExportMetalTextureInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image: Image
    var image_view: ImageView
    var buffer_view: BufferView
    var plane: ImageAspectFlagBits
    var mtl_texture: MTLTexture_id

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image: Image = zero_init[Image](),
        image_view: ImageView = zero_init[ImageView](),
        buffer_view: BufferView = zero_init[BufferView](),
        plane: ImageAspectFlagBits = zero_init[ImageAspectFlagBits](),
        mtl_texture: MTLTexture_id = zero_init[MTLTexture_id](),
    ):
        self.s_type = StructureType.EXPORT_METAL_TEXTURE_INFO_EXT
        self.p_next = p_next
        self.image = image
        self.image_view = image_view
        self.buffer_view = buffer_view
        self.plane = plane
        self.mtl_texture = mtl_texture


struct ImportMetalTextureInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var plane: ImageAspectFlagBits
    var mtl_texture: MTLTexture_id

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        plane: ImageAspectFlagBits = zero_init[ImageAspectFlagBits](),
        mtl_texture: MTLTexture_id = zero_init[MTLTexture_id](),
    ):
        self.s_type = StructureType.IMPORT_METAL_TEXTURE_INFO_EXT
        self.p_next = p_next
        self.plane = plane
        self.mtl_texture = mtl_texture


struct ExportMetalIOSurfaceInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image: Image
    var io_surface: IOSurfaceRef

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image: Image = zero_init[Image](),
        io_surface: IOSurfaceRef = zero_init[IOSurfaceRef](),
    ):
        self.s_type = StructureType.EXPORT_METAL_IO_SURFACE_INFO_EXT
        self.p_next = p_next
        self.image = image
        self.io_surface = io_surface


struct ImportMetalIOSurfaceInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var io_surface: IOSurfaceRef

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        io_surface: IOSurfaceRef = zero_init[IOSurfaceRef](),
    ):
        self.s_type = StructureType.IMPORT_METAL_IO_SURFACE_INFO_EXT
        self.p_next = p_next
        self.io_surface = io_surface


struct ExportMetalSharedEventInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var semaphore: Semaphore
    var event: Event
    var mtl_shared_event: MTLSharedEvent_id

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        semaphore: Semaphore = zero_init[Semaphore](),
        event: Event = zero_init[Event](),
        mtl_shared_event: MTLSharedEvent_id = zero_init[MTLSharedEvent_id](),
    ):
        self.s_type = StructureType.EXPORT_METAL_SHARED_EVENT_INFO_EXT
        self.p_next = p_next
        self.semaphore = semaphore
        self.event = event
        self.mtl_shared_event = mtl_shared_event


struct ImportMetalSharedEventInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var mtl_shared_event: MTLSharedEvent_id

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        mtl_shared_event: MTLSharedEvent_id = zero_init[MTLSharedEvent_id](),
    ):
        self.s_type = StructureType.IMPORT_METAL_SHARED_EVENT_INFO_EXT
        self.p_next = p_next
        self.mtl_shared_event = mtl_shared_event


struct PhysicalDeviceNonSeamlessCubeMapFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var non_seamless_cube_map: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        non_seamless_cube_map: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT
        self.p_next = p_next
        self.non_seamless_cube_map = non_seamless_cube_map


struct PhysicalDevicePipelineRobustnessFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_robustness: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_robustness: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES
        self.p_next = p_next
        self.pipeline_robustness = pipeline_robustness


struct PipelineRobustnessCreateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var storage_buffers: PipelineRobustnessBufferBehavior
    var uniform_buffers: PipelineRobustnessBufferBehavior
    var vertex_inputs: PipelineRobustnessBufferBehavior
    var images: PipelineRobustnessImageBehavior

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        storage_buffers: PipelineRobustnessBufferBehavior = zero_init[PipelineRobustnessBufferBehavior](),
        uniform_buffers: PipelineRobustnessBufferBehavior = zero_init[PipelineRobustnessBufferBehavior](),
        vertex_inputs: PipelineRobustnessBufferBehavior = zero_init[PipelineRobustnessBufferBehavior](),
        images: PipelineRobustnessImageBehavior = zero_init[PipelineRobustnessImageBehavior](),
    ):
        self.s_type = StructureType.PIPELINE_ROBUSTNESS_CREATE_INFO
        self.p_next = p_next
        self.storage_buffers = storage_buffers
        self.uniform_buffers = uniform_buffers
        self.vertex_inputs = vertex_inputs
        self.images = images


struct PhysicalDevicePipelineRobustnessProperties(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var default_robustness_storage_buffers: PipelineRobustnessBufferBehavior
    var default_robustness_uniform_buffers: PipelineRobustnessBufferBehavior
    var default_robustness_vertex_inputs: PipelineRobustnessBufferBehavior
    var default_robustness_images: PipelineRobustnessImageBehavior

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        default_robustness_storage_buffers: PipelineRobustnessBufferBehavior = zero_init[PipelineRobustnessBufferBehavior](),
        default_robustness_uniform_buffers: PipelineRobustnessBufferBehavior = zero_init[PipelineRobustnessBufferBehavior](),
        default_robustness_vertex_inputs: PipelineRobustnessBufferBehavior = zero_init[PipelineRobustnessBufferBehavior](),
        default_robustness_images: PipelineRobustnessImageBehavior = zero_init[PipelineRobustnessImageBehavior](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES
        self.p_next = p_next
        self.default_robustness_storage_buffers = default_robustness_storage_buffers
        self.default_robustness_uniform_buffers = default_robustness_uniform_buffers
        self.default_robustness_vertex_inputs = default_robustness_vertex_inputs
        self.default_robustness_images = default_robustness_images


struct ImageViewSampleWeightCreateInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var filter_center: Offset2D
    var filter_size: Extent2D
    var num_phases: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        filter_center: Offset2D = zero_init[Offset2D](),
        filter_size: Extent2D = zero_init[Extent2D](),
        num_phases: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM
        self.p_next = p_next
        self.filter_center = filter_center
        self.filter_size = filter_size
        self.num_phases = num_phases


struct PhysicalDeviceImageProcessingFeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var texture_sample_weighted: Bool32
    var texture_box_filter: Bool32
    var texture_block_match: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        texture_sample_weighted: Bool32 = zero_init[Bool32](),
        texture_box_filter: Bool32 = zero_init[Bool32](),
        texture_block_match: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM
        self.p_next = p_next
        self.texture_sample_weighted = texture_sample_weighted
        self.texture_box_filter = texture_box_filter
        self.texture_block_match = texture_block_match


struct PhysicalDeviceImageProcessingPropertiesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_weight_filter_phases: UInt32
    var max_weight_filter_dimension: Extent2D
    var max_block_match_region: Extent2D
    var max_box_filter_block_size: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_weight_filter_phases: UInt32 = zero_init[UInt32](),
        max_weight_filter_dimension: Extent2D = zero_init[Extent2D](),
        max_block_match_region: Extent2D = zero_init[Extent2D](),
        max_box_filter_block_size: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM
        self.p_next = p_next
        self.max_weight_filter_phases = max_weight_filter_phases
        self.max_weight_filter_dimension = max_weight_filter_dimension
        self.max_block_match_region = max_block_match_region
        self.max_box_filter_block_size = max_box_filter_block_size


struct PhysicalDeviceTilePropertiesFeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tile_properties: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tile_properties: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM
        self.p_next = p_next
        self.tile_properties = tile_properties


struct TilePropertiesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tile_size: Extent3D
    var apron_size: Extent2D
    var origin: Offset2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tile_size: Extent3D = zero_init[Extent3D](),
        apron_size: Extent2D = zero_init[Extent2D](),
        origin: Offset2D = zero_init[Offset2D](),
    ):
        self.s_type = StructureType.TILE_PROPERTIES_QCOM
        self.p_next = p_next
        self.tile_size = tile_size
        self.apron_size = apron_size
        self.origin = origin


struct TileMemoryBindInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory: DeviceMemory

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
    ):
        self.s_type = StructureType.TILE_MEMORY_BIND_INFO_QCOM
        self.p_next = p_next
        self.memory = memory


struct PhysicalDeviceAmigoProfilingFeaturesSEC(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var amigo_profiling: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        amigo_profiling: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC
        self.p_next = p_next
        self.amigo_profiling = amigo_profiling


struct AmigoProfilingSubmitInfoSEC(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var first_draw_timestamp: UInt64
    var swap_buffer_timestamp: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        first_draw_timestamp: UInt64 = zero_init[UInt64](),
        swap_buffer_timestamp: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.AMIGO_PROFILING_SUBMIT_INFO_SEC
        self.p_next = p_next
        self.first_draw_timestamp = first_draw_timestamp
        self.swap_buffer_timestamp = swap_buffer_timestamp


struct PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var attachment_feedback_loop_layout: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        attachment_feedback_loop_layout: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT
        self.p_next = p_next
        self.attachment_feedback_loop_layout = attachment_feedback_loop_layout


struct AttachmentFeedbackLoopInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var feedback_loop_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        feedback_loop_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.ATTACHMENT_FEEDBACK_LOOP_INFO_EXT
        self.p_next = p_next
        self.feedback_loop_enable = feedback_loop_enable


struct PhysicalDeviceAddressBindingReportFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var report_address_binding: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        report_address_binding: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT
        self.p_next = p_next
        self.report_address_binding = report_address_binding


struct DeviceAddressBindingCallbackDataEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DeviceAddressBindingFlagsEXT
    var base_address: DeviceAddress
    var size: DeviceSize
    var binding_type: DeviceAddressBindingTypeEXT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DeviceAddressBindingFlagsEXT = zero_init[DeviceAddressBindingFlagsEXT](),
        base_address: DeviceAddress = zero_init[DeviceAddress](),
        size: DeviceSize = zero_init[DeviceSize](),
        binding_type: DeviceAddressBindingTypeEXT = zero_init[DeviceAddressBindingTypeEXT](),
    ):
        self.s_type = StructureType.DEVICE_ADDRESS_BINDING_CALLBACK_DATA_EXT
        self.p_next = p_next
        self.flags = flags
        self.base_address = base_address
        self.size = size
        self.binding_type = binding_type


struct PhysicalDeviceOpticalFlowFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var optical_flow: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        optical_flow: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV
        self.p_next = p_next
        self.optical_flow = optical_flow


struct PhysicalDeviceOpticalFlowPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var supported_output_grid_sizes: OpticalFlowGridSizeFlagsNV
    var supported_hint_grid_sizes: OpticalFlowGridSizeFlagsNV
    var hint_supported: Bool32
    var cost_supported: Bool32
    var bidirectional_flow_supported: Bool32
    var global_flow_supported: Bool32
    var min_width: UInt32
    var min_height: UInt32
    var max_width: UInt32
    var max_height: UInt32
    var max_num_regions_of_interest: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        supported_output_grid_sizes: OpticalFlowGridSizeFlagsNV = zero_init[OpticalFlowGridSizeFlagsNV](),
        supported_hint_grid_sizes: OpticalFlowGridSizeFlagsNV = zero_init[OpticalFlowGridSizeFlagsNV](),
        hint_supported: Bool32 = zero_init[Bool32](),
        cost_supported: Bool32 = zero_init[Bool32](),
        bidirectional_flow_supported: Bool32 = zero_init[Bool32](),
        global_flow_supported: Bool32 = zero_init[Bool32](),
        min_width: UInt32 = zero_init[UInt32](),
        min_height: UInt32 = zero_init[UInt32](),
        max_width: UInt32 = zero_init[UInt32](),
        max_height: UInt32 = zero_init[UInt32](),
        max_num_regions_of_interest: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_OPTICAL_FLOW_PROPERTIES_NV
        self.p_next = p_next
        self.supported_output_grid_sizes = supported_output_grid_sizes
        self.supported_hint_grid_sizes = supported_hint_grid_sizes
        self.hint_supported = hint_supported
        self.cost_supported = cost_supported
        self.bidirectional_flow_supported = bidirectional_flow_supported
        self.global_flow_supported = global_flow_supported
        self.min_width = min_width
        self.min_height = min_height
        self.max_width = max_width
        self.max_height = max_height
        self.max_num_regions_of_interest = max_num_regions_of_interest


struct OpticalFlowImageFormatInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var usage: OpticalFlowUsageFlagsNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        usage: OpticalFlowUsageFlagsNV = zero_init[OpticalFlowUsageFlagsNV](),
    ):
        self.s_type = StructureType.OPTICAL_FLOW_IMAGE_FORMAT_INFO_NV
        self.p_next = p_next
        self.usage = usage


struct OpticalFlowImageFormatPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format: Format

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format: Format = zero_init[Format](),
    ):
        self.s_type = StructureType.OPTICAL_FLOW_IMAGE_FORMAT_PROPERTIES_NV
        self.p_next = p_next
        self.format = format


struct OpticalFlowSessionCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var width: UInt32
    var height: UInt32
    var image_format: Format
    var flow_vector_format: Format
    var cost_format: Format
    var output_grid_size: OpticalFlowGridSizeFlagsNV
    var hint_grid_size: OpticalFlowGridSizeFlagsNV
    var performance_level: OpticalFlowPerformanceLevelNV
    var flags: OpticalFlowSessionCreateFlagsNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        width: UInt32 = zero_init[UInt32](),
        height: UInt32 = zero_init[UInt32](),
        image_format: Format = zero_init[Format](),
        flow_vector_format: Format = zero_init[Format](),
        cost_format: Format = zero_init[Format](),
        output_grid_size: OpticalFlowGridSizeFlagsNV = zero_init[OpticalFlowGridSizeFlagsNV](),
        hint_grid_size: OpticalFlowGridSizeFlagsNV = zero_init[OpticalFlowGridSizeFlagsNV](),
        performance_level: OpticalFlowPerformanceLevelNV = zero_init[OpticalFlowPerformanceLevelNV](),
        flags: OpticalFlowSessionCreateFlagsNV = zero_init[OpticalFlowSessionCreateFlagsNV](),
    ):
        self.s_type = StructureType.OPTICAL_FLOW_SESSION_CREATE_INFO_NV
        self.p_next = p_next
        self.width = width
        self.height = height
        self.image_format = image_format
        self.flow_vector_format = flow_vector_format
        self.cost_format = cost_format
        self.output_grid_size = output_grid_size
        self.hint_grid_size = hint_grid_size
        self.performance_level = performance_level
        self.flags = flags


struct OpticalFlowSessionCreatePrivateDataInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var id: UInt32
    var size: UInt32
    var p_private_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        id: UInt32 = zero_init[UInt32](),
        size: UInt32 = zero_init[UInt32](),
        p_private_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.OPTICAL_FLOW_SESSION_CREATE_PRIVATE_DATA_INFO_NV
        self.p_next = p_next
        self.id = id
        self.size = size
        self.p_private_data = p_private_data


struct OpticalFlowExecuteInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: OpticalFlowExecuteFlagsNV
    var region_count: UInt32
    var p_regions: Ptr[Rect2D]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: OpticalFlowExecuteFlagsNV = zero_init[OpticalFlowExecuteFlagsNV](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[Rect2D] = zero_init[Ptr[Rect2D]](),
    ):
        self.s_type = StructureType.OPTICAL_FLOW_EXECUTE_INFO_NV
        self.p_next = p_next
        self.flags = flags
        self.region_count = region_count
        self.p_regions = p_regions


struct PhysicalDeviceFaultFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_fault: Bool32
    var device_fault_vendor_binary: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_fault: Bool32 = zero_init[Bool32](),
        device_fault_vendor_binary: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FAULT_FEATURES_EXT
        self.p_next = p_next
        self.device_fault = device_fault
        self.device_fault_vendor_binary = device_fault_vendor_binary


struct DeviceFaultAddressInfoEXT(ImplicitlyCopyable, Movable):
    var address_type: DeviceFaultAddressTypeEXT
    var reported_address: DeviceAddress
    var address_precision: DeviceSize

    fn __init__(
        out self,
        address_type: DeviceFaultAddressTypeEXT = zero_init[DeviceFaultAddressTypeEXT](),
        reported_address: DeviceAddress = zero_init[DeviceAddress](),
        address_precision: DeviceSize = zero_init[DeviceSize](),
    ):
        self.address_type = address_type
        self.reported_address = reported_address
        self.address_precision = address_precision


struct DeviceFaultVendorInfoEXT(ImplicitlyCopyable, Movable):
    var description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var vendor_fault_code: UInt64
    var vendor_fault_data: UInt64

    fn __init__(
        out self,
        description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        vendor_fault_code: UInt64 = zero_init[UInt64](),
        vendor_fault_data: UInt64 = zero_init[UInt64](),
    ):
        self.description = description
        self.vendor_fault_code = vendor_fault_code
        self.vendor_fault_data = vendor_fault_data

    fn description_slice(self) -> StringSlice[__origin_of(self.description)]:
        return StringSlice[__origin_of(self.description)](unsafe_from_utf8_ptr = self.description.unsafe_ptr())


struct DeviceFaultCountsEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var address_info_count: UInt32
    var vendor_info_count: UInt32
    var vendor_binary_size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        address_info_count: UInt32 = zero_init[UInt32](),
        vendor_info_count: UInt32 = zero_init[UInt32](),
        vendor_binary_size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.DEVICE_FAULT_COUNTS_EXT
        self.p_next = p_next
        self.address_info_count = address_info_count
        self.vendor_info_count = vendor_info_count
        self.vendor_binary_size = vendor_binary_size


struct DeviceFaultInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]
    var p_address_infos: Ptr[DeviceFaultAddressInfoEXT]
    var p_vendor_infos: Ptr[DeviceFaultVendorInfoEXT]
    var p_vendor_binary_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        description: InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)] = zero_init[InlineArray[UInt8, Int(MAX_DESCRIPTION_SIZE)]](),
        p_address_infos: Ptr[DeviceFaultAddressInfoEXT] = zero_init[Ptr[DeviceFaultAddressInfoEXT]](),
        p_vendor_infos: Ptr[DeviceFaultVendorInfoEXT] = zero_init[Ptr[DeviceFaultVendorInfoEXT]](),
        p_vendor_binary_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.DEVICE_FAULT_INFO_EXT
        self.p_next = p_next
        self.description = description
        self.p_address_infos = p_address_infos
        self.p_vendor_infos = p_vendor_infos
        self.p_vendor_binary_data = p_vendor_binary_data

    fn description_slice(self) -> StringSlice[__origin_of(self.description)]:
        return StringSlice[__origin_of(self.description)](unsafe_from_utf8_ptr = self.description.unsafe_ptr())


struct DeviceFaultVendorBinaryHeaderVersionOneEXT(ImplicitlyCopyable, Movable):
    var header_size: UInt32
    var header_version: DeviceFaultVendorBinaryHeaderVersionEXT
    var vendor_id: UInt32
    var device_id: UInt32
    var driver_version: Version
    var pipeline_cache_uuid: InlineArray[UInt8, Int(UUID_SIZE)]
    var application_name_offset: UInt32
    var application_version: Version
    var engine_name_offset: UInt32
    var engine_version: Version
    var api_version: Version

    fn __init__(
        out self,
        header_size: UInt32 = zero_init[UInt32](),
        header_version: DeviceFaultVendorBinaryHeaderVersionEXT = zero_init[DeviceFaultVendorBinaryHeaderVersionEXT](),
        vendor_id: UInt32 = zero_init[UInt32](),
        device_id: UInt32 = zero_init[UInt32](),
        driver_version: Version = zero_init[Version](),
        pipeline_cache_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        application_name_offset: UInt32 = zero_init[UInt32](),
        application_version: Version = zero_init[Version](),
        engine_name_offset: UInt32 = zero_init[UInt32](),
        engine_version: Version = zero_init[Version](),
        api_version: Version = zero_init[Version](),
    ):
        self.header_size = header_size
        self.header_version = header_version
        self.vendor_id = vendor_id
        self.device_id = device_id
        self.driver_version = driver_version
        self.pipeline_cache_uuid = pipeline_cache_uuid
        self.application_name_offset = application_name_offset
        self.application_version = application_version
        self.engine_name_offset = engine_name_offset
        self.engine_version = engine_version
        self.api_version = api_version


struct PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_library_group_handles: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_library_group_handles: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT
        self.p_next = p_next
        self.pipeline_library_group_handles = pipeline_library_group_handles


struct DepthBiasInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var depth_bias_constant_factor: Float32
    var depth_bias_clamp: Float32
    var depth_bias_slope_factor: Float32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        depth_bias_constant_factor: Float32 = zero_init[Float32](),
        depth_bias_clamp: Float32 = zero_init[Float32](),
        depth_bias_slope_factor: Float32 = zero_init[Float32](),
    ):
        self.s_type = StructureType.DEPTH_BIAS_INFO_EXT
        self.p_next = p_next
        self.depth_bias_constant_factor = depth_bias_constant_factor
        self.depth_bias_clamp = depth_bias_clamp
        self.depth_bias_slope_factor = depth_bias_slope_factor


struct DepthBiasRepresentationInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var depth_bias_representation: DepthBiasRepresentationEXT
    var depth_bias_exact: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        depth_bias_representation: DepthBiasRepresentationEXT = zero_init[DepthBiasRepresentationEXT](),
        depth_bias_exact: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.DEPTH_BIAS_REPRESENTATION_INFO_EXT
        self.p_next = p_next
        self.depth_bias_representation = depth_bias_representation
        self.depth_bias_exact = depth_bias_exact


struct DecompressMemoryRegionNV(ImplicitlyCopyable, Movable):
    var src_address: DeviceAddress
    var dst_address: DeviceAddress
    var compressed_size: DeviceSize
    var decompressed_size: DeviceSize
    var decompression_method: MemoryDecompressionMethodFlagsNV

    fn __init__(
        out self,
        src_address: DeviceAddress = zero_init[DeviceAddress](),
        dst_address: DeviceAddress = zero_init[DeviceAddress](),
        compressed_size: DeviceSize = zero_init[DeviceSize](),
        decompressed_size: DeviceSize = zero_init[DeviceSize](),
        decompression_method: MemoryDecompressionMethodFlagsNV = zero_init[MemoryDecompressionMethodFlagsNV](),
    ):
        self.src_address = src_address
        self.dst_address = dst_address
        self.compressed_size = compressed_size
        self.decompressed_size = decompressed_size
        self.decompression_method = decompression_method


struct PhysicalDeviceShaderCoreBuiltinsPropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_core_mask: UInt64
    var shader_core_count: UInt32
    var shader_warps_per_core: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_core_mask: UInt64 = zero_init[UInt64](),
        shader_core_count: UInt32 = zero_init[UInt32](),
        shader_warps_per_core: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_PROPERTIES_ARM
        self.p_next = p_next
        self.shader_core_mask = shader_core_mask
        self.shader_core_count = shader_core_count
        self.shader_warps_per_core = shader_warps_per_core


struct PhysicalDeviceShaderCoreBuiltinsFeaturesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_core_builtins: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_core_builtins: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM
        self.p_next = p_next
        self.shader_core_builtins = shader_core_builtins


struct FrameBoundaryEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: FrameBoundaryFlagsEXT
    var frame_id: UInt64
    var image_count: UInt32
    var p_images: Ptr[Image]
    var buffer_count: UInt32
    var p_buffers: Ptr[Buffer]
    var tag_name: UInt64
    var tag_size: UInt
    var p_tag: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: FrameBoundaryFlagsEXT = zero_init[FrameBoundaryFlagsEXT](),
        frame_id: UInt64 = zero_init[UInt64](),
        image_count: UInt32 = zero_init[UInt32](),
        p_images: Ptr[Image] = zero_init[Ptr[Image]](),
        buffer_count: UInt32 = zero_init[UInt32](),
        p_buffers: Ptr[Buffer] = zero_init[Ptr[Buffer]](),
        tag_name: UInt64 = zero_init[UInt64](),
        tag_size: UInt = zero_init[UInt](),
        p_tag: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.FRAME_BOUNDARY_EXT
        self.p_next = p_next
        self.flags = flags
        self.frame_id = frame_id
        self.image_count = image_count
        self.p_images = p_images
        self.buffer_count = buffer_count
        self.p_buffers = p_buffers
        self.tag_name = tag_name
        self.tag_size = tag_size
        self.p_tag = p_tag


struct PhysicalDeviceFrameBoundaryFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var frame_boundary: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        frame_boundary: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT
        self.p_next = p_next
        self.frame_boundary = frame_boundary


struct PhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dynamic_rendering_unused_attachments: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dynamic_rendering_unused_attachments: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT
        self.p_next = p_next
        self.dynamic_rendering_unused_attachments = dynamic_rendering_unused_attachments


struct SurfacePresentModeKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_mode: PresentModeKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_mode: PresentModeKHR = zero_init[PresentModeKHR](),
    ):
        self.s_type = StructureType.SURFACE_PRESENT_MODE_KHR
        self.p_next = p_next
        self.present_mode = present_mode


struct SurfacePresentScalingCapabilitiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var supported_present_scaling: PresentScalingFlagsKHR
    var supported_present_gravity_x: PresentGravityFlagsKHR
    var supported_present_gravity_y: PresentGravityFlagsKHR
    var min_scaled_image_extent: Extent2D
    var max_scaled_image_extent: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        supported_present_scaling: PresentScalingFlagsKHR = zero_init[PresentScalingFlagsKHR](),
        supported_present_gravity_x: PresentGravityFlagsKHR = zero_init[PresentGravityFlagsKHR](),
        supported_present_gravity_y: PresentGravityFlagsKHR = zero_init[PresentGravityFlagsKHR](),
        min_scaled_image_extent: Extent2D = zero_init[Extent2D](),
        max_scaled_image_extent: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.SURFACE_PRESENT_SCALING_CAPABILITIES_KHR
        self.p_next = p_next
        self.supported_present_scaling = supported_present_scaling
        self.supported_present_gravity_x = supported_present_gravity_x
        self.supported_present_gravity_y = supported_present_gravity_y
        self.min_scaled_image_extent = min_scaled_image_extent
        self.max_scaled_image_extent = max_scaled_image_extent


struct SurfacePresentModeCompatibilityKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_mode_count: UInt32
    var p_present_modes: Ptr[PresentModeKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_mode_count: UInt32 = zero_init[UInt32](),
        p_present_modes: Ptr[PresentModeKHR] = zero_init[Ptr[PresentModeKHR]](),
    ):
        self.s_type = StructureType.SURFACE_PRESENT_MODE_COMPATIBILITY_KHR
        self.p_next = p_next
        self.present_mode_count = present_mode_count
        self.p_present_modes = p_present_modes


struct PhysicalDeviceSwapchainMaintenance1FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain_maintenance_1: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain_maintenance_1: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_KHR
        self.p_next = p_next
        self.swapchain_maintenance_1 = swapchain_maintenance_1


struct SwapchainPresentFenceInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain_count: UInt32
    var p_fences: Ptr[Fence]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain_count: UInt32 = zero_init[UInt32](),
        p_fences: Ptr[Fence] = zero_init[Ptr[Fence]](),
    ):
        self.s_type = StructureType.SWAPCHAIN_PRESENT_FENCE_INFO_KHR
        self.p_next = p_next
        self.swapchain_count = swapchain_count
        self.p_fences = p_fences


struct SwapchainPresentModesCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_mode_count: UInt32
    var p_present_modes: Ptr[PresentModeKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_mode_count: UInt32 = zero_init[UInt32](),
        p_present_modes: Ptr[PresentModeKHR] = zero_init[Ptr[PresentModeKHR]](),
    ):
        self.s_type = StructureType.SWAPCHAIN_PRESENT_MODES_CREATE_INFO_KHR
        self.p_next = p_next
        self.present_mode_count = present_mode_count
        self.p_present_modes = p_present_modes


struct SwapchainPresentModeInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain_count: UInt32
    var p_present_modes: Ptr[PresentModeKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain_count: UInt32 = zero_init[UInt32](),
        p_present_modes: Ptr[PresentModeKHR] = zero_init[Ptr[PresentModeKHR]](),
    ):
        self.s_type = StructureType.SWAPCHAIN_PRESENT_MODE_INFO_KHR
        self.p_next = p_next
        self.swapchain_count = swapchain_count
        self.p_present_modes = p_present_modes


struct SwapchainPresentScalingCreateInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var scaling_behavior: PresentScalingFlagsKHR
    var present_gravity_x: PresentGravityFlagsKHR
    var present_gravity_y: PresentGravityFlagsKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        scaling_behavior: PresentScalingFlagsKHR = zero_init[PresentScalingFlagsKHR](),
        present_gravity_x: PresentGravityFlagsKHR = zero_init[PresentGravityFlagsKHR](),
        present_gravity_y: PresentGravityFlagsKHR = zero_init[PresentGravityFlagsKHR](),
    ):
        self.s_type = StructureType.SWAPCHAIN_PRESENT_SCALING_CREATE_INFO_KHR
        self.p_next = p_next
        self.scaling_behavior = scaling_behavior
        self.present_gravity_x = present_gravity_x
        self.present_gravity_y = present_gravity_y


struct ReleaseSwapchainImagesInfoKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var swapchain: SwapchainKHR
    var image_index_count: UInt32
    var p_image_indices: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        swapchain: SwapchainKHR = zero_init[SwapchainKHR](),
        image_index_count: UInt32 = zero_init[UInt32](),
        p_image_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.RELEASE_SWAPCHAIN_IMAGES_INFO_KHR
        self.p_next = p_next
        self.swapchain = swapchain
        self.image_index_count = image_index_count
        self.p_image_indices = p_image_indices


struct PhysicalDeviceDepthBiasControlFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var depth_bias_control: Bool32
    var least_representable_value_force_unorm_representation: Bool32
    var float_representation: Bool32
    var depth_bias_exact: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        depth_bias_control: Bool32 = zero_init[Bool32](),
        least_representable_value_force_unorm_representation: Bool32 = zero_init[Bool32](),
        float_representation: Bool32 = zero_init[Bool32](),
        depth_bias_exact: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT
        self.p_next = p_next
        self.depth_bias_control = depth_bias_control
        self.least_representable_value_force_unorm_representation = least_representable_value_force_unorm_representation
        self.float_representation = float_representation
        self.depth_bias_exact = depth_bias_exact


struct PhysicalDeviceRayTracingInvocationReorderFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ray_tracing_invocation_reorder: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ray_tracing_invocation_reorder: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV
        self.p_next = p_next
        self.ray_tracing_invocation_reorder = ray_tracing_invocation_reorder


struct PhysicalDeviceRayTracingInvocationReorderPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ray_tracing_invocation_reorder_reordering_hint: RayTracingInvocationReorderModeNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ray_tracing_invocation_reorder_reordering_hint: RayTracingInvocationReorderModeNV = zero_init[RayTracingInvocationReorderModeNV](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_PROPERTIES_NV
        self.p_next = p_next
        self.ray_tracing_invocation_reorder_reordering_hint = ray_tracing_invocation_reorder_reordering_hint


struct PhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var extended_sparse_address_space: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        extended_sparse_address_space: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV
        self.p_next = p_next
        self.extended_sparse_address_space = extended_sparse_address_space


struct PhysicalDeviceExtendedSparseAddressSpacePropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var extended_sparse_address_space_size: DeviceSize
    var extended_sparse_image_usage_flags: ImageUsageFlags
    var extended_sparse_buffer_usage_flags: BufferUsageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        extended_sparse_address_space_size: DeviceSize = zero_init[DeviceSize](),
        extended_sparse_image_usage_flags: ImageUsageFlags = zero_init[ImageUsageFlags](),
        extended_sparse_buffer_usage_flags: BufferUsageFlags = zero_init[BufferUsageFlags](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_PROPERTIES_NV
        self.p_next = p_next
        self.extended_sparse_address_space_size = extended_sparse_address_space_size
        self.extended_sparse_image_usage_flags = extended_sparse_image_usage_flags
        self.extended_sparse_buffer_usage_flags = extended_sparse_buffer_usage_flags


struct DirectDriverLoadingInfoLUNARG(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DirectDriverLoadingFlagsLUNARG
    var pfn_get_instance_proc_addr: PFN_vkGetInstanceProcAddrLUNARG

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DirectDriverLoadingFlagsLUNARG = zero_init[DirectDriverLoadingFlagsLUNARG](),
        pfn_get_instance_proc_addr: PFN_vkGetInstanceProcAddrLUNARG = zero_init[PFN_vkGetInstanceProcAddrLUNARG](),
    ):
        self.s_type = StructureType.DIRECT_DRIVER_LOADING_INFO_LUNARG
        self.p_next = p_next
        self.flags = flags
        self.pfn_get_instance_proc_addr = pfn_get_instance_proc_addr


struct DirectDriverLoadingListLUNARG(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var mode: DirectDriverLoadingModeLUNARG
    var driver_count: UInt32
    var p_drivers: Ptr[DirectDriverLoadingInfoLUNARG]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        mode: DirectDriverLoadingModeLUNARG = zero_init[DirectDriverLoadingModeLUNARG](),
        driver_count: UInt32 = zero_init[UInt32](),
        p_drivers: Ptr[DirectDriverLoadingInfoLUNARG] = zero_init[Ptr[DirectDriverLoadingInfoLUNARG]](),
    ):
        self.s_type = StructureType.DIRECT_DRIVER_LOADING_LIST_LUNARG
        self.p_next = p_next
        self.mode = mode
        self.driver_count = driver_count
        self.p_drivers = p_drivers


struct PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var multiview_per_view_viewports: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        multiview_per_view_viewports: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM
        self.p_next = p_next
        self.multiview_per_view_viewports = multiview_per_view_viewports


struct PhysicalDeviceRayTracingPositionFetchFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ray_tracing_position_fetch: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ray_tracing_position_fetch: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR
        self.p_next = p_next
        self.ray_tracing_position_fetch = ray_tracing_position_fetch


struct DeviceImageSubresourceInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_create_info: Ptr[ImageCreateInfo]
    var p_subresource: Ptr[ImageSubresource2]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_create_info: Ptr[ImageCreateInfo] = zero_init[Ptr[ImageCreateInfo]](),
        p_subresource: Ptr[ImageSubresource2] = zero_init[Ptr[ImageSubresource2]](),
    ):
        self.s_type = StructureType.DEVICE_IMAGE_SUBRESOURCE_INFO
        self.p_next = p_next
        self.p_create_info = p_create_info
        self.p_subresource = p_subresource


struct PhysicalDeviceShaderCorePropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pixel_rate: UInt32
    var texel_rate: UInt32
    var fma_rate: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pixel_rate: UInt32 = zero_init[UInt32](),
        texel_rate: UInt32 = zero_init[UInt32](),
        fma_rate: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_ARM
        self.p_next = p_next
        self.pixel_rate = pixel_rate
        self.texel_rate = texel_rate
        self.fma_rate = fma_rate


struct PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var multiview_per_view_render_areas: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        multiview_per_view_render_areas: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM
        self.p_next = p_next
        self.multiview_per_view_render_areas = multiview_per_view_render_areas


struct MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var per_view_render_area_count: UInt32
    var p_per_view_render_areas: Ptr[Rect2D]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        per_view_render_area_count: UInt32 = zero_init[UInt32](),
        p_per_view_render_areas: Ptr[Rect2D] = zero_init[Ptr[Rect2D]](),
    ):
        self.s_type = StructureType.MULTIVIEW_PER_VIEW_RENDER_AREAS_RENDER_PASS_BEGIN_INFO_QCOM
        self.p_next = p_next
        self.per_view_render_area_count = per_view_render_area_count
        self.p_per_view_render_areas = p_per_view_render_areas


struct QueryLowLatencySupportNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_queried_low_latency_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_queried_low_latency_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.QUERY_LOW_LATENCY_SUPPORT_NV
        self.p_next = p_next
        self.p_queried_low_latency_data = p_queried_low_latency_data


struct MemoryMapInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: MemoryMapFlags
    var memory: DeviceMemory
    var offset: DeviceSize
    var size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: MemoryMapFlags = zero_init[MemoryMapFlags](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        offset: DeviceSize = zero_init[DeviceSize](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.MEMORY_MAP_INFO
        self.p_next = p_next
        self.flags = flags
        self.memory = memory
        self.offset = offset
        self.size = size


struct MemoryUnmapInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: MemoryUnmapFlags
    var memory: DeviceMemory

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: MemoryUnmapFlags = zero_init[MemoryUnmapFlags](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
    ):
        self.s_type = StructureType.MEMORY_UNMAP_INFO
        self.p_next = p_next
        self.flags = flags
        self.memory = memory


struct PhysicalDeviceShaderObjectFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_object: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_object: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT
        self.p_next = p_next
        self.shader_object = shader_object


struct PhysicalDeviceShaderObjectPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_binary_uuid: InlineArray[UInt8, Int(UUID_SIZE)]
    var shader_binary_version: Version

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_binary_uuid: InlineArray[UInt8, Int(UUID_SIZE)] = zero_init[InlineArray[UInt8, Int(UUID_SIZE)]](),
        shader_binary_version: Version = zero_init[Version](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_OBJECT_PROPERTIES_EXT
        self.p_next = p_next
        self.shader_binary_uuid = shader_binary_uuid
        self.shader_binary_version = shader_binary_version


struct ShaderCreateInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: ShaderCreateFlagsEXT
    var stage: ShaderStageFlagBits
    var next_stage: ShaderStageFlags
    var code_type: ShaderCodeTypeEXT
    var code_size: UInt
    var p_code: Ptr[NoneType]
    var p_name: Ptr[UInt8]
    var set_layout_count: UInt32
    var p_set_layouts: Ptr[DescriptorSetLayout]
    var push_constant_range_count: UInt32
    var p_push_constant_ranges: Ptr[PushConstantRange]
    var p_specialization_info: Ptr[SpecializationInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: ShaderCreateFlagsEXT = zero_init[ShaderCreateFlagsEXT](),
        stage: ShaderStageFlagBits = zero_init[ShaderStageFlagBits](),
        next_stage: ShaderStageFlags = zero_init[ShaderStageFlags](),
        code_type: ShaderCodeTypeEXT = zero_init[ShaderCodeTypeEXT](),
        code_size: UInt = zero_init[UInt](),
        p_code: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        set_layout_count: UInt32 = zero_init[UInt32](),
        p_set_layouts: Ptr[DescriptorSetLayout] = zero_init[Ptr[DescriptorSetLayout]](),
        push_constant_range_count: UInt32 = zero_init[UInt32](),
        p_push_constant_ranges: Ptr[PushConstantRange] = zero_init[Ptr[PushConstantRange]](),
        p_specialization_info: Ptr[SpecializationInfo] = zero_init[Ptr[SpecializationInfo]](),
    ):
        self.s_type = StructureType.SHADER_CREATE_INFO_EXT
        self.p_next = p_next
        self.flags = flags
        self.stage = stage
        self.next_stage = next_stage
        self.code_type = code_type
        self.code_size = code_size
        self.p_code = p_code
        self.p_name = p_name
        self.set_layout_count = set_layout_count
        self.p_set_layouts = p_set_layouts
        self.push_constant_range_count = push_constant_range_count
        self.p_push_constant_ranges = p_push_constant_ranges
        self.p_specialization_info = p_specialization_info


struct PhysicalDeviceShaderTileImageFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_tile_image_color_read_access: Bool32
    var shader_tile_image_depth_read_access: Bool32
    var shader_tile_image_stencil_read_access: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_tile_image_color_read_access: Bool32 = zero_init[Bool32](),
        shader_tile_image_depth_read_access: Bool32 = zero_init[Bool32](),
        shader_tile_image_stencil_read_access: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT
        self.p_next = p_next
        self.shader_tile_image_color_read_access = shader_tile_image_color_read_access
        self.shader_tile_image_depth_read_access = shader_tile_image_depth_read_access
        self.shader_tile_image_stencil_read_access = shader_tile_image_stencil_read_access


struct PhysicalDeviceShaderTileImagePropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_tile_image_coherent_read_accelerated: Bool32
    var shader_tile_image_read_sample_from_pixel_rate_invocation: Bool32
    var shader_tile_image_read_from_helper_invocation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_tile_image_coherent_read_accelerated: Bool32 = zero_init[Bool32](),
        shader_tile_image_read_sample_from_pixel_rate_invocation: Bool32 = zero_init[Bool32](),
        shader_tile_image_read_from_helper_invocation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_TILE_IMAGE_PROPERTIES_EXT
        self.p_next = p_next
        self.shader_tile_image_coherent_read_accelerated = shader_tile_image_coherent_read_accelerated
        self.shader_tile_image_read_sample_from_pixel_rate_invocation = shader_tile_image_read_sample_from_pixel_rate_invocation
        self.shader_tile_image_read_from_helper_invocation = shader_tile_image_read_from_helper_invocation


struct ImportScreenBufferInfoQNX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var buffer: screen_buffer_t

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        buffer: screen_buffer_t = zero_init[screen_buffer_t](),
    ):
        self.s_type = StructureType.IMPORT_SCREEN_BUFFER_INFO_QNX
        self.p_next = p_next
        self.buffer = buffer


struct ScreenBufferPropertiesQNX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var allocation_size: DeviceSize
    var memory_type_bits: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        allocation_size: DeviceSize = zero_init[DeviceSize](),
        memory_type_bits: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.SCREEN_BUFFER_PROPERTIES_QNX
        self.p_next = p_next
        self.allocation_size = allocation_size
        self.memory_type_bits = memory_type_bits


struct ScreenBufferFormatPropertiesQNX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format: Format
    var external_format: UInt64
    var screen_usage: UInt64
    var format_features: FormatFeatureFlags
    var sampler_ycbcr_conversion_components: ComponentMapping
    var suggested_ycbcr_model: SamplerYcbcrModelConversion
    var suggested_ycbcr_range: SamplerYcbcrRange
    var suggested_x_chroma_offset: ChromaLocation
    var suggested_y_chroma_offset: ChromaLocation

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format: Format = zero_init[Format](),
        external_format: UInt64 = zero_init[UInt64](),
        screen_usage: UInt64 = zero_init[UInt64](),
        format_features: FormatFeatureFlags = zero_init[FormatFeatureFlags](),
        sampler_ycbcr_conversion_components: ComponentMapping = zero_init[ComponentMapping](),
        suggested_ycbcr_model: SamplerYcbcrModelConversion = zero_init[SamplerYcbcrModelConversion](),
        suggested_ycbcr_range: SamplerYcbcrRange = zero_init[SamplerYcbcrRange](),
        suggested_x_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
        suggested_y_chroma_offset: ChromaLocation = zero_init[ChromaLocation](),
    ):
        self.s_type = StructureType.SCREEN_BUFFER_FORMAT_PROPERTIES_QNX
        self.p_next = p_next
        self.format = format
        self.external_format = external_format
        self.screen_usage = screen_usage
        self.format_features = format_features
        self.sampler_ycbcr_conversion_components = sampler_ycbcr_conversion_components
        self.suggested_ycbcr_model = suggested_ycbcr_model
        self.suggested_ycbcr_range = suggested_ycbcr_range
        self.suggested_x_chroma_offset = suggested_x_chroma_offset
        self.suggested_y_chroma_offset = suggested_y_chroma_offset


struct ExternalFormatQNX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var external_format: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        external_format: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.EXTERNAL_FORMAT_QNX
        self.p_next = p_next
        self.external_format = external_format


struct PhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var screen_buffer_import: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        screen_buffer_import: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_MEMORY_SCREEN_BUFFER_FEATURES_QNX
        self.p_next = p_next
        self.screen_buffer_import = screen_buffer_import


struct PhysicalDeviceCooperativeMatrixFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cooperative_matrix: Bool32
    var cooperative_matrix_robust_buffer_access: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cooperative_matrix: Bool32 = zero_init[Bool32](),
        cooperative_matrix_robust_buffer_access: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR
        self.p_next = p_next
        self.cooperative_matrix = cooperative_matrix
        self.cooperative_matrix_robust_buffer_access = cooperative_matrix_robust_buffer_access


struct CooperativeMatrixPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var m_size: UInt32
    var n_size: UInt32
    var k_size: UInt32
    var a_type: ComponentTypeKHR
    var b_type: ComponentTypeKHR
    var c_type: ComponentTypeKHR
    var result_type: ComponentTypeKHR
    var saturating_accumulation: Bool32
    var scope: ScopeKHR

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        m_size: UInt32 = zero_init[UInt32](),
        n_size: UInt32 = zero_init[UInt32](),
        k_size: UInt32 = zero_init[UInt32](),
        a_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        b_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        c_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        result_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        saturating_accumulation: Bool32 = zero_init[Bool32](),
        scope: ScopeKHR = zero_init[ScopeKHR](),
    ):
        self.s_type = StructureType.COOPERATIVE_MATRIX_PROPERTIES_KHR
        self.p_next = p_next
        self.m_size = m_size
        self.n_size = n_size
        self.k_size = k_size
        self.a_type = a_type
        self.b_type = b_type
        self.c_type = c_type
        self.result_type = result_type
        self.saturating_accumulation = saturating_accumulation
        self.scope = scope


struct PhysicalDeviceCooperativeMatrixPropertiesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cooperative_matrix_supported_stages: ShaderStageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cooperative_matrix_supported_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR
        self.p_next = p_next
        self.cooperative_matrix_supported_stages = cooperative_matrix_supported_stages


struct PhysicalDeviceShaderEnqueuePropertiesAMDX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_execution_graph_depth: UInt32
    var max_execution_graph_shader_output_nodes: UInt32
    var max_execution_graph_shader_payload_size: UInt32
    var max_execution_graph_shader_payload_count: UInt32
    var execution_graph_dispatch_address_alignment: UInt32
    var max_execution_graph_workgroup_count: InlineArray[UInt32, Int(3)]
    var max_execution_graph_workgroups: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_execution_graph_depth: UInt32 = zero_init[UInt32](),
        max_execution_graph_shader_output_nodes: UInt32 = zero_init[UInt32](),
        max_execution_graph_shader_payload_size: UInt32 = zero_init[UInt32](),
        max_execution_graph_shader_payload_count: UInt32 = zero_init[UInt32](),
        execution_graph_dispatch_address_alignment: UInt32 = zero_init[UInt32](),
        max_execution_graph_workgroup_count: InlineArray[UInt32, Int(3)] = zero_init[InlineArray[UInt32, Int(3)]](),
        max_execution_graph_workgroups: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_ENQUEUE_PROPERTIES_AMDX
        self.p_next = p_next
        self.max_execution_graph_depth = max_execution_graph_depth
        self.max_execution_graph_shader_output_nodes = max_execution_graph_shader_output_nodes
        self.max_execution_graph_shader_payload_size = max_execution_graph_shader_payload_size
        self.max_execution_graph_shader_payload_count = max_execution_graph_shader_payload_count
        self.execution_graph_dispatch_address_alignment = execution_graph_dispatch_address_alignment
        self.max_execution_graph_workgroup_count = max_execution_graph_workgroup_count
        self.max_execution_graph_workgroups = max_execution_graph_workgroups


struct PhysicalDeviceShaderEnqueueFeaturesAMDX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_enqueue: Bool32
    var shader_mesh_enqueue: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_enqueue: Bool32 = zero_init[Bool32](),
        shader_mesh_enqueue: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_ENQUEUE_FEATURES_AMDX
        self.p_next = p_next
        self.shader_enqueue = shader_enqueue
        self.shader_mesh_enqueue = shader_mesh_enqueue


struct ExecutionGraphPipelineCreateInfoAMDX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCreateFlags
    var stage_count: UInt32
    var p_stages: Ptr[PipelineShaderStageCreateInfo]
    var p_library_info: Ptr[PipelineLibraryCreateInfoKHR]
    var layout: PipelineLayout
    var base_pipeline_handle: Pipeline
    var base_pipeline_index: Int32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCreateFlags = zero_init[PipelineCreateFlags](),
        stage_count: UInt32 = zero_init[UInt32](),
        p_stages: Ptr[PipelineShaderStageCreateInfo] = zero_init[Ptr[PipelineShaderStageCreateInfo]](),
        p_library_info: Ptr[PipelineLibraryCreateInfoKHR] = zero_init[Ptr[PipelineLibraryCreateInfoKHR]](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        base_pipeline_handle: Pipeline = zero_init[Pipeline](),
        base_pipeline_index: Int32 = zero_init[Int32](),
    ):
        self.s_type = StructureType.EXECUTION_GRAPH_PIPELINE_CREATE_INFO_AMDX
        self.p_next = p_next
        self.flags = flags
        self.stage_count = stage_count
        self.p_stages = p_stages
        self.p_library_info = p_library_info
        self.layout = layout
        self.base_pipeline_handle = base_pipeline_handle
        self.base_pipeline_index = base_pipeline_index


struct PipelineShaderStageNodeCreateInfoAMDX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_name: Ptr[UInt8]
    var index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PIPELINE_SHADER_STAGE_NODE_CREATE_INFO_AMDX
        self.p_next = p_next
        self.p_name = p_name
        self.index = index


struct ExecutionGraphPipelineScratchSizeAMDX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_size: DeviceSize
    var max_size: DeviceSize
    var size_granularity: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_size: DeviceSize = zero_init[DeviceSize](),
        max_size: DeviceSize = zero_init[DeviceSize](),
        size_granularity: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.EXECUTION_GRAPH_PIPELINE_SCRATCH_SIZE_AMDX
        self.p_next = p_next
        self.min_size = min_size
        self.max_size = max_size
        self.size_granularity = size_granularity


struct DispatchGraphInfoAMDX(ImplicitlyCopyable, Movable):
    var node_index: UInt32
    var payload_count: UInt32
    var payloads: DeviceOrHostAddressConstAMDX
    var payload_stride: UInt64

    fn __init__(
        out self,
        node_index: UInt32 = zero_init[UInt32](),
        payload_count: UInt32 = zero_init[UInt32](),
        payloads: DeviceOrHostAddressConstAMDX = zero_init[DeviceOrHostAddressConstAMDX](),
        payload_stride: UInt64 = zero_init[UInt64](),
    ):
        self.node_index = node_index
        self.payload_count = payload_count
        self.payloads = payloads
        self.payload_stride = payload_stride


struct DispatchGraphCountInfoAMDX(ImplicitlyCopyable, Movable):
    var count: UInt32
    var infos: DeviceOrHostAddressConstAMDX
    var stride: UInt64

    fn __init__(
        out self,
        count: UInt32 = zero_init[UInt32](),
        infos: DeviceOrHostAddressConstAMDX = zero_init[DeviceOrHostAddressConstAMDX](),
        stride: UInt64 = zero_init[UInt64](),
    ):
        self.count = count
        self.infos = infos
        self.stride = stride


struct PhysicalDeviceAntiLagFeaturesAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var anti_lag: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        anti_lag: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD
        self.p_next = p_next
        self.anti_lag = anti_lag


struct AntiLagDataAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var mode: AntiLagModeAMD
    var max_fps: UInt32
    var p_presentation_info: Ptr[AntiLagPresentationInfoAMD]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        mode: AntiLagModeAMD = zero_init[AntiLagModeAMD](),
        max_fps: UInt32 = zero_init[UInt32](),
        p_presentation_info: Ptr[AntiLagPresentationInfoAMD] = zero_init[Ptr[AntiLagPresentationInfoAMD]](),
    ):
        self.s_type = StructureType.ANTI_LAG_DATA_AMD
        self.p_next = p_next
        self.mode = mode
        self.max_fps = max_fps
        self.p_presentation_info = p_presentation_info


struct AntiLagPresentationInfoAMD(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stage: AntiLagStageAMD
    var frame_index: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stage: AntiLagStageAMD = zero_init[AntiLagStageAMD](),
        frame_index: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.ANTI_LAG_PRESENTATION_INFO_AMD
        self.p_next = p_next
        self.stage = stage
        self.frame_index = frame_index


struct BindMemoryStatus(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_result: Ptr[Result]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_result: Ptr[Result] = zero_init[Ptr[Result]](),
    ):
        self.s_type = StructureType.BIND_MEMORY_STATUS
        self.p_next = p_next
        self.p_result = p_result


struct PhysicalDeviceTileMemoryHeapFeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tile_memory_heap: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tile_memory_heap: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TILE_MEMORY_HEAP_FEATURES_QCOM
        self.p_next = p_next
        self.tile_memory_heap = tile_memory_heap


struct PhysicalDeviceTileMemoryHeapPropertiesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var queue_submit_boundary: Bool32
    var tile_buffer_transfers: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        queue_submit_boundary: Bool32 = zero_init[Bool32](),
        tile_buffer_transfers: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TILE_MEMORY_HEAP_PROPERTIES_QCOM
        self.p_next = p_next
        self.queue_submit_boundary = queue_submit_boundary
        self.tile_buffer_transfers = tile_buffer_transfers


struct TileMemorySizeInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var size: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        size: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.TILE_MEMORY_SIZE_INFO_QCOM
        self.p_next = p_next
        self.size = size


struct TileMemoryRequirementsQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var size: DeviceSize
    var alignment: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        size: DeviceSize = zero_init[DeviceSize](),
        alignment: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.TILE_MEMORY_REQUIREMENTS_QCOM
        self.p_next = p_next
        self.size = size
        self.alignment = alignment


struct BindDescriptorSetsInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stage_flags: ShaderStageFlags
    var layout: PipelineLayout
    var first_set: UInt32
    var descriptor_set_count: UInt32
    var p_descriptor_sets: Ptr[DescriptorSet]
    var dynamic_offset_count: UInt32
    var p_dynamic_offsets: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stage_flags: ShaderStageFlags = zero_init[ShaderStageFlags](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        first_set: UInt32 = zero_init[UInt32](),
        descriptor_set_count: UInt32 = zero_init[UInt32](),
        p_descriptor_sets: Ptr[DescriptorSet] = zero_init[Ptr[DescriptorSet]](),
        dynamic_offset_count: UInt32 = zero_init[UInt32](),
        p_dynamic_offsets: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.BIND_DESCRIPTOR_SETS_INFO
        self.p_next = p_next
        self.stage_flags = stage_flags
        self.layout = layout
        self.first_set = first_set
        self.descriptor_set_count = descriptor_set_count
        self.p_descriptor_sets = p_descriptor_sets
        self.dynamic_offset_count = dynamic_offset_count
        self.p_dynamic_offsets = p_dynamic_offsets


struct PushConstantsInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var layout: PipelineLayout
    var stage_flags: ShaderStageFlags
    var offset: UInt32
    var size: UInt32
    var p_values: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        stage_flags: ShaderStageFlags = zero_init[ShaderStageFlags](),
        offset: UInt32 = zero_init[UInt32](),
        size: UInt32 = zero_init[UInt32](),
        p_values: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.PUSH_CONSTANTS_INFO
        self.p_next = p_next
        self.layout = layout
        self.stage_flags = stage_flags
        self.offset = offset
        self.size = size
        self.p_values = p_values


struct PushDescriptorSetInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stage_flags: ShaderStageFlags
    var layout: PipelineLayout
    var set: UInt32
    var descriptor_write_count: UInt32
    var p_descriptor_writes: Ptr[WriteDescriptorSet]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stage_flags: ShaderStageFlags = zero_init[ShaderStageFlags](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        set: UInt32 = zero_init[UInt32](),
        descriptor_write_count: UInt32 = zero_init[UInt32](),
        p_descriptor_writes: Ptr[WriteDescriptorSet] = zero_init[Ptr[WriteDescriptorSet]](),
    ):
        self.s_type = StructureType.PUSH_DESCRIPTOR_SET_INFO
        self.p_next = p_next
        self.stage_flags = stage_flags
        self.layout = layout
        self.set = set
        self.descriptor_write_count = descriptor_write_count
        self.p_descriptor_writes = p_descriptor_writes


struct PushDescriptorSetWithTemplateInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_update_template: DescriptorUpdateTemplate
    var layout: PipelineLayout
    var set: UInt32
    var p_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_update_template: DescriptorUpdateTemplate = zero_init[DescriptorUpdateTemplate](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        set: UInt32 = zero_init[UInt32](),
        p_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_INFO
        self.p_next = p_next
        self.descriptor_update_template = descriptor_update_template
        self.layout = layout
        self.set = set
        self.p_data = p_data


struct SetDescriptorBufferOffsetsInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stage_flags: ShaderStageFlags
    var layout: PipelineLayout
    var first_set: UInt32
    var set_count: UInt32
    var p_buffer_indices: Ptr[UInt32]
    var p_offsets: Ptr[DeviceSize]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stage_flags: ShaderStageFlags = zero_init[ShaderStageFlags](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        first_set: UInt32 = zero_init[UInt32](),
        set_count: UInt32 = zero_init[UInt32](),
        p_buffer_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        p_offsets: Ptr[DeviceSize] = zero_init[Ptr[DeviceSize]](),
    ):
        self.s_type = StructureType.SET_DESCRIPTOR_BUFFER_OFFSETS_INFO_EXT
        self.p_next = p_next
        self.stage_flags = stage_flags
        self.layout = layout
        self.first_set = first_set
        self.set_count = set_count
        self.p_buffer_indices = p_buffer_indices
        self.p_offsets = p_offsets


struct BindDescriptorBufferEmbeddedSamplersInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stage_flags: ShaderStageFlags
    var layout: PipelineLayout
    var set: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stage_flags: ShaderStageFlags = zero_init[ShaderStageFlags](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        set: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_INFO_EXT
        self.p_next = p_next
        self.stage_flags = stage_flags
        self.layout = layout
        self.set = set


struct PhysicalDeviceCubicClampFeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cubic_range_clamp: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cubic_range_clamp: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM
        self.p_next = p_next
        self.cubic_range_clamp = cubic_range_clamp


struct PhysicalDeviceYcbcrDegammaFeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var ycbcr_degamma: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        ycbcr_degamma: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM
        self.p_next = p_next
        self.ycbcr_degamma = ycbcr_degamma


struct SamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var enable_y_degamma: Bool32
    var enable_cb_cr_degamma: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        enable_y_degamma: Bool32 = zero_init[Bool32](),
        enable_cb_cr_degamma: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SAMPLER_YCBCR_CONVERSION_YCBCR_DEGAMMA_CREATE_INFO_QCOM
        self.p_next = p_next
        self.enable_y_degamma = enable_y_degamma
        self.enable_cb_cr_degamma = enable_cb_cr_degamma


struct PhysicalDeviceCubicWeightsFeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var selectable_cubic_weights: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        selectable_cubic_weights: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM
        self.p_next = p_next
        self.selectable_cubic_weights = selectable_cubic_weights


struct SamplerCubicWeightsCreateInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cubic_weights: CubicFilterWeightsQCOM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cubic_weights: CubicFilterWeightsQCOM = zero_init[CubicFilterWeightsQCOM](),
    ):
        self.s_type = StructureType.SAMPLER_CUBIC_WEIGHTS_CREATE_INFO_QCOM
        self.p_next = p_next
        self.cubic_weights = cubic_weights


struct BlitImageCubicWeightsInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cubic_weights: CubicFilterWeightsQCOM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cubic_weights: CubicFilterWeightsQCOM = zero_init[CubicFilterWeightsQCOM](),
    ):
        self.s_type = StructureType.BLIT_IMAGE_CUBIC_WEIGHTS_INFO_QCOM
        self.p_next = p_next
        self.cubic_weights = cubic_weights


struct PhysicalDeviceImageProcessing2FeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var texture_block_match_2: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        texture_block_match_2: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM
        self.p_next = p_next
        self.texture_block_match_2 = texture_block_match_2


struct PhysicalDeviceImageProcessing2PropertiesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_block_match_window: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_block_match_window: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_PROCESSING_2_PROPERTIES_QCOM
        self.p_next = p_next
        self.max_block_match_window = max_block_match_window


struct SamplerBlockMatchWindowCreateInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var window_extent: Extent2D
    var window_compare_mode: BlockMatchWindowCompareModeQCOM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        window_extent: Extent2D = zero_init[Extent2D](),
        window_compare_mode: BlockMatchWindowCompareModeQCOM = zero_init[BlockMatchWindowCompareModeQCOM](),
    ):
        self.s_type = StructureType.SAMPLER_BLOCK_MATCH_WINDOW_CREATE_INFO_QCOM
        self.p_next = p_next
        self.window_extent = window_extent
        self.window_compare_mode = window_compare_mode


struct PhysicalDeviceDescriptorPoolOverallocationFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_pool_overallocation: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_pool_overallocation: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV
        self.p_next = p_next
        self.descriptor_pool_overallocation = descriptor_pool_overallocation


struct PhysicalDeviceLayeredDriverPropertiesMSFT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var underlying_api: LayeredDriverUnderlyingApiMSFT

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        underlying_api: LayeredDriverUnderlyingApiMSFT = zero_init[LayeredDriverUnderlyingApiMSFT](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_LAYERED_DRIVER_PROPERTIES_MSFT
        self.p_next = p_next
        self.underlying_api = underlying_api


struct PhysicalDevicePerStageDescriptorSetFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var per_stage_descriptor_set: Bool32
    var dynamic_pipeline_layout: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        per_stage_descriptor_set: Bool32 = zero_init[Bool32](),
        dynamic_pipeline_layout: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV
        self.p_next = p_next
        self.per_stage_descriptor_set = per_stage_descriptor_set
        self.dynamic_pipeline_layout = dynamic_pipeline_layout


struct PhysicalDeviceExternalFormatResolveFeaturesANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var external_format_resolve: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        external_format_resolve: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_FEATURES_ANDROID
        self.p_next = p_next
        self.external_format_resolve = external_format_resolve


struct PhysicalDeviceExternalFormatResolvePropertiesANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var null_color_attachment_with_external_format_resolve: Bool32
    var external_format_resolve_chroma_offset_x: ChromaLocation
    var external_format_resolve_chroma_offset_y: ChromaLocation

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        null_color_attachment_with_external_format_resolve: Bool32 = zero_init[Bool32](),
        external_format_resolve_chroma_offset_x: ChromaLocation = zero_init[ChromaLocation](),
        external_format_resolve_chroma_offset_y: ChromaLocation = zero_init[ChromaLocation](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_FORMAT_RESOLVE_PROPERTIES_ANDROID
        self.p_next = p_next
        self.null_color_attachment_with_external_format_resolve = null_color_attachment_with_external_format_resolve
        self.external_format_resolve_chroma_offset_x = external_format_resolve_chroma_offset_x
        self.external_format_resolve_chroma_offset_y = external_format_resolve_chroma_offset_y


struct AndroidHardwareBufferFormatResolvePropertiesANDROID(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var color_attachment_format: Format

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        color_attachment_format: Format = zero_init[Format](),
    ):
        self.s_type = StructureType.ANDROID_HARDWARE_BUFFER_FORMAT_RESOLVE_PROPERTIES_ANDROID
        self.p_next = p_next
        self.color_attachment_format = color_attachment_format


struct LatencySleepModeInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var low_latency_mode: Bool32
    var low_latency_boost: Bool32
    var minimum_interval_us: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        low_latency_mode: Bool32 = zero_init[Bool32](),
        low_latency_boost: Bool32 = zero_init[Bool32](),
        minimum_interval_us: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.LATENCY_SLEEP_MODE_INFO_NV
        self.p_next = p_next
        self.low_latency_mode = low_latency_mode
        self.low_latency_boost = low_latency_boost
        self.minimum_interval_us = minimum_interval_us


struct LatencySleepInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var signal_semaphore: Semaphore
    var value: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        signal_semaphore: Semaphore = zero_init[Semaphore](),
        value: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.LATENCY_SLEEP_INFO_NV
        self.p_next = p_next
        self.signal_semaphore = signal_semaphore
        self.value = value


struct SetLatencyMarkerInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_id: UInt64
    var marker: LatencyMarkerNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_id: UInt64 = zero_init[UInt64](),
        marker: LatencyMarkerNV = zero_init[LatencyMarkerNV](),
    ):
        self.s_type = StructureType.SET_LATENCY_MARKER_INFO_NV
        self.p_next = p_next
        self.present_id = present_id
        self.marker = marker


struct GetLatencyMarkerInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var timing_count: UInt32
    var p_timings: Ptr[LatencyTimingsFrameReportNV]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        timing_count: UInt32 = zero_init[UInt32](),
        p_timings: Ptr[LatencyTimingsFrameReportNV] = zero_init[Ptr[LatencyTimingsFrameReportNV]](),
    ):
        self.s_type = StructureType.GET_LATENCY_MARKER_INFO_NV
        self.p_next = p_next
        self.timing_count = timing_count
        self.p_timings = p_timings


struct LatencyTimingsFrameReportNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_id: UInt64
    var input_sample_time_us: UInt64
    var sim_start_time_us: UInt64
    var sim_end_time_us: UInt64
    var render_submit_start_time_us: UInt64
    var render_submit_end_time_us: UInt64
    var present_start_time_us: UInt64
    var present_end_time_us: UInt64
    var driver_start_time_us: UInt64
    var driver_end_time_us: UInt64
    var os_render_queue_start_time_us: UInt64
    var os_render_queue_end_time_us: UInt64
    var gpu_render_start_time_us: UInt64
    var gpu_render_end_time_us: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_id: UInt64 = zero_init[UInt64](),
        input_sample_time_us: UInt64 = zero_init[UInt64](),
        sim_start_time_us: UInt64 = zero_init[UInt64](),
        sim_end_time_us: UInt64 = zero_init[UInt64](),
        render_submit_start_time_us: UInt64 = zero_init[UInt64](),
        render_submit_end_time_us: UInt64 = zero_init[UInt64](),
        present_start_time_us: UInt64 = zero_init[UInt64](),
        present_end_time_us: UInt64 = zero_init[UInt64](),
        driver_start_time_us: UInt64 = zero_init[UInt64](),
        driver_end_time_us: UInt64 = zero_init[UInt64](),
        os_render_queue_start_time_us: UInt64 = zero_init[UInt64](),
        os_render_queue_end_time_us: UInt64 = zero_init[UInt64](),
        gpu_render_start_time_us: UInt64 = zero_init[UInt64](),
        gpu_render_end_time_us: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.LATENCY_TIMINGS_FRAME_REPORT_NV
        self.p_next = p_next
        self.present_id = present_id
        self.input_sample_time_us = input_sample_time_us
        self.sim_start_time_us = sim_start_time_us
        self.sim_end_time_us = sim_end_time_us
        self.render_submit_start_time_us = render_submit_start_time_us
        self.render_submit_end_time_us = render_submit_end_time_us
        self.present_start_time_us = present_start_time_us
        self.present_end_time_us = present_end_time_us
        self.driver_start_time_us = driver_start_time_us
        self.driver_end_time_us = driver_end_time_us
        self.os_render_queue_start_time_us = os_render_queue_start_time_us
        self.os_render_queue_end_time_us = os_render_queue_end_time_us
        self.gpu_render_start_time_us = gpu_render_start_time_us
        self.gpu_render_end_time_us = gpu_render_end_time_us


struct OutOfBandQueueTypeInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var queue_type: OutOfBandQueueTypeNV

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        queue_type: OutOfBandQueueTypeNV = zero_init[OutOfBandQueueTypeNV](),
    ):
        self.s_type = StructureType.OUT_OF_BAND_QUEUE_TYPE_INFO_NV
        self.p_next = p_next
        self.queue_type = queue_type


struct LatencySubmissionPresentIdNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_id: UInt64

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_id: UInt64 = zero_init[UInt64](),
    ):
        self.s_type = StructureType.LATENCY_SUBMISSION_PRESENT_ID_NV
        self.p_next = p_next
        self.present_id = present_id


struct SwapchainLatencyCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var latency_mode_enable: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        latency_mode_enable: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.SWAPCHAIN_LATENCY_CREATE_INFO_NV
        self.p_next = p_next
        self.latency_mode_enable = latency_mode_enable


struct LatencySurfaceCapabilitiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_mode_count: UInt32
    var p_present_modes: Ptr[PresentModeKHR]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_mode_count: UInt32 = zero_init[UInt32](),
        p_present_modes: Ptr[PresentModeKHR] = zero_init[Ptr[PresentModeKHR]](),
    ):
        self.s_type = StructureType.LATENCY_SURFACE_CAPABILITIES_NV
        self.p_next = p_next
        self.present_mode_count = present_mode_count
        self.p_present_modes = p_present_modes


struct PhysicalDeviceCudaKernelLaunchFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cuda_kernel_launch_features: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cuda_kernel_launch_features: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV
        self.p_next = p_next
        self.cuda_kernel_launch_features = cuda_kernel_launch_features


struct PhysicalDeviceCudaKernelLaunchPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var compute_capability_minor: UInt32
    var compute_capability_major: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        compute_capability_minor: UInt32 = zero_init[UInt32](),
        compute_capability_major: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_PROPERTIES_NV
        self.p_next = p_next
        self.compute_capability_minor = compute_capability_minor
        self.compute_capability_major = compute_capability_major


struct DeviceQueueShaderCoreControlCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_core_count: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_core_count: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DEVICE_QUEUE_SHADER_CORE_CONTROL_CREATE_INFO_ARM
        self.p_next = p_next
        self.shader_core_count = shader_core_count


struct PhysicalDeviceSchedulingControlsFeaturesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var scheduling_controls: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        scheduling_controls: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM
        self.p_next = p_next
        self.scheduling_controls = scheduling_controls


struct PhysicalDeviceSchedulingControlsPropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var scheduling_controls_flags: PhysicalDeviceSchedulingControlsFlagsARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        scheduling_controls_flags: PhysicalDeviceSchedulingControlsFlagsARM = zero_init[PhysicalDeviceSchedulingControlsFlagsARM](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SCHEDULING_CONTROLS_PROPERTIES_ARM
        self.p_next = p_next
        self.scheduling_controls_flags = scheduling_controls_flags


struct PhysicalDeviceRelaxedLineRasterizationFeaturesIMG(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var relaxed_line_rasterization: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        relaxed_line_rasterization: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG
        self.p_next = p_next
        self.relaxed_line_rasterization = relaxed_line_rasterization


struct PhysicalDeviceRenderPassStripedFeaturesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var render_pass_striped: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        render_pass_striped: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM
        self.p_next = p_next
        self.render_pass_striped = render_pass_striped


struct PhysicalDeviceRenderPassStripedPropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var render_pass_stripe_granularity: Extent2D
    var max_render_pass_stripes: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        render_pass_stripe_granularity: Extent2D = zero_init[Extent2D](),
        max_render_pass_stripes: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RENDER_PASS_STRIPED_PROPERTIES_ARM
        self.p_next = p_next
        self.render_pass_stripe_granularity = render_pass_stripe_granularity
        self.max_render_pass_stripes = max_render_pass_stripes


struct RenderPassStripeInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stripe_area: Rect2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stripe_area: Rect2D = zero_init[Rect2D](),
    ):
        self.s_type = StructureType.RENDER_PASS_STRIPE_INFO_ARM
        self.p_next = p_next
        self.stripe_area = stripe_area


struct RenderPassStripeBeginInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stripe_info_count: UInt32
    var p_stripe_infos: Ptr[RenderPassStripeInfoARM]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stripe_info_count: UInt32 = zero_init[UInt32](),
        p_stripe_infos: Ptr[RenderPassStripeInfoARM] = zero_init[Ptr[RenderPassStripeInfoARM]](),
    ):
        self.s_type = StructureType.RENDER_PASS_STRIPE_BEGIN_INFO_ARM
        self.p_next = p_next
        self.stripe_info_count = stripe_info_count
        self.p_stripe_infos = p_stripe_infos


struct RenderPassStripeSubmitInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var stripe_semaphore_info_count: UInt32
    var p_stripe_semaphore_infos: Ptr[SemaphoreSubmitInfo]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        stripe_semaphore_info_count: UInt32 = zero_init[UInt32](),
        p_stripe_semaphore_infos: Ptr[SemaphoreSubmitInfo] = zero_init[Ptr[SemaphoreSubmitInfo]](),
    ):
        self.s_type = StructureType.RENDER_PASS_STRIPE_SUBMIT_INFO_ARM
        self.p_next = p_next
        self.stripe_semaphore_info_count = stripe_semaphore_info_count
        self.p_stripe_semaphore_infos = p_stripe_semaphore_infos


struct PhysicalDevicePipelineOpacityMicromapFeaturesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_opacity_micromap: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_opacity_micromap: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM
        self.p_next = p_next
        self.pipeline_opacity_micromap = pipeline_opacity_micromap


struct PhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_maximal_reconvergence: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_maximal_reconvergence: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR
        self.p_next = p_next
        self.shader_maximal_reconvergence = shader_maximal_reconvergence


struct PhysicalDeviceShaderSubgroupRotateFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_subgroup_rotate: Bool32
    var shader_subgroup_rotate_clustered: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_subgroup_rotate: Bool32 = zero_init[Bool32](),
        shader_subgroup_rotate_clustered: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES
        self.p_next = p_next
        self.shader_subgroup_rotate = shader_subgroup_rotate
        self.shader_subgroup_rotate_clustered = shader_subgroup_rotate_clustered


struct PhysicalDeviceShaderExpectAssumeFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_expect_assume: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_expect_assume: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES
        self.p_next = p_next
        self.shader_expect_assume = shader_expect_assume


struct PhysicalDeviceShaderFloatControls2Features(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_float_controls_2: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_float_controls_2: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES
        self.p_next = p_next
        self.shader_float_controls_2 = shader_float_controls_2


struct PhysicalDeviceDynamicRenderingLocalReadFeatures(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dynamic_rendering_local_read: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dynamic_rendering_local_read: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES
        self.p_next = p_next
        self.dynamic_rendering_local_read = dynamic_rendering_local_read


struct RenderingAttachmentLocationInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var color_attachment_count: UInt32
    var p_color_attachment_locations: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        color_attachment_count: UInt32 = zero_init[UInt32](),
        p_color_attachment_locations: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.RENDERING_ATTACHMENT_LOCATION_INFO
        self.p_next = p_next
        self.color_attachment_count = color_attachment_count
        self.p_color_attachment_locations = p_color_attachment_locations


struct RenderingInputAttachmentIndexInfo(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var color_attachment_count: UInt32
    var p_color_attachment_input_indices: Ptr[UInt32]
    var p_depth_input_attachment_index: Ptr[UInt32]
    var p_stencil_input_attachment_index: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        color_attachment_count: UInt32 = zero_init[UInt32](),
        p_color_attachment_input_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        p_depth_input_attachment_index: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
        p_stencil_input_attachment_index: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.RENDERING_INPUT_ATTACHMENT_INDEX_INFO
        self.p_next = p_next
        self.color_attachment_count = color_attachment_count
        self.p_color_attachment_input_indices = p_color_attachment_input_indices
        self.p_depth_input_attachment_index = p_depth_input_attachment_index
        self.p_stencil_input_attachment_index = p_stencil_input_attachment_index


struct PhysicalDeviceShaderQuadControlFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_quad_control: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_quad_control: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR
        self.p_next = p_next
        self.shader_quad_control = shader_quad_control


struct PhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_float_16_vector_atomics: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_float_16_vector_atomics: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV
        self.p_next = p_next
        self.shader_float_16_vector_atomics = shader_float_16_vector_atomics


struct PhysicalDeviceMapMemoryPlacedFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var memory_map_placed: Bool32
    var memory_map_range_placed: Bool32
    var memory_unmap_reserve: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        memory_map_placed: Bool32 = zero_init[Bool32](),
        memory_map_range_placed: Bool32 = zero_init[Bool32](),
        memory_unmap_reserve: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT
        self.p_next = p_next
        self.memory_map_placed = memory_map_placed
        self.memory_map_range_placed = memory_map_range_placed
        self.memory_unmap_reserve = memory_unmap_reserve


struct PhysicalDeviceMapMemoryPlacedPropertiesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var min_placed_memory_map_alignment: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        min_placed_memory_map_alignment: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_MAP_MEMORY_PLACED_PROPERTIES_EXT
        self.p_next = p_next
        self.min_placed_memory_map_alignment = min_placed_memory_map_alignment


struct MemoryMapPlacedInfoEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_placed_address: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_placed_address: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.MEMORY_MAP_PLACED_INFO_EXT
        self.p_next = p_next
        self.p_placed_address = p_placed_address


struct PhysicalDeviceShaderBfloat16FeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_b_float_16_type: Bool32
    var shader_b_float_16_dot_product: Bool32
    var shader_b_float_16_cooperative_matrix: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_b_float_16_type: Bool32 = zero_init[Bool32](),
        shader_b_float_16_dot_product: Bool32 = zero_init[Bool32](),
        shader_b_float_16_cooperative_matrix: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_BFLOAT16_FEATURES_KHR
        self.p_next = p_next
        self.shader_b_float_16_type = shader_b_float_16_type
        self.shader_b_float_16_dot_product = shader_b_float_16_dot_product
        self.shader_b_float_16_cooperative_matrix = shader_b_float_16_cooperative_matrix


struct PhysicalDeviceRawAccessChainsFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_raw_access_chains: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_raw_access_chains: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV
        self.p_next = p_next
        self.shader_raw_access_chains = shader_raw_access_chains


struct PhysicalDeviceCommandBufferInheritanceFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var command_buffer_inheritance: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        command_buffer_inheritance: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV
        self.p_next = p_next
        self.command_buffer_inheritance = command_buffer_inheritance


struct PhysicalDeviceImageAlignmentControlFeaturesMESA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var image_alignment_control: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        image_alignment_control: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA
        self.p_next = p_next
        self.image_alignment_control = image_alignment_control


struct PhysicalDeviceImageAlignmentControlPropertiesMESA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var supported_image_alignment_mask: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        supported_image_alignment_mask: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_PROPERTIES_MESA
        self.p_next = p_next
        self.supported_image_alignment_mask = supported_image_alignment_mask


struct ImageAlignmentControlCreateInfoMESA(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var maximum_requested_alignment: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        maximum_requested_alignment: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.IMAGE_ALIGNMENT_CONTROL_CREATE_INFO_MESA
        self.p_next = p_next
        self.maximum_requested_alignment = maximum_requested_alignment


struct PhysicalDeviceShaderReplicatedCompositesFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_replicated_composites: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_replicated_composites: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT
        self.p_next = p_next
        self.shader_replicated_composites = shader_replicated_composites


struct PhysicalDevicePresentModeFifoLatestReadyFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_mode_fifo_latest_ready: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_mode_fifo_latest_ready: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_KHR
        self.p_next = p_next
        self.present_mode_fifo_latest_ready = present_mode_fifo_latest_ready


struct DepthClampRangeEXT(ImplicitlyCopyable, Movable):
    var min_depth_clamp: Float32
    var max_depth_clamp: Float32

    fn __init__(
        out self,
        min_depth_clamp: Float32 = zero_init[Float32](),
        max_depth_clamp: Float32 = zero_init[Float32](),
    ):
        self.min_depth_clamp = min_depth_clamp
        self.max_depth_clamp = max_depth_clamp


struct PhysicalDeviceCooperativeMatrix2FeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cooperative_matrix_workgroup_scope: Bool32
    var cooperative_matrix_flexible_dimensions: Bool32
    var cooperative_matrix_reductions: Bool32
    var cooperative_matrix_conversions: Bool32
    var cooperative_matrix_per_element_operations: Bool32
    var cooperative_matrix_tensor_addressing: Bool32
    var cooperative_matrix_block_loads: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cooperative_matrix_workgroup_scope: Bool32 = zero_init[Bool32](),
        cooperative_matrix_flexible_dimensions: Bool32 = zero_init[Bool32](),
        cooperative_matrix_reductions: Bool32 = zero_init[Bool32](),
        cooperative_matrix_conversions: Bool32 = zero_init[Bool32](),
        cooperative_matrix_per_element_operations: Bool32 = zero_init[Bool32](),
        cooperative_matrix_tensor_addressing: Bool32 = zero_init[Bool32](),
        cooperative_matrix_block_loads: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV
        self.p_next = p_next
        self.cooperative_matrix_workgroup_scope = cooperative_matrix_workgroup_scope
        self.cooperative_matrix_flexible_dimensions = cooperative_matrix_flexible_dimensions
        self.cooperative_matrix_reductions = cooperative_matrix_reductions
        self.cooperative_matrix_conversions = cooperative_matrix_conversions
        self.cooperative_matrix_per_element_operations = cooperative_matrix_per_element_operations
        self.cooperative_matrix_tensor_addressing = cooperative_matrix_tensor_addressing
        self.cooperative_matrix_block_loads = cooperative_matrix_block_loads


struct PhysicalDeviceCooperativeMatrix2PropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cooperative_matrix_workgroup_scope_max_workgroup_size: UInt32
    var cooperative_matrix_flexible_dimensions_max_dimension: UInt32
    var cooperative_matrix_workgroup_scope_reserved_shared_memory: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cooperative_matrix_workgroup_scope_max_workgroup_size: UInt32 = zero_init[UInt32](),
        cooperative_matrix_flexible_dimensions_max_dimension: UInt32 = zero_init[UInt32](),
        cooperative_matrix_workgroup_scope_reserved_shared_memory: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_PROPERTIES_NV
        self.p_next = p_next
        self.cooperative_matrix_workgroup_scope_max_workgroup_size = cooperative_matrix_workgroup_scope_max_workgroup_size
        self.cooperative_matrix_flexible_dimensions_max_dimension = cooperative_matrix_flexible_dimensions_max_dimension
        self.cooperative_matrix_workgroup_scope_reserved_shared_memory = cooperative_matrix_workgroup_scope_reserved_shared_memory


struct CooperativeMatrixFlexibleDimensionsPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var m_granularity: UInt32
    var n_granularity: UInt32
    var k_granularity: UInt32
    var a_type: ComponentTypeKHR
    var b_type: ComponentTypeKHR
    var c_type: ComponentTypeKHR
    var result_type: ComponentTypeKHR
    var saturating_accumulation: Bool32
    var scope: ScopeKHR
    var workgroup_invocations: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        m_granularity: UInt32 = zero_init[UInt32](),
        n_granularity: UInt32 = zero_init[UInt32](),
        k_granularity: UInt32 = zero_init[UInt32](),
        a_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        b_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        c_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        result_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        saturating_accumulation: Bool32 = zero_init[Bool32](),
        scope: ScopeKHR = zero_init[ScopeKHR](),
        workgroup_invocations: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV
        self.p_next = p_next
        self.m_granularity = m_granularity
        self.n_granularity = n_granularity
        self.k_granularity = k_granularity
        self.a_type = a_type
        self.b_type = b_type
        self.c_type = c_type
        self.result_type = result_type
        self.saturating_accumulation = saturating_accumulation
        self.scope = scope
        self.workgroup_invocations = workgroup_invocations


struct PhysicalDeviceHdrVividFeaturesHUAWEI(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var hdr_vivid: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        hdr_vivid: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI
        self.p_next = p_next
        self.hdr_vivid = hdr_vivid


struct PhysicalDeviceVertexAttributeRobustnessFeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var vertex_attribute_robustness: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        vertex_attribute_robustness: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT
        self.p_next = p_next
        self.vertex_attribute_robustness = vertex_attribute_robustness


struct PhysicalDeviceDenseGeometryFormatFeaturesAMDX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dense_geometry_format: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dense_geometry_format: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DENSE_GEOMETRY_FORMAT_FEATURES_AMDX
        self.p_next = p_next
        self.dense_geometry_format = dense_geometry_format


struct AccelerationStructureDenseGeometryFormatTrianglesDataAMDX(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var compressed_data: DeviceOrHostAddressConstKHR
    var data_size: DeviceSize
    var num_triangles: UInt32
    var num_vertices: UInt32
    var max_primitive_index: UInt32
    var max_geometry_index: UInt32
    var format: CompressedTriangleFormatAMDX

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        compressed_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        data_size: DeviceSize = zero_init[DeviceSize](),
        num_triangles: UInt32 = zero_init[UInt32](),
        num_vertices: UInt32 = zero_init[UInt32](),
        max_primitive_index: UInt32 = zero_init[UInt32](),
        max_geometry_index: UInt32 = zero_init[UInt32](),
        format: CompressedTriangleFormatAMDX = zero_init[CompressedTriangleFormatAMDX](),
    ):
        self.s_type = StructureType.ACCELERATION_STRUCTURE_DENSE_GEOMETRY_FORMAT_TRIANGLES_DATA_AMDX
        self.p_next = p_next
        self.compressed_data = compressed_data
        self.data_size = data_size
        self.num_triangles = num_triangles
        self.num_vertices = num_vertices
        self.max_primitive_index = max_primitive_index
        self.max_geometry_index = max_geometry_index
        self.format = format


struct PhysicalDeviceDepthClampZeroOneFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var depth_clamp_zero_one: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        depth_clamp_zero_one: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR
        self.p_next = p_next
        self.depth_clamp_zero_one = depth_clamp_zero_one


struct PhysicalDeviceCooperativeVectorFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cooperative_vector: Bool32
    var cooperative_vector_training: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cooperative_vector: Bool32 = zero_init[Bool32](),
        cooperative_vector_training: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV
        self.p_next = p_next
        self.cooperative_vector = cooperative_vector
        self.cooperative_vector_training = cooperative_vector_training


struct CooperativeVectorPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var input_type: ComponentTypeKHR
    var input_interpretation: ComponentTypeKHR
    var matrix_interpretation: ComponentTypeKHR
    var bias_interpretation: ComponentTypeKHR
    var result_type: ComponentTypeKHR
    var transpose: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        input_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        input_interpretation: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        matrix_interpretation: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        bias_interpretation: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        result_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        transpose: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.COOPERATIVE_VECTOR_PROPERTIES_NV
        self.p_next = p_next
        self.input_type = input_type
        self.input_interpretation = input_interpretation
        self.matrix_interpretation = matrix_interpretation
        self.bias_interpretation = bias_interpretation
        self.result_type = result_type
        self.transpose = transpose


struct PhysicalDeviceCooperativeVectorPropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var cooperative_vector_supported_stages: ShaderStageFlags
    var cooperative_vector_training_float_16_accumulation: Bool32
    var cooperative_vector_training_float_32_accumulation: Bool32
    var max_cooperative_vector_components: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        cooperative_vector_supported_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
        cooperative_vector_training_float_16_accumulation: Bool32 = zero_init[Bool32](),
        cooperative_vector_training_float_32_accumulation: Bool32 = zero_init[Bool32](),
        max_cooperative_vector_components: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_COOPERATIVE_VECTOR_PROPERTIES_NV
        self.p_next = p_next
        self.cooperative_vector_supported_stages = cooperative_vector_supported_stages
        self.cooperative_vector_training_float_16_accumulation = cooperative_vector_training_float_16_accumulation
        self.cooperative_vector_training_float_32_accumulation = cooperative_vector_training_float_32_accumulation
        self.max_cooperative_vector_components = max_cooperative_vector_components


struct ConvertCooperativeVectorMatrixInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_size: UInt
    var src_data: DeviceOrHostAddressConstKHR
    var p_dst_size: Ptr[UInt]
    var dst_data: DeviceOrHostAddressKHR
    var src_component_type: ComponentTypeKHR
    var dst_component_type: ComponentTypeKHR
    var num_rows: UInt32
    var num_columns: UInt32
    var src_layout: CooperativeVectorMatrixLayoutNV
    var src_stride: UInt
    var dst_layout: CooperativeVectorMatrixLayoutNV
    var dst_stride: UInt

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_size: UInt = zero_init[UInt](),
        src_data: DeviceOrHostAddressConstKHR = zero_init[DeviceOrHostAddressConstKHR](),
        p_dst_size: Ptr[UInt] = zero_init[Ptr[UInt]](),
        dst_data: DeviceOrHostAddressKHR = zero_init[DeviceOrHostAddressKHR](),
        src_component_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        dst_component_type: ComponentTypeKHR = zero_init[ComponentTypeKHR](),
        num_rows: UInt32 = zero_init[UInt32](),
        num_columns: UInt32 = zero_init[UInt32](),
        src_layout: CooperativeVectorMatrixLayoutNV = zero_init[CooperativeVectorMatrixLayoutNV](),
        src_stride: UInt = zero_init[UInt](),
        dst_layout: CooperativeVectorMatrixLayoutNV = zero_init[CooperativeVectorMatrixLayoutNV](),
        dst_stride: UInt = zero_init[UInt](),
    ):
        self.s_type = StructureType.CONVERT_COOPERATIVE_VECTOR_MATRIX_INFO_NV
        self.p_next = p_next
        self.src_size = src_size
        self.src_data = src_data
        self.p_dst_size = p_dst_size
        self.dst_data = dst_data
        self.src_component_type = src_component_type
        self.dst_component_type = dst_component_type
        self.num_rows = num_rows
        self.num_columns = num_columns
        self.src_layout = src_layout
        self.src_stride = src_stride
        self.dst_layout = dst_layout
        self.dst_stride = dst_stride


struct PhysicalDeviceTileShadingFeaturesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tile_shading: Bool32
    var tile_shading_fragment_stage: Bool32
    var tile_shading_color_attachments: Bool32
    var tile_shading_depth_attachments: Bool32
    var tile_shading_stencil_attachments: Bool32
    var tile_shading_input_attachments: Bool32
    var tile_shading_sampled_attachments: Bool32
    var tile_shading_per_tile_draw: Bool32
    var tile_shading_per_tile_dispatch: Bool32
    var tile_shading_dispatch_tile: Bool32
    var tile_shading_apron: Bool32
    var tile_shading_anisotropic_apron: Bool32
    var tile_shading_atomic_ops: Bool32
    var tile_shading_image_processing: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tile_shading: Bool32 = zero_init[Bool32](),
        tile_shading_fragment_stage: Bool32 = zero_init[Bool32](),
        tile_shading_color_attachments: Bool32 = zero_init[Bool32](),
        tile_shading_depth_attachments: Bool32 = zero_init[Bool32](),
        tile_shading_stencil_attachments: Bool32 = zero_init[Bool32](),
        tile_shading_input_attachments: Bool32 = zero_init[Bool32](),
        tile_shading_sampled_attachments: Bool32 = zero_init[Bool32](),
        tile_shading_per_tile_draw: Bool32 = zero_init[Bool32](),
        tile_shading_per_tile_dispatch: Bool32 = zero_init[Bool32](),
        tile_shading_dispatch_tile: Bool32 = zero_init[Bool32](),
        tile_shading_apron: Bool32 = zero_init[Bool32](),
        tile_shading_anisotropic_apron: Bool32 = zero_init[Bool32](),
        tile_shading_atomic_ops: Bool32 = zero_init[Bool32](),
        tile_shading_image_processing: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TILE_SHADING_FEATURES_QCOM
        self.p_next = p_next
        self.tile_shading = tile_shading
        self.tile_shading_fragment_stage = tile_shading_fragment_stage
        self.tile_shading_color_attachments = tile_shading_color_attachments
        self.tile_shading_depth_attachments = tile_shading_depth_attachments
        self.tile_shading_stencil_attachments = tile_shading_stencil_attachments
        self.tile_shading_input_attachments = tile_shading_input_attachments
        self.tile_shading_sampled_attachments = tile_shading_sampled_attachments
        self.tile_shading_per_tile_draw = tile_shading_per_tile_draw
        self.tile_shading_per_tile_dispatch = tile_shading_per_tile_dispatch
        self.tile_shading_dispatch_tile = tile_shading_dispatch_tile
        self.tile_shading_apron = tile_shading_apron
        self.tile_shading_anisotropic_apron = tile_shading_anisotropic_apron
        self.tile_shading_atomic_ops = tile_shading_atomic_ops
        self.tile_shading_image_processing = tile_shading_image_processing


struct PhysicalDeviceTileShadingPropertiesQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_apron_size: UInt32
    var prefer_non_coherent: Bool32
    var tile_granularity: Extent2D
    var max_tile_shading_rate: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_apron_size: UInt32 = zero_init[UInt32](),
        prefer_non_coherent: Bool32 = zero_init[Bool32](),
        tile_granularity: Extent2D = zero_init[Extent2D](),
        max_tile_shading_rate: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TILE_SHADING_PROPERTIES_QCOM
        self.p_next = p_next
        self.max_apron_size = max_apron_size
        self.prefer_non_coherent = prefer_non_coherent
        self.tile_granularity = tile_granularity
        self.max_tile_shading_rate = max_tile_shading_rate


struct RenderPassTileShadingCreateInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: TileShadingRenderPassFlagsQCOM
    var tile_apron_size: Extent2D

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: TileShadingRenderPassFlagsQCOM = zero_init[TileShadingRenderPassFlagsQCOM](),
        tile_apron_size: Extent2D = zero_init[Extent2D](),
    ):
        self.s_type = StructureType.RENDER_PASS_TILE_SHADING_CREATE_INFO_QCOM
        self.p_next = p_next
        self.flags = flags
        self.tile_apron_size = tile_apron_size


struct PerTileBeginInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.PER_TILE_BEGIN_INFO_QCOM
        self.p_next = p_next


struct PerTileEndInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.PER_TILE_END_INFO_QCOM
        self.p_next = p_next


struct DispatchTileInfoQCOM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.DISPATCH_TILE_INFO_QCOM
        self.p_next = p_next


struct PhysicalDeviceFragmentDensityMapLayeredPropertiesVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_fragment_density_map_layers: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_fragment_density_map_layers: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_LAYERED_PROPERTIES_VALVE
        self.p_next = p_next
        self.max_fragment_density_map_layers = max_fragment_density_map_layers


struct PhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var fragment_density_map_layered: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        fragment_density_map_layered: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_LAYERED_FEATURES_VALVE
        self.p_next = p_next
        self.fragment_density_map_layered = fragment_density_map_layered


struct PipelineFragmentDensityMapLayeredCreateInfoVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_fragment_density_map_layers: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_fragment_density_map_layers: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PIPELINE_FRAGMENT_DENSITY_MAP_LAYERED_CREATE_INFO_VALVE
        self.p_next = p_next
        self.max_fragment_density_map_layers = max_fragment_density_map_layers


struct SetPresentConfigNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var num_frames_per_batch: UInt32
    var present_config_feedback: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        num_frames_per_batch: UInt32 = zero_init[UInt32](),
        present_config_feedback: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.SET_PRESENT_CONFIG_NV
        self.p_next = p_next
        self.num_frames_per_batch = num_frames_per_batch
        self.present_config_feedback = present_config_feedback


struct PhysicalDevicePresentMeteringFeaturesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var present_metering: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        present_metering: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PRESENT_METERING_FEATURES_NV
        self.p_next = p_next
        self.present_metering = present_metering


struct ExternalComputeQueueDeviceCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var reserved_external_queues: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        reserved_external_queues: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.EXTERNAL_COMPUTE_QUEUE_DEVICE_CREATE_INFO_NV
        self.p_next = p_next
        self.reserved_external_queues = reserved_external_queues


struct ExternalComputeQueueCreateInfoNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var preferred_queue: Queue

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        preferred_queue: Queue = zero_init[Queue](),
    ):
        self.s_type = StructureType.EXTERNAL_COMPUTE_QUEUE_CREATE_INFO_NV
        self.p_next = p_next
        self.preferred_queue = preferred_queue


struct ExternalComputeQueueDataParamsNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var device_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        device_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.EXTERNAL_COMPUTE_QUEUE_DATA_PARAMS_NV
        self.p_next = p_next
        self.device_index = device_index


struct PhysicalDeviceExternalComputeQueuePropertiesNV(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var external_data_size: UInt32
    var max_external_queues: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        external_data_size: UInt32 = zero_init[UInt32](),
        max_external_queues: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_COMPUTE_QUEUE_PROPERTIES_NV
        self.p_next = p_next
        self.external_data_size = external_data_size
        self.max_external_queues = max_external_queues


struct PhysicalDeviceFormatPackFeaturesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var format_pack: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        format_pack: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_FORMAT_PACK_FEATURES_ARM
        self.p_next = p_next
        self.format_pack = format_pack


struct TensorDescriptionARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tiling: TensorTilingARM
    var format: Format
    var dimension_count: UInt32
    var p_dimensions: Ptr[Int64]
    var p_strides: Ptr[Int64]
    var usage: TensorUsageFlagsARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tiling: TensorTilingARM = zero_init[TensorTilingARM](),
        format: Format = zero_init[Format](),
        dimension_count: UInt32 = zero_init[UInt32](),
        p_dimensions: Ptr[Int64] = zero_init[Ptr[Int64]](),
        p_strides: Ptr[Int64] = zero_init[Ptr[Int64]](),
        usage: TensorUsageFlagsARM = zero_init[TensorUsageFlagsARM](),
    ):
        self.s_type = StructureType.TENSOR_DESCRIPTION_ARM
        self.p_next = p_next
        self.tiling = tiling
        self.format = format
        self.dimension_count = dimension_count
        self.p_dimensions = p_dimensions
        self.p_strides = p_strides
        self.usage = usage


struct TensorCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: TensorCreateFlagsARM
    var p_description: Ptr[TensorDescriptionARM]
    var sharing_mode: SharingMode
    var queue_family_index_count: UInt32
    var p_queue_family_indices: Ptr[UInt32]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: TensorCreateFlagsARM = zero_init[TensorCreateFlagsARM](),
        p_description: Ptr[TensorDescriptionARM] = zero_init[Ptr[TensorDescriptionARM]](),
        sharing_mode: SharingMode = zero_init[SharingMode](),
        queue_family_index_count: UInt32 = zero_init[UInt32](),
        p_queue_family_indices: Ptr[UInt32] = zero_init[Ptr[UInt32]](),
    ):
        self.s_type = StructureType.TENSOR_CREATE_INFO_ARM
        self.p_next = p_next
        self.flags = flags
        self.p_description = p_description
        self.sharing_mode = sharing_mode
        self.queue_family_index_count = queue_family_index_count
        self.p_queue_family_indices = p_queue_family_indices


struct TensorViewCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: TensorViewCreateFlagsARM
    var tensor: TensorARM
    var format: Format

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: TensorViewCreateFlagsARM = zero_init[TensorViewCreateFlagsARM](),
        tensor: TensorARM = zero_init[TensorARM](),
        format: Format = zero_init[Format](),
    ):
        self.s_type = StructureType.TENSOR_VIEW_CREATE_INFO_ARM
        self.p_next = p_next
        self.flags = flags
        self.tensor = tensor
        self.format = format


struct TensorMemoryRequirementsInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor: TensorARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor: TensorARM = zero_init[TensorARM](),
    ):
        self.s_type = StructureType.TENSOR_MEMORY_REQUIREMENTS_INFO_ARM
        self.p_next = p_next
        self.tensor = tensor


struct BindTensorMemoryInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor: TensorARM
    var memory: DeviceMemory
    var memory_offset: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor: TensorARM = zero_init[TensorARM](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        memory_offset: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.BIND_TENSOR_MEMORY_INFO_ARM
        self.p_next = p_next
        self.tensor = tensor
        self.memory = memory
        self.memory_offset = memory_offset


struct WriteDescriptorSetTensorARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor_view_count: UInt32
    var p_tensor_views: Ptr[TensorViewARM]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor_view_count: UInt32 = zero_init[UInt32](),
        p_tensor_views: Ptr[TensorViewARM] = zero_init[Ptr[TensorViewARM]](),
    ):
        self.s_type = StructureType.WRITE_DESCRIPTOR_SET_TENSOR_ARM
        self.p_next = p_next
        self.tensor_view_count = tensor_view_count
        self.p_tensor_views = p_tensor_views


struct TensorFormatPropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var optimal_tiling_tensor_features: FormatFeatureFlags2
    var linear_tiling_tensor_features: FormatFeatureFlags2

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        optimal_tiling_tensor_features: FormatFeatureFlags2 = zero_init[FormatFeatureFlags2](),
        linear_tiling_tensor_features: FormatFeatureFlags2 = zero_init[FormatFeatureFlags2](),
    ):
        self.s_type = StructureType.TENSOR_FORMAT_PROPERTIES_ARM
        self.p_next = p_next
        self.optimal_tiling_tensor_features = optimal_tiling_tensor_features
        self.linear_tiling_tensor_features = linear_tiling_tensor_features


struct PhysicalDeviceTensorPropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var max_tensor_dimension_count: UInt32
    var max_tensor_elements: UInt64
    var max_per_dimension_tensor_elements: UInt64
    var max_tensor_stride: Int64
    var max_tensor_size: UInt64
    var max_tensor_shader_access_array_length: UInt32
    var max_tensor_shader_access_size: UInt32
    var max_descriptor_set_storage_tensors: UInt32
    var max_per_stage_descriptor_set_storage_tensors: UInt32
    var max_descriptor_set_update_after_bind_storage_tensors: UInt32
    var max_per_stage_descriptor_update_after_bind_storage_tensors: UInt32
    var shader_storage_tensor_array_non_uniform_indexing_native: Bool32
    var shader_tensor_supported_stages: ShaderStageFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        max_tensor_dimension_count: UInt32 = zero_init[UInt32](),
        max_tensor_elements: UInt64 = zero_init[UInt64](),
        max_per_dimension_tensor_elements: UInt64 = zero_init[UInt64](),
        max_tensor_stride: Int64 = zero_init[Int64](),
        max_tensor_size: UInt64 = zero_init[UInt64](),
        max_tensor_shader_access_array_length: UInt32 = zero_init[UInt32](),
        max_tensor_shader_access_size: UInt32 = zero_init[UInt32](),
        max_descriptor_set_storage_tensors: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_set_storage_tensors: UInt32 = zero_init[UInt32](),
        max_descriptor_set_update_after_bind_storage_tensors: UInt32 = zero_init[UInt32](),
        max_per_stage_descriptor_update_after_bind_storage_tensors: UInt32 = zero_init[UInt32](),
        shader_storage_tensor_array_non_uniform_indexing_native: Bool32 = zero_init[Bool32](),
        shader_tensor_supported_stages: ShaderStageFlags = zero_init[ShaderStageFlags](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TENSOR_PROPERTIES_ARM
        self.p_next = p_next
        self.max_tensor_dimension_count = max_tensor_dimension_count
        self.max_tensor_elements = max_tensor_elements
        self.max_per_dimension_tensor_elements = max_per_dimension_tensor_elements
        self.max_tensor_stride = max_tensor_stride
        self.max_tensor_size = max_tensor_size
        self.max_tensor_shader_access_array_length = max_tensor_shader_access_array_length
        self.max_tensor_shader_access_size = max_tensor_shader_access_size
        self.max_descriptor_set_storage_tensors = max_descriptor_set_storage_tensors
        self.max_per_stage_descriptor_set_storage_tensors = max_per_stage_descriptor_set_storage_tensors
        self.max_descriptor_set_update_after_bind_storage_tensors = max_descriptor_set_update_after_bind_storage_tensors
        self.max_per_stage_descriptor_update_after_bind_storage_tensors = max_per_stage_descriptor_update_after_bind_storage_tensors
        self.shader_storage_tensor_array_non_uniform_indexing_native = shader_storage_tensor_array_non_uniform_indexing_native
        self.shader_tensor_supported_stages = shader_tensor_supported_stages


struct TensorMemoryBarrierARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_stage_mask: PipelineStageFlags2
    var src_access_mask: AccessFlags2
    var dst_stage_mask: PipelineStageFlags2
    var dst_access_mask: AccessFlags2
    var src_queue_family_index: UInt32
    var dst_queue_family_index: UInt32
    var tensor: TensorARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        src_access_mask: AccessFlags2 = zero_init[AccessFlags2](),
        dst_stage_mask: PipelineStageFlags2 = zero_init[PipelineStageFlags2](),
        dst_access_mask: AccessFlags2 = zero_init[AccessFlags2](),
        src_queue_family_index: UInt32 = zero_init[UInt32](),
        dst_queue_family_index: UInt32 = zero_init[UInt32](),
        tensor: TensorARM = zero_init[TensorARM](),
    ):
        self.s_type = StructureType.TENSOR_MEMORY_BARRIER_ARM
        self.p_next = p_next
        self.src_stage_mask = src_stage_mask
        self.src_access_mask = src_access_mask
        self.dst_stage_mask = dst_stage_mask
        self.dst_access_mask = dst_access_mask
        self.src_queue_family_index = src_queue_family_index
        self.dst_queue_family_index = dst_queue_family_index
        self.tensor = tensor


struct TensorDependencyInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor_memory_barrier_count: UInt32
    var p_tensor_memory_barriers: Ptr[TensorMemoryBarrierARM]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor_memory_barrier_count: UInt32 = zero_init[UInt32](),
        p_tensor_memory_barriers: Ptr[TensorMemoryBarrierARM] = zero_init[Ptr[TensorMemoryBarrierARM]](),
    ):
        self.s_type = StructureType.TENSOR_DEPENDENCY_INFO_ARM
        self.p_next = p_next
        self.tensor_memory_barrier_count = tensor_memory_barrier_count
        self.p_tensor_memory_barriers = p_tensor_memory_barriers


struct PhysicalDeviceTensorFeaturesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor_non_packed: Bool32
    var shader_tensor_access: Bool32
    var shader_storage_tensor_array_dynamic_indexing: Bool32
    var shader_storage_tensor_array_non_uniform_indexing: Bool32
    var descriptor_binding_storage_tensor_update_after_bind: Bool32
    var tensors: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor_non_packed: Bool32 = zero_init[Bool32](),
        shader_tensor_access: Bool32 = zero_init[Bool32](),
        shader_storage_tensor_array_dynamic_indexing: Bool32 = zero_init[Bool32](),
        shader_storage_tensor_array_non_uniform_indexing: Bool32 = zero_init[Bool32](),
        descriptor_binding_storage_tensor_update_after_bind: Bool32 = zero_init[Bool32](),
        tensors: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_TENSOR_FEATURES_ARM
        self.p_next = p_next
        self.tensor_non_packed = tensor_non_packed
        self.shader_tensor_access = shader_tensor_access
        self.shader_storage_tensor_array_dynamic_indexing = shader_storage_tensor_array_dynamic_indexing
        self.shader_storage_tensor_array_non_uniform_indexing = shader_storage_tensor_array_non_uniform_indexing
        self.descriptor_binding_storage_tensor_update_after_bind = descriptor_binding_storage_tensor_update_after_bind
        self.tensors = tensors


struct DeviceTensorMemoryRequirementsARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_create_info: Ptr[TensorCreateInfoARM]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_create_info: Ptr[TensorCreateInfoARM] = zero_init[Ptr[TensorCreateInfoARM]](),
    ):
        self.s_type = StructureType.DEVICE_TENSOR_MEMORY_REQUIREMENTS_ARM
        self.p_next = p_next
        self.p_create_info = p_create_info


struct CopyTensorInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var src_tensor: TensorARM
    var dst_tensor: TensorARM
    var region_count: UInt32
    var p_regions: Ptr[TensorCopyARM]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        src_tensor: TensorARM = zero_init[TensorARM](),
        dst_tensor: TensorARM = zero_init[TensorARM](),
        region_count: UInt32 = zero_init[UInt32](),
        p_regions: Ptr[TensorCopyARM] = zero_init[Ptr[TensorCopyARM]](),
    ):
        self.s_type = StructureType.COPY_TENSOR_INFO_ARM
        self.p_next = p_next
        self.src_tensor = src_tensor
        self.dst_tensor = dst_tensor
        self.region_count = region_count
        self.p_regions = p_regions


struct TensorCopyARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dimension_count: UInt32
    var p_src_offset: Ptr[UInt64]
    var p_dst_offset: Ptr[UInt64]
    var p_extent: Ptr[UInt64]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dimension_count: UInt32 = zero_init[UInt32](),
        p_src_offset: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
        p_dst_offset: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
        p_extent: Ptr[UInt64] = zero_init[Ptr[UInt64]](),
    ):
        self.s_type = StructureType.TENSOR_COPY_ARM
        self.p_next = p_next
        self.dimension_count = dimension_count
        self.p_src_offset = p_src_offset
        self.p_dst_offset = p_dst_offset
        self.p_extent = p_extent


struct MemoryDedicatedAllocateInfoTensorARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor: TensorARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor: TensorARM = zero_init[TensorARM](),
    ):
        self.s_type = StructureType.MEMORY_DEDICATED_ALLOCATE_INFO_TENSOR_ARM
        self.p_next = p_next
        self.tensor = tensor


struct PhysicalDeviceDescriptorBufferTensorPropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor_capture_replay_descriptor_data_size: UInt
    var tensor_view_capture_replay_descriptor_data_size: UInt
    var tensor_descriptor_size: UInt

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor_capture_replay_descriptor_data_size: UInt = zero_init[UInt](),
        tensor_view_capture_replay_descriptor_data_size: UInt = zero_init[UInt](),
        tensor_descriptor_size: UInt = zero_init[UInt](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_PROPERTIES_ARM
        self.p_next = p_next
        self.tensor_capture_replay_descriptor_data_size = tensor_capture_replay_descriptor_data_size
        self.tensor_view_capture_replay_descriptor_data_size = tensor_view_capture_replay_descriptor_data_size
        self.tensor_descriptor_size = tensor_descriptor_size


struct PhysicalDeviceDescriptorBufferTensorFeaturesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_buffer_tensor_descriptors: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_buffer_tensor_descriptors: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_FEATURES_ARM
        self.p_next = p_next
        self.descriptor_buffer_tensor_descriptors = descriptor_buffer_tensor_descriptors


struct TensorCaptureDescriptorDataInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor: TensorARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor: TensorARM = zero_init[TensorARM](),
    ):
        self.s_type = StructureType.TENSOR_CAPTURE_DESCRIPTOR_DATA_INFO_ARM
        self.p_next = p_next
        self.tensor = tensor


struct TensorViewCaptureDescriptorDataInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor_view: TensorViewARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor_view: TensorViewARM = zero_init[TensorViewARM](),
    ):
        self.s_type = StructureType.TENSOR_VIEW_CAPTURE_DESCRIPTOR_DATA_INFO_ARM
        self.p_next = p_next
        self.tensor_view = tensor_view


struct DescriptorGetTensorInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor_view: TensorViewARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor_view: TensorViewARM = zero_init[TensorViewARM](),
    ):
        self.s_type = StructureType.DESCRIPTOR_GET_TENSOR_INFO_ARM
        self.p_next = p_next
        self.tensor_view = tensor_view


struct FrameBoundaryTensorsARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var tensor_count: UInt32
    var p_tensors: Ptr[TensorARM]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        tensor_count: UInt32 = zero_init[UInt32](),
        p_tensors: Ptr[TensorARM] = zero_init[Ptr[TensorARM]](),
    ):
        self.s_type = StructureType.FRAME_BOUNDARY_TENSORS_ARM
        self.p_next = p_next
        self.tensor_count = tensor_count
        self.p_tensors = p_tensors


struct PhysicalDeviceExternalTensorInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: TensorCreateFlagsARM
    var p_description: Ptr[TensorDescriptionARM]
    var handle_type: ExternalMemoryHandleTypeFlagBits

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: TensorCreateFlagsARM = zero_init[TensorCreateFlagsARM](),
        p_description: Ptr[TensorDescriptionARM] = zero_init[Ptr[TensorDescriptionARM]](),
        handle_type: ExternalMemoryHandleTypeFlagBits = zero_init[ExternalMemoryHandleTypeFlagBits](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_EXTERNAL_TENSOR_INFO_ARM
        self.p_next = p_next
        self.flags = flags
        self.p_description = p_description
        self.handle_type = handle_type


struct ExternalTensorPropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var external_memory_properties: ExternalMemoryProperties

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        external_memory_properties: ExternalMemoryProperties = zero_init[ExternalMemoryProperties](),
    ):
        self.s_type = StructureType.EXTERNAL_TENSOR_PROPERTIES_ARM
        self.p_next = p_next
        self.external_memory_properties = external_memory_properties


struct ExternalMemoryTensorCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var handle_types: ExternalMemoryHandleTypeFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        handle_types: ExternalMemoryHandleTypeFlags = zero_init[ExternalMemoryHandleTypeFlags](),
    ):
        self.s_type = StructureType.EXTERNAL_MEMORY_TENSOR_CREATE_INFO_ARM
        self.p_next = p_next
        self.handle_types = handle_types


struct PhysicalDeviceShaderFloat8FeaturesEXT(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_float_8: Bool32
    var shader_float_8_cooperative_matrix: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_float_8: Bool32 = zero_init[Bool32](),
        shader_float_8_cooperative_matrix: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_FLOAT8_FEATURES_EXT
        self.p_next = p_next
        self.shader_float_8 = shader_float_8
        self.shader_float_8_cooperative_matrix = shader_float_8_cooperative_matrix


struct SurfaceCreateInfoOHOS(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: SurfaceCreateFlagsOHOS
    var window: Ptr[OHNativeWindow]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: SurfaceCreateFlagsOHOS = zero_init[SurfaceCreateFlagsOHOS](),
        window: Ptr[OHNativeWindow] = zero_init[Ptr[OHNativeWindow]](),
    ):
        self.s_type = StructureType.SURFACE_CREATE_INFO_OHOS
        self.p_next = p_next
        self.flags = flags
        self.window = window


struct PhysicalDeviceDataGraphFeaturesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var data_graph: Bool32
    var data_graph_update_after_bind: Bool32
    var data_graph_specialization_constants: Bool32
    var data_graph_descriptor_buffer: Bool32
    var data_graph_shader_module: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        data_graph: Bool32 = zero_init[Bool32](),
        data_graph_update_after_bind: Bool32 = zero_init[Bool32](),
        data_graph_specialization_constants: Bool32 = zero_init[Bool32](),
        data_graph_descriptor_buffer: Bool32 = zero_init[Bool32](),
        data_graph_shader_module: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_DATA_GRAPH_FEATURES_ARM
        self.p_next = p_next
        self.data_graph = data_graph
        self.data_graph_update_after_bind = data_graph_update_after_bind
        self.data_graph_specialization_constants = data_graph_specialization_constants
        self.data_graph_descriptor_buffer = data_graph_descriptor_buffer
        self.data_graph_shader_module = data_graph_shader_module


struct DataGraphPipelineConstantTensorSemiStructuredSparsityInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var dimension: UInt32
    var zero_count: UInt32
    var group_size: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        dimension: UInt32 = zero_init[UInt32](),
        zero_count: UInt32 = zero_init[UInt32](),
        group_size: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_CONSTANT_TENSOR_SEMI_STRUCTURED_SPARSITY_INFO_ARM
        self.p_next = p_next
        self.dimension = dimension
        self.zero_count = zero_count
        self.group_size = group_size


struct DataGraphPipelineConstantARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var id: UInt32
    var p_constant_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        id: UInt32 = zero_init[UInt32](),
        p_constant_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_CONSTANT_ARM
        self.p_next = p_next
        self.id = id
        self.p_constant_data = p_constant_data


struct DataGraphPipelineResourceInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var descriptor_set: UInt32
    var binding: UInt32
    var array_element: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        descriptor_set: UInt32 = zero_init[UInt32](),
        binding: UInt32 = zero_init[UInt32](),
        array_element: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_RESOURCE_INFO_ARM
        self.p_next = p_next
        self.descriptor_set = descriptor_set
        self.binding = binding
        self.array_element = array_element


struct DataGraphPipelineCompilerControlCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var p_vendor_options: Ptr[UInt8]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        p_vendor_options: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_COMPILER_CONTROL_CREATE_INFO_ARM
        self.p_next = p_next
        self.p_vendor_options = p_vendor_options


struct DataGraphPipelineCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: PipelineCreateFlags2KHR
    var layout: PipelineLayout
    var resource_info_count: UInt32
    var p_resource_infos: Ptr[DataGraphPipelineResourceInfoARM]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: PipelineCreateFlags2KHR = zero_init[PipelineCreateFlags2KHR](),
        layout: PipelineLayout = zero_init[PipelineLayout](),
        resource_info_count: UInt32 = zero_init[UInt32](),
        p_resource_infos: Ptr[DataGraphPipelineResourceInfoARM] = zero_init[Ptr[DataGraphPipelineResourceInfoARM]](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_CREATE_INFO_ARM
        self.p_next = p_next
        self.flags = flags
        self.layout = layout
        self.resource_info_count = resource_info_count
        self.p_resource_infos = p_resource_infos


struct DataGraphPipelineShaderModuleCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var module: ShaderModule
    var p_name: Ptr[UInt8]
    var p_specialization_info: Ptr[SpecializationInfo]
    var constant_count: UInt32
    var p_constants: Ptr[DataGraphPipelineConstantARM]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        module: ShaderModule = zero_init[ShaderModule](),
        p_name: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
        p_specialization_info: Ptr[SpecializationInfo] = zero_init[Ptr[SpecializationInfo]](),
        constant_count: UInt32 = zero_init[UInt32](),
        p_constants: Ptr[DataGraphPipelineConstantARM] = zero_init[Ptr[DataGraphPipelineConstantARM]](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_SHADER_MODULE_CREATE_INFO_ARM
        self.p_next = p_next
        self.module = module
        self.p_name = p_name
        self.p_specialization_info = p_specialization_info
        self.constant_count = constant_count
        self.p_constants = p_constants


struct DataGraphPipelineSessionCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DataGraphPipelineSessionCreateFlagsARM
    var data_graph_pipeline: Pipeline

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DataGraphPipelineSessionCreateFlagsARM = zero_init[DataGraphPipelineSessionCreateFlagsARM](),
        data_graph_pipeline: Pipeline = zero_init[Pipeline](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_SESSION_CREATE_INFO_ARM
        self.p_next = p_next
        self.flags = flags
        self.data_graph_pipeline = data_graph_pipeline


struct DataGraphPipelineSessionBindPointRequirementsInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var session: DataGraphPipelineSessionARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        session: DataGraphPipelineSessionARM = zero_init[DataGraphPipelineSessionARM](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_REQUIREMENTS_INFO_ARM
        self.p_next = p_next
        self.session = session


struct DataGraphPipelineSessionBindPointRequirementARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var bind_point: DataGraphPipelineSessionBindPointARM
    var bind_point_type: DataGraphPipelineSessionBindPointTypeARM
    var num_objects: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        bind_point: DataGraphPipelineSessionBindPointARM = zero_init[DataGraphPipelineSessionBindPointARM](),
        bind_point_type: DataGraphPipelineSessionBindPointTypeARM = zero_init[DataGraphPipelineSessionBindPointTypeARM](),
        num_objects: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_SESSION_BIND_POINT_REQUIREMENT_ARM
        self.p_next = p_next
        self.bind_point = bind_point
        self.bind_point_type = bind_point_type
        self.num_objects = num_objects


struct DataGraphPipelineSessionMemoryRequirementsInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var session: DataGraphPipelineSessionARM
    var bind_point: DataGraphPipelineSessionBindPointARM
    var object_index: UInt32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        session: DataGraphPipelineSessionARM = zero_init[DataGraphPipelineSessionARM](),
        bind_point: DataGraphPipelineSessionBindPointARM = zero_init[DataGraphPipelineSessionBindPointARM](),
        object_index: UInt32 = zero_init[UInt32](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_SESSION_MEMORY_REQUIREMENTS_INFO_ARM
        self.p_next = p_next
        self.session = session
        self.bind_point = bind_point
        self.object_index = object_index


struct BindDataGraphPipelineSessionMemoryInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var session: DataGraphPipelineSessionARM
    var bind_point: DataGraphPipelineSessionBindPointARM
    var object_index: UInt32
    var memory: DeviceMemory
    var memory_offset: DeviceSize

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        session: DataGraphPipelineSessionARM = zero_init[DataGraphPipelineSessionARM](),
        bind_point: DataGraphPipelineSessionBindPointARM = zero_init[DataGraphPipelineSessionBindPointARM](),
        object_index: UInt32 = zero_init[UInt32](),
        memory: DeviceMemory = zero_init[DeviceMemory](),
        memory_offset: DeviceSize = zero_init[DeviceSize](),
    ):
        self.s_type = StructureType.BIND_DATA_GRAPH_PIPELINE_SESSION_MEMORY_INFO_ARM
        self.p_next = p_next
        self.session = session
        self.bind_point = bind_point
        self.object_index = object_index
        self.memory = memory
        self.memory_offset = memory_offset


struct DataGraphPipelineInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var data_graph_pipeline: Pipeline

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        data_graph_pipeline: Pipeline = zero_init[Pipeline](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_INFO_ARM
        self.p_next = p_next
        self.data_graph_pipeline = data_graph_pipeline


struct DataGraphPipelinePropertyQueryResultARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var property: DataGraphPipelinePropertyARM
    var is_text: Bool32
    var data_size: UInt
    var p_data: Ptr[NoneType]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        property: DataGraphPipelinePropertyARM = zero_init[DataGraphPipelinePropertyARM](),
        is_text: Bool32 = zero_init[Bool32](),
        data_size: UInt = zero_init[UInt](),
        p_data: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_PROPERTY_QUERY_RESULT_ARM
        self.p_next = p_next
        self.property = property
        self.is_text = is_text
        self.data_size = data_size
        self.p_data = p_data


struct DataGraphPipelineIdentifierCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var identifier_size: UInt32
    var p_identifier: Ptr[UInt8]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        identifier_size: UInt32 = zero_init[UInt32](),
        p_identifier: Ptr[UInt8] = zero_init[Ptr[UInt8]](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_IDENTIFIER_CREATE_INFO_ARM
        self.p_next = p_next
        self.identifier_size = identifier_size
        self.p_identifier = p_identifier


struct DataGraphPipelineDispatchInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var flags: DataGraphPipelineDispatchFlagsARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        flags: DataGraphPipelineDispatchFlagsARM = zero_init[DataGraphPipelineDispatchFlagsARM](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PIPELINE_DISPATCH_INFO_ARM
        self.p_next = p_next
        self.flags = flags


struct PhysicalDeviceDataGraphProcessingEngineARM(ImplicitlyCopyable, Movable):
    var type: PhysicalDeviceDataGraphProcessingEngineTypeARM
    var is_foreign: Bool32

    fn __init__(
        out self,
        type: PhysicalDeviceDataGraphProcessingEngineTypeARM = zero_init[PhysicalDeviceDataGraphProcessingEngineTypeARM](),
        is_foreign: Bool32 = zero_init[Bool32](),
    ):
        self.type = type
        self.is_foreign = is_foreign


struct PhysicalDeviceDataGraphOperationSupportARM(ImplicitlyCopyable, Movable):
    var operation_type: PhysicalDeviceDataGraphOperationTypeARM
    var name: InlineArray[UInt8, Int(MAX_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_SET_NAME_SIZE_ARM)]
    var version: Version

    fn __init__(
        out self,
        operation_type: PhysicalDeviceDataGraphOperationTypeARM = zero_init[PhysicalDeviceDataGraphOperationTypeARM](),
        name: InlineArray[UInt8, Int(MAX_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_SET_NAME_SIZE_ARM)] = zero_init[InlineArray[UInt8, Int(MAX_PHYSICAL_DEVICE_DATA_GRAPH_OPERATION_SET_NAME_SIZE_ARM)]](),
        version: Version = zero_init[Version](),
    ):
        self.operation_type = operation_type
        self.name = name
        self.version = version

    fn name_slice(self) -> StringSlice[__origin_of(self.name)]:
        return StringSlice[__origin_of(self.name)](unsafe_from_utf8_ptr = self.name.unsafe_ptr())


struct QueueFamilyDataGraphPropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var engine: PhysicalDeviceDataGraphProcessingEngineARM
    var operation: PhysicalDeviceDataGraphOperationSupportARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        engine: PhysicalDeviceDataGraphProcessingEngineARM = zero_init[PhysicalDeviceDataGraphProcessingEngineARM](),
        operation: PhysicalDeviceDataGraphOperationSupportARM = zero_init[PhysicalDeviceDataGraphOperationSupportARM](),
    ):
        self.s_type = StructureType.QUEUE_FAMILY_DATA_GRAPH_PROPERTIES_ARM
        self.p_next = p_next
        self.engine = engine
        self.operation = operation


struct PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var queue_family_index: UInt32
    var engine_type: PhysicalDeviceDataGraphProcessingEngineTypeARM

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        queue_family_index: UInt32 = zero_init[UInt32](),
        engine_type: PhysicalDeviceDataGraphProcessingEngineTypeARM = zero_init[PhysicalDeviceDataGraphProcessingEngineTypeARM](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_QUEUE_FAMILY_DATA_GRAPH_PROCESSING_ENGINE_INFO_ARM
        self.p_next = p_next
        self.queue_family_index = queue_family_index
        self.engine_type = engine_type


struct QueueFamilyDataGraphProcessingEnginePropertiesARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var foreign_semaphore_handle_types: ExternalSemaphoreHandleTypeFlags
    var foreign_memory_handle_types: ExternalMemoryHandleTypeFlags

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        foreign_semaphore_handle_types: ExternalSemaphoreHandleTypeFlags = zero_init[ExternalSemaphoreHandleTypeFlags](),
        foreign_memory_handle_types: ExternalMemoryHandleTypeFlags = zero_init[ExternalMemoryHandleTypeFlags](),
    ):
        self.s_type = StructureType.QUEUE_FAMILY_DATA_GRAPH_PROCESSING_ENGINE_PROPERTIES_ARM
        self.p_next = p_next
        self.foreign_semaphore_handle_types = foreign_semaphore_handle_types
        self.foreign_memory_handle_types = foreign_memory_handle_types


struct DataGraphProcessingEngineCreateInfoARM(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var processing_engine_count: UInt32
    var p_processing_engines: Ptr[PhysicalDeviceDataGraphProcessingEngineARM]

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        processing_engine_count: UInt32 = zero_init[UInt32](),
        p_processing_engines: Ptr[PhysicalDeviceDataGraphProcessingEngineARM] = zero_init[Ptr[PhysicalDeviceDataGraphProcessingEngineARM]](),
    ):
        self.s_type = StructureType.DATA_GRAPH_PROCESSING_ENGINE_CREATE_INFO_ARM
        self.p_next = p_next
        self.processing_engine_count = processing_engine_count
        self.p_processing_engines = p_processing_engines


struct PhysicalDevicePipelineCacheIncrementalModeFeaturesSEC(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var pipeline_cache_incremental_mode: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        pipeline_cache_incremental_mode: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_PIPELINE_CACHE_INCREMENTAL_MODE_FEATURES_SEC
        self.p_next = p_next
        self.pipeline_cache_incremental_mode = pipeline_cache_incremental_mode


struct PhysicalDeviceShaderUntypedPointersFeaturesKHR(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var shader_untyped_pointers: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        shader_untyped_pointers: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_SHADER_UNTYPED_POINTERS_FEATURES_KHR
        self.p_next = p_next
        self.shader_untyped_pointers = shader_untyped_pointers


struct PhysicalDeviceVideoEncodeRgbConversionFeaturesVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var video_encode_rgb_conversion: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        video_encode_rgb_conversion: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.PHYSICAL_DEVICE_VIDEO_ENCODE_RGB_CONVERSION_FEATURES_VALVE
        self.p_next = p_next
        self.video_encode_rgb_conversion = video_encode_rgb_conversion


struct VideoEncodeRgbConversionCapabilitiesVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var rgb_models: VideoEncodeRgbModelConversionFlagsVALVE
    var rgb_ranges: VideoEncodeRgbRangeCompressionFlagsVALVE
    var x_chroma_offsets: VideoEncodeRgbChromaOffsetFlagsVALVE
    var y_chroma_offsets: VideoEncodeRgbChromaOffsetFlagsVALVE

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        rgb_models: VideoEncodeRgbModelConversionFlagsVALVE = zero_init[VideoEncodeRgbModelConversionFlagsVALVE](),
        rgb_ranges: VideoEncodeRgbRangeCompressionFlagsVALVE = zero_init[VideoEncodeRgbRangeCompressionFlagsVALVE](),
        x_chroma_offsets: VideoEncodeRgbChromaOffsetFlagsVALVE = zero_init[VideoEncodeRgbChromaOffsetFlagsVALVE](),
        y_chroma_offsets: VideoEncodeRgbChromaOffsetFlagsVALVE = zero_init[VideoEncodeRgbChromaOffsetFlagsVALVE](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_RGB_CONVERSION_CAPABILITIES_VALVE
        self.p_next = p_next
        self.rgb_models = rgb_models
        self.rgb_ranges = rgb_ranges
        self.x_chroma_offsets = x_chroma_offsets
        self.y_chroma_offsets = y_chroma_offsets


struct VideoEncodeProfileRgbConversionInfoVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var perform_encode_rgb_conversion: Bool32

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        perform_encode_rgb_conversion: Bool32 = zero_init[Bool32](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_PROFILE_RGB_CONVERSION_INFO_VALVE
        self.p_next = p_next
        self.perform_encode_rgb_conversion = perform_encode_rgb_conversion


struct VideoEncodeSessionRgbConversionCreateInfoVALVE(ImplicitlyCopyable, Movable):
    var s_type: StructureType
    var p_next: Ptr[NoneType]
    var rgb_model: VideoEncodeRgbModelConversionFlagBitsVALVE
    var rgb_range: VideoEncodeRgbRangeCompressionFlagBitsVALVE
    var x_chroma_offset: VideoEncodeRgbChromaOffsetFlagBitsVALVE
    var y_chroma_offset: VideoEncodeRgbChromaOffsetFlagBitsVALVE

    fn __init__(
        out self,
        p_next: Ptr[NoneType] = zero_init[Ptr[NoneType]](),
        rgb_model: VideoEncodeRgbModelConversionFlagBitsVALVE = zero_init[VideoEncodeRgbModelConversionFlagBitsVALVE](),
        rgb_range: VideoEncodeRgbRangeCompressionFlagBitsVALVE = zero_init[VideoEncodeRgbRangeCompressionFlagBitsVALVE](),
        x_chroma_offset: VideoEncodeRgbChromaOffsetFlagBitsVALVE = zero_init[VideoEncodeRgbChromaOffsetFlagBitsVALVE](),
        y_chroma_offset: VideoEncodeRgbChromaOffsetFlagBitsVALVE = zero_init[VideoEncodeRgbChromaOffsetFlagBitsVALVE](),
    ):
        self.s_type = StructureType.VIDEO_ENCODE_SESSION_RGB_CONVERSION_CREATE_INFO_VALVE
        self.p_next = p_next
        self.rgb_model = rgb_model
        self.rgb_range = rgb_range
        self.x_chroma_offset = x_chroma_offset
        self.y_chroma_offset = y_chroma_offset
